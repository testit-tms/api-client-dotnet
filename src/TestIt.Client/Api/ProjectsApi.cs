/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIt.Client.Client;
using TestIt.Client.Model;

namespace TestIt.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add global attributes to project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void AddGlobaAttributesToProject(string id, List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// Add global attributes to project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGlobaAttributesToProjectWithHttpInfo(string id, List<Guid> requestBody = default(List<Guid>));
        /// <summary>
        /// Search for custom attributes templates
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <returns>List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        List<ProjectCustomAttributeTemplateGetModel> ApiV2ProjectsIdAttributesTemplatesSearchPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel));

        /// <summary>
        /// Search for custom attributes templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        ApiResponse<List<ProjectCustomAttributeTemplateGetModel>> ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel));
        /// <summary>
        /// Delete CustomAttributeTemplate from Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns></returns>
        void ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete(string id, Guid templateId);

        /// <summary>
        /// Delete CustomAttributeTemplate from Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfo(string id, Guid templateId);
        /// <summary>
        /// Add CustomAttributeTemplate to Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns></returns>
        void ApiV2ProjectsIdAttributesTemplatesTemplateIdPost(string id, Guid templateId);

        /// <summary>
        /// Add CustomAttributeTemplate to Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfo(string id, Guid templateId);
        /// <summary>
        /// Get Project FailureClasses
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;FailureClassModel&gt;</returns>
        List<FailureClassModel> ApiV2ProjectsIdFailureClassesGet(string id, bool? isDeleted = default(bool?));

        /// <summary>
        /// Get Project FailureClasses
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FailureClassModel&gt;</returns>
        ApiResponse<List<FailureClassModel>> ApiV2ProjectsIdFailureClassesGetWithHttpInfo(string id, bool? isDeleted = default(bool?));
        /// <summary>
        /// Mark Project as favorite
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        void ApiV2ProjectsIdFavoritePut(string id);

        /// <summary>
        /// Mark Project as favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2ProjectsIdFavoritePutWithHttpInfo(string id);
        /// <summary>
        /// Get Project filters
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;FilterModel&gt;</returns>
        List<FilterModel> ApiV2ProjectsIdFiltersGet(string id);

        /// <summary>
        /// Get Project filters
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;FilterModel&gt;</returns>
        ApiResponse<List<FilterModel>> ApiV2ProjectsIdFiltersGetWithHttpInfo(string id);
        /// <summary>
        /// Get TestPlans analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestPlanWithAnalyticModel&gt;</returns>
        List<TestPlanWithAnalyticModel> ApiV2ProjectsIdTestPlansAnalyticsGet(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get TestPlans analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        ApiResponse<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <returns>bool</returns>
        bool ApiV2ProjectsIdTestPlansNameExistsGet(Guid id, string name);

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfo(Guid id, string name);
        /// <summary>
        /// Get Project TestPlans with analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <returns>List&lt;TestPlanWithAnalyticModel&gt;</returns>
        List<TestPlanWithAnalyticModel> ApiV2ProjectsIdTestPlansSearchPost(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel));

        /// <summary>
        /// Get Project TestPlans with analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        ApiResponse<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansSearchPostWithHttpInfo(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel));
        /// <summary>
        /// Get active Project TestRuns
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;PublicTestRunModel&gt;</returns>
        List<PublicTestRunModel> ApiV2ProjectsIdTestRunsActiveGet(string id);

        /// <summary>
        /// Get active Project TestRuns
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;PublicTestRunModel&gt;</returns>
        ApiResponse<List<PublicTestRunModel>> ApiV2ProjectsIdTestRunsActiveGetWithHttpInfo(string id);
        /// <summary>
        /// Get Project TestRuns full models
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestRunModel&gt;</returns>
        List<TestRunModel> ApiV2ProjectsIdTestRunsFullGet(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get Project TestRuns full models
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunModel&gt;</returns>
        ApiResponse<List<TestRunModel>> ApiV2ProjectsIdTestRunsFullGetWithHttpInfo(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Search for work items and extract IDs only
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> ApiV2ProjectsIdWorkItemsSearchIdPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));

        /// <summary>
        /// Search for work items and extract IDs only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));
        /// <summary>
        /// Search for work items
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        List<WorkItemShortModel> ApiV2ProjectsIdWorkItemsSearchPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));

        /// <summary>
        /// Search for work items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        ApiResponse<List<WorkItemShortModel>> ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));
        /// <summary>
        /// Get WorkItems Tags
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;TagShortModel&gt;</returns>
        List<TagShortModel> ApiV2ProjectsIdWorkItemsTagsGet(Guid id, bool? isDeleted = default(bool?));

        /// <summary>
        /// Get WorkItems Tags
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TagShortModel&gt;</returns>
        ApiResponse<List<TagShortModel>> ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        bool ApiV2ProjectsNameNameExistsGet(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2ProjectsNameNameExistsGetWithHttpInfo(string name);
        /// <summary>
        /// Search for projects
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <returns>List&lt;ProjectModel&gt;</returns>
        List<ProjectModel> ApiV2ProjectsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel));

        /// <summary>
        /// Search for projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectModel&gt;</returns>
        ApiResponse<List<ProjectModel>> ApiV2ProjectsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel));
        /// <summary>
        /// Add attributes to project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void CreateCustomAttributeTestPlanProjectRelations(string id, List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// Add attributes to project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, List<Guid> requestBody = default(List<Guid>));
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <returns>ProjectModel</returns>
        ProjectModel CreateProject(ProjectPostModel projectPostModel = default(ProjectPostModel));

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <returns>ApiResponse of ProjectModel</returns>
        ApiResponse<ProjectModel> CreateProjectWithHttpInfo(ProjectPostModel projectPostModel = default(ProjectPostModel));
        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>CustomAttributeModel</returns>
        CustomAttributeModel CreateProjectsAttribute(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel));

        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        ApiResponse<CustomAttributeModel> CreateProjectsAttributeWithHttpInfo(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel));
        /// <summary>
        /// Delete attribute from project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <returns></returns>
        void DeleteCustomAttributeTestPlanProjectRelations(string id, Guid attributeId);

        /// <summary>
        /// Delete attribute from project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, Guid attributeId);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        void DeleteProject(string id);

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo(string id);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        void DeleteProjectAutoTests(string id);

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectAutoTestsWithHttpInfo(string id);
        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns></returns>
        void DeleteProjectsAttribute(string id, Guid attributeId);

        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectsAttributeWithHttpInfo(string id, Guid attributeId);
        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter Export(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel));

        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> ExportWithHttpInfo(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel));
        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter ExportWithTestPlansAndConfigurations(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel));

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> ExportWithTestPlansAndConfigurationsWithHttpInfo(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel));
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        List<ProjectModel> GetAllProjects(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        ApiResponse<List<ProjectModel>> GetAllProjectsWithHttpInfo(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>CustomAttributeModel</returns>
        CustomAttributeModel GetAttributeByProjectId(string id, Guid attributeId);

        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        ApiResponse<CustomAttributeModel> GetAttributeByProjectIdWithHttpInfo(string id, Guid attributeId);
        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        List<CustomAttributeModel> GetAttributesByProjectId(string id, bool? isDeleted = default(bool?));

        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        ApiResponse<List<CustomAttributeModel>> GetAttributesByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?));
        /// <summary>
        /// Get namespaces of autotests in project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;AutoTestNamespaceModel&gt;</returns>
        List<AutoTestNamespaceModel> GetAutoTestsNamespaces(string id);

        /// <summary>
        /// Get namespaces of autotests in project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;AutoTestNamespaceModel&gt;</returns>
        ApiResponse<List<AutoTestNamespaceModel>> GetAutoTestsNamespacesWithHttpInfo(string id);
        /// <summary>
        /// Get project configurations
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;ConfigurationModel&gt;</returns>
        List<ConfigurationModel> GetConfigurationsByProjectId(string id);

        /// <summary>
        /// Get project configurations
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;ConfigurationModel&gt;</returns>
        ApiResponse<List<ConfigurationModel>> GetConfigurationsByProjectIdWithHttpInfo(string id);
        /// <summary>
        /// Get project&#39;s test plan attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        List<CustomAttributeModel> GetCustomAttributeTestPlanProjectRelations(string id);

        /// <summary>
        /// Get project&#39;s test plan attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        ApiResponse<List<CustomAttributeModel>> GetCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id);
        /// <summary>
        /// Get project by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ProjectModel</returns>
        ProjectModel GetProjectById(string id);

        /// <summary>
        /// Get project by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of ProjectModel</returns>
        ApiResponse<ProjectModel> GetProjectByIdWithHttpInfo(string id);
        /// <summary>
        /// Get project sections
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;SectionModel&gt;</returns>
        List<SectionModel> GetSectionsByProjectId(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get project sections
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;SectionModel&gt;</returns>
        ApiResponse<List<SectionModel>> GetSectionsByProjectIdWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Get project test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <returns>List&lt;TestPlanModel&gt;</returns>
        List<TestPlanModel> GetTestPlansByProjectId(string id, bool? isDeleted = default(bool?));

        /// <summary>
        /// Get project test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanModel&gt;</returns>
        ApiResponse<List<TestPlanModel>> GetTestPlansByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?));
        /// <summary>
        /// Get project test runs
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestRunV2GetModel&gt;</returns>
        List<TestRunV2GetModel> GetTestRunsByProjectId(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get project test runs
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunV2GetModel&gt;</returns>
        ApiResponse<List<TestRunV2GetModel>> GetTestRunsByProjectIdWithHttpInfo(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Get project work items
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        List<WorkItemShortModel> GetWorkItemsByProjectId(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get project work items
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        ApiResponse<List<WorkItemShortModel>> GetWorkItemsByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Import project from JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns></returns>
        void Import(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter));

        /// <summary>
        /// Import project from JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportWithHttpInfo(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter));
        /// <summary>
        /// Import project from JSON file into existing project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns></returns>
        void ImportToExistingProject(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter));

        /// <summary>
        /// Import project from JSON file into existing project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportToExistingProjectWithHttpInfo(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter));
        /// <summary>
        /// Restore project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        void RestoreProject(string id);

        /// <summary>
        /// Restore project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreProjectWithHttpInfo(string id);
        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        List<CustomAttributeGetModel> SearchAttributesInProject(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));

        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        ApiResponse<List<CustomAttributeGetModel>> SearchAttributesInProjectWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));
        /// <summary>
        /// Search for attributes used in the project test plans
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        List<CustomAttributeGetModel> SearchTestPlanAttributesInProject(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));

        /// <summary>
        /// Search for attributes used in the project test plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        ApiResponse<List<CustomAttributeGetModel>> SearchTestPlanAttributesInProjectWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));
        /// <summary>
        /// Update attribute of project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <returns></returns>
        void UpdateCustomAttributeTestPlanProjectRelations(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel));

        /// <summary>
        /// Update attribute of project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel));
        /// <summary>
        /// Update project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <returns></returns>
        void UpdateProject(ProjectPutModel projectPutModel = default(ProjectPutModel));

        /// <summary>
        /// Update project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProjectWithHttpInfo(ProjectPutModel projectPutModel = default(ProjectPutModel));
        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns></returns>
        void UpdateProjectsAttribute(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel));

        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProjectsAttributeWithHttpInfo(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add global attributes to project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGlobaAttributesToProjectAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add global attributes to project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGlobaAttributesToProjectWithHttpInfoAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for custom attributes templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectCustomAttributeTemplateGetModel>> ApiV2ProjectsIdAttributesTemplatesSearchPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for custom attributes templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectCustomAttributeTemplateGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectCustomAttributeTemplateGetModel>>> ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete CustomAttributeTemplate from Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete CustomAttributeTemplate from Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfoAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add CustomAttributeTemplate to Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2ProjectsIdAttributesTemplatesTemplateIdPostAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add CustomAttributeTemplate to Project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfoAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project FailureClasses
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FailureClassModel&gt;</returns>
        System.Threading.Tasks.Task<List<FailureClassModel>> ApiV2ProjectsIdFailureClassesGetAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project FailureClasses
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FailureClassModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FailureClassModel>>> ApiV2ProjectsIdFailureClassesGetWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark Project as favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2ProjectsIdFavoritePutAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark Project as favorite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2ProjectsIdFavoritePutWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project filters
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterModel&gt;</returns>
        System.Threading.Tasks.Task<List<FilterModel>> ApiV2ProjectsIdFiltersGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project filters
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FilterModel>>> ApiV2ProjectsIdFiltersGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get TestPlans analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansAnalyticsGetAsync(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get TestPlans analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanWithAnalyticModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestPlanWithAnalyticModel>>> ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2ProjectsIdTestPlansNameExistsGetAsync(Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfoAsync(Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project TestPlans with analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansSearchPostAsync(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project TestPlans with analytics
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanWithAnalyticModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestPlanWithAnalyticModel>>> ApiV2ProjectsIdTestPlansSearchPostWithHttpInfoAsync(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get active Project TestRuns
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicTestRunModel&gt;</returns>
        System.Threading.Tasks.Task<List<PublicTestRunModel>> ApiV2ProjectsIdTestRunsActiveGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get active Project TestRuns
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicTestRunModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicTestRunModel>>> ApiV2ProjectsIdTestRunsActiveGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project TestRuns full models
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestRunModel>> ApiV2ProjectsIdTestRunsFullGetAsync(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project TestRuns full models
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestRunModel>>> ApiV2ProjectsIdTestRunsFullGetWithHttpInfoAsync(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for work items and extract IDs only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> ApiV2ProjectsIdWorkItemsSearchIdPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for work items and extract IDs only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for work items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        System.Threading.Tasks.Task<List<WorkItemShortModel>> ApiV2ProjectsIdWorkItemsSearchPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for work items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkItemShortModel>>> ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get WorkItems Tags
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TagShortModel&gt;</returns>
        System.Threading.Tasks.Task<List<TagShortModel>> ApiV2ProjectsIdWorkItemsTagsGetAsync(Guid id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get WorkItems Tags
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TagShortModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TagShortModel>>> ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2ProjectsNameNameExistsGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2ProjectsNameNameExistsGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectModel>> ApiV2ProjectsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectModel>>> ApiV2ProjectsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add attributes to project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCustomAttributeTestPlanProjectRelationsAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add attributes to project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectModel</returns>
        System.Threading.Tasks.Task<ProjectModel> CreateProjectAsync(ProjectPostModel projectPostModel = default(ProjectPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectModel>> CreateProjectWithHttpInfoAsync(ProjectPostModel projectPostModel = default(ProjectPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        System.Threading.Tasks.Task<CustomAttributeModel> CreateProjectsAttributeAsync(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomAttributeModel>> CreateProjectsAttributeWithHttpInfoAsync(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete attribute from project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomAttributeTestPlanProjectRelationsAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete attribute from project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAutoTestsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAutoTestsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectsAttributeAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectsAttributeWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> ExportAsync(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> ExportWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> ExportWithTestPlansAndConfigurationsAsync(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> ExportWithTestPlansAndConfigurationsWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ProjectModel>> GetAllProjectsAsync(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectModel&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ProjectModel>>> GetAllProjectsWithHttpInfoAsync(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        System.Threading.Tasks.Task<CustomAttributeModel> GetAttributeByProjectIdAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomAttributeModel>> GetAttributeByProjectIdWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeModel>> GetAttributesByProjectIdAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeModel>>> GetAttributesByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get namespaces of autotests in project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutoTestNamespaceModel&gt;</returns>
        System.Threading.Tasks.Task<List<AutoTestNamespaceModel>> GetAutoTestsNamespacesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get namespaces of autotests in project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutoTestNamespaceModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutoTestNamespaceModel>>> GetAutoTestsNamespacesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project configurations
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConfigurationModel&gt;</returns>
        System.Threading.Tasks.Task<List<ConfigurationModel>> GetConfigurationsByProjectIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project configurations
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConfigurationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConfigurationModel>>> GetConfigurationsByProjectIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project&#39;s test plan attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeModel>> GetCustomAttributeTestPlanProjectRelationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project&#39;s test plan attributes
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeModel>>> GetCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectModel</returns>
        System.Threading.Tasks.Task<ProjectModel> GetProjectByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectModel>> GetProjectByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project sections
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SectionModel&gt;</returns>
        System.Threading.Tasks.Task<List<SectionModel>> GetSectionsByProjectIdAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project sections
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SectionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SectionModel>>> GetSectionsByProjectIdWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestPlanModel>> GetTestPlansByProjectIdAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestPlanModel>>> GetTestPlansByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project test runs
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunV2GetModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestRunV2GetModel>> GetTestRunsByProjectIdAsync(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project test runs
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunV2GetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestRunV2GetModel>>> GetTestRunsByProjectIdWithHttpInfoAsync(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project work items
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        System.Threading.Tasks.Task<List<WorkItemShortModel>> GetWorkItemsByProjectIdAsync(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project work items
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkItemShortModel>>> GetWorkItemsByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import project from JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportAsync(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import project from JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportWithHttpInfoAsync(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import project from JSON file into existing project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportToExistingProjectAsync(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import project from JSON file into existing project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportToExistingProjectWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restore project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreProjectAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restore project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreProjectWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchAttributesInProjectAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeGetModel>>> SearchAttributesInProjectWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for attributes used in the project test plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchTestPlanAttributesInProjectAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for attributes used in the project test plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeGetModel>>> SearchTestPlanAttributesInProjectWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update attribute of project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCustomAttributeTestPlanProjectRelationsAsync(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update attribute of project&#39;s test plans
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectAsync(ProjectPutModel projectPutModel = default(ProjectPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update project
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectWithHttpInfoAsync(ProjectPutModel projectPutModel = default(ProjectPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectsAttributeAsync(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectsAttributeWithHttpInfoAsync(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IProjectsApiSync, IProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IDisposable, IProjectsApi
    {
        private TestIt.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProjectsApi(string basePath)
        {
            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                new TestIt.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProjectsApi(TestIt.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                new TestIt.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectsApi(HttpClient client, TestIt.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProjectsApi(TestIt.Client.Client.ISynchronousClient client, TestIt.Client.Client.IAsynchronousClient asyncClient, TestIt.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIt.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIt.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIt.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIt.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIt.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add global attributes to project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void AddGlobaAttributesToProject(string id, List<Guid> requestBody = default(List<Guid>))
        {
            AddGlobaAttributesToProjectWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// Add global attributes to project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> AddGlobaAttributesToProjectWithHttpInfo(string id, List<Guid> requestBody = default(List<Guid>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->AddGlobaAttributesToProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/{id}/globalAttributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGlobaAttributesToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add global attributes to project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGlobaAttributesToProjectAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddGlobaAttributesToProjectWithHttpInfoAsync(id, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add global attributes to project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;System search project  &lt;br&gt;System relates global attributes with project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> AddGlobaAttributesToProjectWithHttpInfoAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->AddGlobaAttributesToProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/{id}/globalAttributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGlobaAttributesToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for custom attributes templates 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <returns>List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        public List<ProjectCustomAttributeTemplateGetModel> ApiV2ProjectsIdAttributesTemplatesSearchPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectCustomAttributeTemplateGetModel>> localVarResponse = ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, projectCustomAttributesTemplatesFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for custom attributes templates 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<ProjectCustomAttributeTemplateGetModel>> ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesSearchPost");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectCustomAttributesTemplatesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProjectCustomAttributeTemplateGetModel>>("/api/v2/projects/{id}/attributes/templates/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for custom attributes templates 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectCustomAttributeTemplateGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectCustomAttributeTemplateGetModel>> ApiV2ProjectsIdAttributesTemplatesSearchPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectCustomAttributeTemplateGetModel>> localVarResponse = await ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, projectCustomAttributesTemplatesFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for custom attributes templates 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectCustomAttributesTemplatesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectCustomAttributeTemplateGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<ProjectCustomAttributeTemplateGetModel>>> ApiV2ProjectsIdAttributesTemplatesSearchPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectCustomAttributesTemplatesFilterModel projectCustomAttributesTemplatesFilterModel = default(ProjectCustomAttributesTemplatesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesSearchPost");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectCustomAttributesTemplatesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProjectCustomAttributeTemplateGetModel>>("/api/v2/projects/{id}/attributes/templates/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CustomAttributeTemplate from Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns></returns>
        public void ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete(string id, Guid templateId)
        {
            ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfo(id, templateId);
        }

        /// <summary>
        /// Delete CustomAttributeTemplate from Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfo(string id, Guid templateId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", TestIt.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{id}/attributes/templates/{templateId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CustomAttributeTemplate from Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfoAsync(id, templateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete CustomAttributeTemplate from Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2ProjectsIdAttributesTemplatesTemplateIdDeleteWithHttpInfoAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", TestIt.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{id}/attributes/templates/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesTemplateIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add CustomAttributeTemplate to Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns></returns>
        public void ApiV2ProjectsIdAttributesTemplatesTemplateIdPost(string id, Guid templateId)
        {
            ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfo(id, templateId);
        }

        /// <summary>
        /// Add CustomAttributeTemplate to Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfo(string id, Guid templateId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesTemplateIdPost");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", TestIt.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/{id}/attributes/templates/{templateId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesTemplateIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add CustomAttributeTemplate to Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2ProjectsIdAttributesTemplatesTemplateIdPostAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfoAsync(id, templateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add CustomAttributeTemplate to Project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="templateId">CustomAttributeTemplate internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2ProjectsIdAttributesTemplatesTemplateIdPostWithHttpInfoAsync(string id, Guid templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdAttributesTemplatesTemplateIdPost");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", TestIt.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/{id}/attributes/templates/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdAttributesTemplatesTemplateIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project FailureClasses &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;FailureClassModel&gt;</returns>
        public List<FailureClassModel> ApiV2ProjectsIdFailureClassesGet(string id, bool? isDeleted = default(bool?))
        {
            TestIt.Client.Client.ApiResponse<List<FailureClassModel>> localVarResponse = ApiV2ProjectsIdFailureClassesGetWithHttpInfo(id, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project FailureClasses &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FailureClassModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<FailureClassModel>> ApiV2ProjectsIdFailureClassesGetWithHttpInfo(string id, bool? isDeleted = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFailureClassesGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FailureClassModel>>("/api/v2/projects/{id}/failureClasses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFailureClassesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project FailureClasses &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FailureClassModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FailureClassModel>> ApiV2ProjectsIdFailureClassesGetAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<FailureClassModel>> localVarResponse = await ApiV2ProjectsIdFailureClassesGetWithHttpInfoAsync(id, isDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project FailureClasses &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FailureClassModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<FailureClassModel>>> ApiV2ProjectsIdFailureClassesGetWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFailureClassesGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FailureClassModel>>("/api/v2/projects/{id}/failureClasses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFailureClassesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Project as favorite 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        public void ApiV2ProjectsIdFavoritePut(string id)
        {
            ApiV2ProjectsIdFavoritePutWithHttpInfo(id);
        }

        /// <summary>
        /// Mark Project as favorite 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2ProjectsIdFavoritePutWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFavoritePut");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/projects/{id}/favorite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFavoritePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Project as favorite 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2ProjectsIdFavoritePutAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2ProjectsIdFavoritePutWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Mark Project as favorite 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2ProjectsIdFavoritePutWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFavoritePut");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/projects/{id}/favorite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFavoritePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project filters &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;FilterModel&gt;</returns>
        public List<FilterModel> ApiV2ProjectsIdFiltersGet(string id)
        {
            TestIt.Client.Client.ApiResponse<List<FilterModel>> localVarResponse = ApiV2ProjectsIdFiltersGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project filters &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;FilterModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<FilterModel>> ApiV2ProjectsIdFiltersGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFiltersGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FilterModel>>("/api/v2/projects/{id}/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFiltersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project filters &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FilterModel>> ApiV2ProjectsIdFiltersGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<FilterModel>> localVarResponse = await ApiV2ProjectsIdFiltersGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project filters &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<FilterModel>>> ApiV2ProjectsIdFiltersGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdFiltersGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FilterModel>>("/api/v2/projects/{id}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdFiltersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestPlans analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public List<TestPlanWithAnalyticModel> ApiV2ProjectsIdTestPlansAnalyticsGet(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> localVarResponse = ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfo(id, isDeleted, mustUpdateCache, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestPlans analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (mustUpdateCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustUpdateCache", mustUpdateCache));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestPlanWithAnalyticModel>>("/api/v2/projects/{id}/testPlans/analytics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansAnalyticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestPlans analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansAnalyticsGetAsync(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> localVarResponse = await ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfoAsync(id, isDeleted, mustUpdateCache, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestPlans analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanWithAnalyticModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>>> ApiV2ProjectsIdTestPlansAnalyticsGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (mustUpdateCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustUpdateCache", mustUpdateCache));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestPlanWithAnalyticModel>>("/api/v2/projects/{id}/testPlans/analytics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansAnalyticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <returns>bool</returns>
        public bool ApiV2ProjectsIdTestPlansNameExistsGet(Guid id, string name)
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <returns>ApiResponse of bool</returns>
        public TestIt.Client.Client.ApiResponse<bool> ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfo(Guid id, string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->ApiV2ProjectsIdTestPlansNameExistsGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/projects/{id}/testPlans/{name}/exists", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2ProjectsIdTestPlansNameExistsGetAsync(Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = await ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfoAsync(id, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks if TestPlan exists with the specified name exists for the project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System purge delete project workitems
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="name">TestPlan name to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<bool>> ApiV2ProjectsIdTestPlansNameExistsGetWithHttpInfoAsync(Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->ApiV2ProjectsIdTestPlansNameExistsGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/projects/{id}/testPlans/{name}/exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project TestPlans with analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <returns>List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public List<TestPlanWithAnalyticModel> ApiV2ProjectsIdTestPlansSearchPost(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> localVarResponse = ApiV2ProjectsIdTestPlansSearchPostWithHttpInfo(id, mustUpdateCache, skip, take, orderBy, searchField, searchValue, testPlanSearchQueryModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project TestPlans with analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansSearchPostWithHttpInfo(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestPlansSearchPost");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mustUpdateCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustUpdateCache", mustUpdateCache));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = testPlanSearchQueryModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TestPlanWithAnalyticModel>>("/api/v2/projects/{id}/testPlans/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project TestPlans with analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanWithAnalyticModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestPlanWithAnalyticModel>> ApiV2ProjectsIdTestPlansSearchPostAsync(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>> localVarResponse = await ApiV2ProjectsIdTestPlansSearchPostWithHttpInfoAsync(id, mustUpdateCache, skip, take, orderBy, searchField, searchValue, testPlanSearchQueryModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project TestPlans with analytics &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="mustUpdateCache"> (optional, default to false)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testPlanSearchQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanWithAnalyticModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestPlanWithAnalyticModel>>> ApiV2ProjectsIdTestPlansSearchPostWithHttpInfoAsync(string id, bool? mustUpdateCache = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestPlanSearchQueryModel testPlanSearchQueryModel = default(TestPlanSearchQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestPlansSearchPost");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mustUpdateCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustUpdateCache", mustUpdateCache));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = testPlanSearchQueryModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TestPlanWithAnalyticModel>>("/api/v2/projects/{id}/testPlans/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestPlansSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get active Project TestRuns &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;PublicTestRunModel&gt;</returns>
        public List<PublicTestRunModel> ApiV2ProjectsIdTestRunsActiveGet(string id)
        {
            TestIt.Client.Client.ApiResponse<List<PublicTestRunModel>> localVarResponse = ApiV2ProjectsIdTestRunsActiveGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active Project TestRuns &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;PublicTestRunModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<PublicTestRunModel>> ApiV2ProjectsIdTestRunsActiveGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestRunsActiveGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PublicTestRunModel>>("/api/v2/projects/{id}/testRuns/active", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestRunsActiveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get active Project TestRuns &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicTestRunModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicTestRunModel>> ApiV2ProjectsIdTestRunsActiveGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<PublicTestRunModel>> localVarResponse = await ApiV2ProjectsIdTestRunsActiveGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active Project TestRuns &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicTestRunModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<PublicTestRunModel>>> ApiV2ProjectsIdTestRunsActiveGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestRunsActiveGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PublicTestRunModel>>("/api/v2/projects/{id}/testRuns/active", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestRunsActiveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project TestRuns full models &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestRunModel&gt;</returns>
        public List<TestRunModel> ApiV2ProjectsIdTestRunsFullGet(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunModel>> localVarResponse = ApiV2ProjectsIdTestRunsFullGetWithHttpInfo(id, includeTestResults, mustAggregateTestResults, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project TestRuns full models &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestRunModel>> ApiV2ProjectsIdTestRunsFullGetWithHttpInfo(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestRunsFullGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeTestResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeTestResults", includeTestResults));
            }
            if (mustAggregateTestResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustAggregateTestResults", mustAggregateTestResults));
            }
            if (notStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "notStarted", notStarted));
            }
            if (inProgress != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "inProgress", inProgress));
            }
            if (stopped != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "stopped", stopped));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (createdDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateFrom", createdDateFrom));
            }
            if (createdDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateTo", createdDateTo));
            }
            if (testPlanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "testPlanId", testPlanId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestRunModel>>("/api/v2/projects/{id}/testRuns/full", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestRunsFullGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project TestRuns full models &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestRunModel>> ApiV2ProjectsIdTestRunsFullGetAsync(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunModel>> localVarResponse = await ApiV2ProjectsIdTestRunsFullGetWithHttpInfoAsync(id, includeTestResults, mustAggregateTestResults, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project TestRuns full models &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeTestResults"> (optional, default to false)</param>
        /// <param name="mustAggregateTestResults"> (optional, default to true)</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestRunModel>>> ApiV2ProjectsIdTestRunsFullGetWithHttpInfoAsync(string id, bool? includeTestResults = default(bool?), bool? mustAggregateTestResults = default(bool?), bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdTestRunsFullGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeTestResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeTestResults", includeTestResults));
            }
            if (mustAggregateTestResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "mustAggregateTestResults", mustAggregateTestResults));
            }
            if (notStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "notStarted", notStarted));
            }
            if (inProgress != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "inProgress", inProgress));
            }
            if (stopped != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "stopped", stopped));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (createdDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateFrom", createdDateFrom));
            }
            if (createdDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateTo", createdDateTo));
            }
            if (testPlanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "testPlanId", testPlanId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestRunModel>>("/api/v2/projects/{id}/testRuns/full", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdTestRunsFullGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for work items and extract IDs only 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> ApiV2ProjectsIdWorkItemsSearchIdPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            TestIt.Client.Client.ApiResponse<List<Guid>> localVarResponse = ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, workItemSelectModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for work items and extract IDs only 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<Guid>> ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdWorkItemsSearchIdPost");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Guid>>("/api/v2/projects/{id}/workItems/search/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsSearchIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for work items and extract IDs only 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> ApiV2ProjectsIdWorkItemsSearchIdPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<Guid>> localVarResponse = await ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, workItemSelectModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for work items and extract IDs only 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<Guid>>> ApiV2ProjectsIdWorkItemsSearchIdPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdWorkItemsSearchIdPost");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Guid>>("/api/v2/projects/{id}/workItems/search/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsSearchIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for work items 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        public List<WorkItemShortModel> ApiV2ProjectsIdWorkItemsSearchPost(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, workItemSelectModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for work items 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdWorkItemsSearchPost");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkItemShortModel>>("/api/v2/projects/{id}/workItems/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for work items 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkItemShortModel>> ApiV2ProjectsIdWorkItemsSearchPostAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = await ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, workItemSelectModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for work items 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global ID of the project</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="workItemSelectModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>>> ApiV2ProjectsIdWorkItemsSearchPostWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ApiV2ProjectsIdWorkItemsSearchPost");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkItemShortModel>>("/api/v2/projects/{id}/workItems/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkItems Tags &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;TagShortModel&gt;</returns>
        public List<TagShortModel> ApiV2ProjectsIdWorkItemsTagsGet(Guid id, bool? isDeleted = default(bool?))
        {
            TestIt.Client.Client.ApiResponse<List<TagShortModel>> localVarResponse = ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfo(id, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkItems Tags &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TagShortModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TagShortModel>> ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TagShortModel>>("/api/v2/projects/{id}/workItems/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsTagsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get WorkItems Tags &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TagShortModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TagShortModel>> ApiV2ProjectsIdWorkItemsTagsGetAsync(Guid id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TagShortModel>> localVarResponse = await ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfoAsync(id, isDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get WorkItems Tags &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TagShortModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TagShortModel>>> ApiV2ProjectsIdWorkItemsTagsGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TagShortModel>>("/api/v2/projects/{id}/workItems/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsIdWorkItemsTagsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        public bool ApiV2ProjectsNameNameExistsGet(string name)
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = ApiV2ProjectsNameNameExistsGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        public TestIt.Client.Client.ApiResponse<bool> ApiV2ProjectsNameNameExistsGetWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->ApiV2ProjectsNameNameExistsGet");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/projects/name/{name}/exists", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsNameNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2ProjectsNameNameExistsGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = await ApiV2ProjectsNameNameExistsGetWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<bool>> ApiV2ProjectsNameNameExistsGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->ApiV2ProjectsNameNameExistsGet");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/projects/name/{name}/exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsNameNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for projects 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <returns>List&lt;ProjectModel&gt;</returns>
        public List<ProjectModel> ApiV2ProjectsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectModel>> localVarResponse = ApiV2ProjectsSearchPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, projectsFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for projects 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<ProjectModel>> ApiV2ProjectsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectsFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProjectModel>>("/api/v2/projects/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for projects 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectModel>> ApiV2ProjectsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectModel>> localVarResponse = await ApiV2ProjectsSearchPostWithHttpInfoAsync(skip, take, orderBy, searchField, searchValue, projectsFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for projects 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectsFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<ProjectModel>>> ApiV2ProjectsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectsFilterModel projectsFilterModel = default(ProjectsFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectsFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProjectModel>>("/api/v2/projects/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ProjectsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attributes to project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void CreateCustomAttributeTestPlanProjectRelations(string id, List<Guid> requestBody = default(List<Guid>))
        {
            CreateCustomAttributeTestPlanProjectRelationsWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// Add attributes to project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> CreateCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, List<Guid> requestBody = default(List<Guid>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->CreateCustomAttributeTestPlanProjectRelations");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/{id}/testPlans/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add attributes to project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCustomAttributeTestPlanProjectRelationsAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(id, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add attributes to project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> CreateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->CreateCustomAttributeTestPlanProjectRelations");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/{id}/testPlans/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <returns>ProjectModel</returns>
        public ProjectModel CreateProject(ProjectPostModel projectPostModel = default(ProjectPostModel))
        {
            TestIt.Client.Client.ApiResponse<ProjectModel> localVarResponse = CreateProjectWithHttpInfo(projectPostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <returns>ApiResponse of ProjectModel</returns>
        public TestIt.Client.Client.ApiResponse<ProjectModel> CreateProjectWithHttpInfo(ProjectPostModel projectPostModel = default(ProjectPostModel))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectPostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProjectModel>("/api/v2/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectModel</returns>
        public async System.Threading.Tasks.Task<ProjectModel> CreateProjectAsync(ProjectPostModel projectPostModel = default(ProjectPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<ProjectModel> localVarResponse = await CreateProjectWithHttpInfoAsync(projectPostModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<ProjectModel>> CreateProjectWithHttpInfoAsync(ProjectPostModel projectPostModel = default(ProjectPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectPostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProjectModel>("/api/v2/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project attribute &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>CustomAttributeModel</returns>
        public CustomAttributeModel CreateProjectsAttribute(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel))
        {
            TestIt.Client.Client.ApiResponse<CustomAttributeModel> localVarResponse = CreateProjectsAttributeWithHttpInfo(id, customAttributePostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project attribute &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        public TestIt.Client.Client.ApiResponse<CustomAttributeModel> CreateProjectsAttributeWithHttpInfo(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->CreateProjectsAttribute");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributePostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomAttributeModel>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project attribute &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        public async System.Threading.Tasks.Task<CustomAttributeModel> CreateProjectsAttributeAsync(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<CustomAttributeModel> localVarResponse = await CreateProjectsAttributeWithHttpInfoAsync(id, customAttributePostModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project attribute &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<CustomAttributeModel>> CreateProjectsAttributeWithHttpInfoAsync(string id, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->CreateProjectsAttribute");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributePostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomAttributeModel>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete attribute from project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <returns></returns>
        public void DeleteCustomAttributeTestPlanProjectRelations(string id, Guid attributeId)
        {
            DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfo(id, attributeId);
        }

        /// <summary>
        /// Delete attribute from project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, Guid attributeId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteCustomAttributeTestPlanProjectRelations");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{id}/testPlans/attribute/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete attribute from project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomAttributeTestPlanProjectRelationsAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(id, attributeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete attribute from project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> DeleteCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteCustomAttributeTestPlanProjectRelations");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{id}/testPlans/attribute/{attributeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        public void DeleteProject(string id)
        {
            DeleteProjectWithHttpInfo(id);
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> DeleteProjectWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case:  &lt;br&gt;1. User sets project internal or global identifier and runs method execution  &lt;br&gt;2. System searches and moves requested project to archive  &lt;br&gt;3. System responds with no content (204) result
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> DeleteProjectWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        public void DeleteProjectAutoTests(string id)
        {
            DeleteProjectAutoTestsWithHttpInfo(id);
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> DeleteProjectAutoTestsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProjectAutoTests");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{id}/autoTests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectAutoTests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAutoTestsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectAutoTestsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> DeleteProjectAutoTestsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProjectAutoTests");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{id}/autoTests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectAutoTests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns></returns>
        public void DeleteProjectsAttribute(string id, Guid attributeId)
        {
            DeleteProjectsAttributeWithHttpInfo(id, attributeId);
        }

        /// <summary>
        /// Delete project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> DeleteProjectsAttributeWithHttpInfo(string id, Guid attributeId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProjectsAttribute");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{id}/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectsAttributeAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectsAttributeWithHttpInfoAsync(id, attributeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> DeleteProjectsAttributeWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->DeleteProjectsAttribute");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{id}/attributes/{attributeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter Export(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel))
        {
            TestIt.Client.Client.ApiResponse<FileParameter> localVarResponse = ExportWithHttpInfo(id, includeAttachments, projectExportQueryModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public TestIt.Client.Client.ApiResponse<FileParameter> ExportWithHttpInfo(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->Export");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = projectExportQueryModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileParameter>("/api/v2/projects/{id}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> ExportAsync(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<FileParameter> localVarResponse = await ExportWithHttpInfoAsync(id, includeAttachments, projectExportQueryModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportQueryModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<FileParameter>> ExportWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), ProjectExportQueryModel projectExportQueryModel = default(ProjectExportQueryModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->Export");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = projectExportQueryModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileParameter>("/api/v2/projects/{id}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter ExportWithTestPlansAndConfigurations(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel))
        {
            TestIt.Client.Client.ApiResponse<FileParameter> localVarResponse = ExportWithTestPlansAndConfigurationsWithHttpInfo(id, includeAttachments, projectExportWithTestPlansPostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public TestIt.Client.Client.ApiResponse<FileParameter> ExportWithTestPlansAndConfigurationsWithHttpInfo(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ExportWithTestPlansAndConfigurations");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = projectExportWithTestPlansPostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileParameter>("/api/v2/projects/{id}/export-by-testPlans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportWithTestPlansAndConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> ExportWithTestPlansAndConfigurationsAsync(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<FileParameter> localVarResponse = await ExportWithTestPlansAndConfigurationsWithHttpInfoAsync(id, includeAttachments, projectExportWithTestPlansPostModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project with test plans, test suites and test points as JSON file &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="projectExportWithTestPlansPostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<FileParameter>> ExportWithTestPlansAndConfigurationsWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = default(ProjectExportWithTestPlansPostModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ExportWithTestPlansAndConfigurations");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = projectExportWithTestPlansPostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileParameter>("/api/v2/projects/{id}/export-by-testPlans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportWithTestPlansAndConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all projects &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        public List<ProjectModel> GetAllProjects(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectModel>> localVarResponse = GetAllProjectsWithHttpInfo(isDeleted, projectName, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all projects &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        public TestIt.Client.Client.ApiResponse<List<ProjectModel>> GetAllProjectsWithHttpInfo(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (projectName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "projectName", projectName));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProjectModel>>("/api/v2/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all projects &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProjectModel&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ProjectModel>> GetAllProjectsAsync(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<ProjectModel>> localVarResponse = await GetAllProjectsWithHttpInfoAsync(isDeleted, projectName, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all projects &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="projectName"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectModel&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<ProjectModel>>> GetAllProjectsWithHttpInfoAsync(bool? isDeleted = default(bool?), string projectName = default(string), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (projectName != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "projectName", projectName));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProjectModel>>("/api/v2/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>CustomAttributeModel</returns>
        public CustomAttributeModel GetAttributeByProjectId(string id, Guid attributeId)
        {
            TestIt.Client.Client.ApiResponse<CustomAttributeModel> localVarResponse = GetAttributeByProjectIdWithHttpInfo(id, attributeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        public TestIt.Client.Client.ApiResponse<CustomAttributeModel> GetAttributeByProjectIdWithHttpInfo(string id, Guid attributeId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAttributeByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomAttributeModel>("/api/v2/projects/{id}/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        public async System.Threading.Tasks.Task<CustomAttributeModel> GetAttributeByProjectIdAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<CustomAttributeModel> localVarResponse = await GetAttributeByProjectIdWithHttpInfoAsync(id, attributeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attribute &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<CustomAttributeModel>> GetAttributeByProjectIdWithHttpInfoAsync(string id, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAttributeByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIt.Client.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomAttributeModel>("/api/v2/projects/{id}/attributes/{attributeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attributes &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        public List<CustomAttributeModel> GetAttributesByProjectId(string id, bool? isDeleted = default(bool?))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = GetAttributesByProjectIdWithHttpInfo(id, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attributes &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> GetAttributesByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAttributesByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CustomAttributeModel>>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributesByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attributes &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeModel>> GetAttributesByProjectIdAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = await GetAttributesByProjectIdWithHttpInfoAsync(id, isDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attributes &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>>> GetAttributesByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAttributesByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomAttributeModel>>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributesByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespaces of autotests in project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;AutoTestNamespaceModel&gt;</returns>
        public List<AutoTestNamespaceModel> GetAutoTestsNamespaces(string id)
        {
            TestIt.Client.Client.ApiResponse<List<AutoTestNamespaceModel>> localVarResponse = GetAutoTestsNamespacesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespaces of autotests in project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;AutoTestNamespaceModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<AutoTestNamespaceModel>> GetAutoTestsNamespacesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAutoTestsNamespaces");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AutoTestNamespaceModel>>("/api/v2/projects/{id}/autoTestsNamespaces", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoTestsNamespaces", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespaces of autotests in project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutoTestNamespaceModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutoTestNamespaceModel>> GetAutoTestsNamespacesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<AutoTestNamespaceModel>> localVarResponse = await GetAutoTestsNamespacesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespaces of autotests in project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutoTestNamespaceModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<AutoTestNamespaceModel>>> GetAutoTestsNamespacesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetAutoTestsNamespaces");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AutoTestNamespaceModel>>("/api/v2/projects/{id}/autoTestsNamespaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoTestsNamespaces", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project configurations &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;ConfigurationModel&gt;</returns>
        public List<ConfigurationModel> GetConfigurationsByProjectId(string id)
        {
            TestIt.Client.Client.ApiResponse<List<ConfigurationModel>> localVarResponse = GetConfigurationsByProjectIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project configurations &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;ConfigurationModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<ConfigurationModel>> GetConfigurationsByProjectIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetConfigurationsByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConfigurationModel>>("/api/v2/projects/{id}/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project configurations &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConfigurationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConfigurationModel>> GetConfigurationsByProjectIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<ConfigurationModel>> localVarResponse = await GetConfigurationsByProjectIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project configurations &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConfigurationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<ConfigurationModel>>> GetConfigurationsByProjectIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetConfigurationsByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConfigurationModel>>("/api/v2/projects/{id}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project&#39;s test plan attributes &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        public List<CustomAttributeModel> GetCustomAttributeTestPlanProjectRelations(string id)
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = GetCustomAttributeTestPlanProjectRelationsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project&#39;s test plan attributes &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> GetCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetCustomAttributeTestPlanProjectRelations");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CustomAttributeModel>>("/api/v2/projects/{id}/testPlans/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project&#39;s test plan attributes &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeModel>> GetCustomAttributeTestPlanProjectRelationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = await GetCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project&#39;s test plan attributes &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<CustomAttributeModel>>> GetCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetCustomAttributeTestPlanProjectRelations");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomAttributeModel>>("/api/v2/projects/{id}/testPlans/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project by ID &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ProjectModel</returns>
        public ProjectModel GetProjectById(string id)
        {
            TestIt.Client.Client.ApiResponse<ProjectModel> localVarResponse = GetProjectByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project by ID &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of ProjectModel</returns>
        public TestIt.Client.Client.ApiResponse<ProjectModel> GetProjectByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetProjectById");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProjectModel>("/api/v2/projects/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project by ID &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectModel</returns>
        public async System.Threading.Tasks.Task<ProjectModel> GetProjectByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<ProjectModel> localVarResponse = await GetProjectByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project by ID &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<ProjectModel>> GetProjectByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetProjectById");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProjectModel>("/api/v2/projects/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project sections &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;SectionModel&gt;</returns>
        public List<SectionModel> GetSectionsByProjectId(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<SectionModel>> localVarResponse = GetSectionsByProjectIdWithHttpInfo(id, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project sections &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;SectionModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<SectionModel>> GetSectionsByProjectIdWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetSectionsByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SectionModel>>("/api/v2/projects/{id}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project sections &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SectionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SectionModel>> GetSectionsByProjectIdAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<SectionModel>> localVarResponse = await GetSectionsByProjectIdWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project sections &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SectionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<SectionModel>>> GetSectionsByProjectIdWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetSectionsByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SectionModel>>("/api/v2/projects/{id}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <returns>List&lt;TestPlanModel&gt;</returns>
        public List<TestPlanModel> GetTestPlansByProjectId(string id, bool? isDeleted = default(bool?))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanModel>> localVarResponse = GetTestPlansByProjectIdWithHttpInfo(id, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <returns>ApiResponse of List&lt;TestPlanModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestPlanModel>> GetTestPlansByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetTestPlansByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestPlanModel>>("/api/v2/projects/{id}/testPlans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestPlansByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPlanModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestPlanModel>> GetTestPlansByProjectIdAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestPlanModel>> localVarResponse = await GetTestPlansByProjectIdWithHttpInfoAsync(id, isDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/archived test plans (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPlanModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestPlanModel>>> GetTestPlansByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetTestPlansByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestPlanModel>>("/api/v2/projects/{id}/testPlans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestPlansByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project test runs &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;TestRunV2GetModel&gt;</returns>
        public List<TestRunV2GetModel> GetTestRunsByProjectId(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunV2GetModel>> localVarResponse = GetTestRunsByProjectIdWithHttpInfo(id, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project test runs &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunV2GetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestRunV2GetModel>> GetTestRunsByProjectIdWithHttpInfo(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetTestRunsByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (notStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "notStarted", notStarted));
            }
            if (inProgress != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "inProgress", inProgress));
            }
            if (stopped != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "stopped", stopped));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (createdDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateFrom", createdDateFrom));
            }
            if (createdDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateTo", createdDateTo));
            }
            if (testPlanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "testPlanId", testPlanId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestRunV2GetModel>>("/api/v2/projects/{id}/testRuns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestRunsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project test runs &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunV2GetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestRunV2GetModel>> GetTestRunsByProjectIdAsync(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunV2GetModel>> localVarResponse = await GetTestRunsByProjectIdWithHttpInfoAsync(id, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project test runs &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="notStarted"> (optional)</param>
        /// <param name="inProgress"> (optional)</param>
        /// <param name="stopped"> (optional)</param>
        /// <param name="completed"> (optional)</param>
        /// <param name="createdDateFrom"> (optional)</param>
        /// <param name="createdDateTo"> (optional)</param>
        /// <param name="testPlanId"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunV2GetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestRunV2GetModel>>> GetTestRunsByProjectIdWithHttpInfoAsync(string id, bool? notStarted = default(bool?), bool? inProgress = default(bool?), bool? stopped = default(bool?), bool? completed = default(bool?), DateTime? createdDateFrom = default(DateTime?), DateTime? createdDateTo = default(DateTime?), Guid? testPlanId = default(Guid?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetTestRunsByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (notStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "notStarted", notStarted));
            }
            if (inProgress != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "inProgress", inProgress));
            }
            if (stopped != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "stopped", stopped));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (createdDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateFrom", createdDateFrom));
            }
            if (createdDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "createdDateTo", createdDateTo));
            }
            if (testPlanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "testPlanId", testPlanId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestRunV2GetModel>>("/api/v2/projects/{id}/testRuns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestRunsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project work items &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        public List<WorkItemShortModel> GetWorkItemsByProjectId(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = GetWorkItemsByProjectIdWithHttpInfo(id, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project work items &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> GetWorkItemsByProjectIdWithHttpInfo(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetWorkItemsByProjectId");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (tagNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tagNames", tagNames));
            }
            if (includeIterations != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeIterations", includeIterations));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkItemShortModel>>("/api/v2/projects/{id}/workItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkItemsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project work items &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkItemShortModel>> GetWorkItemsByProjectIdAsync(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = await GetWorkItemsByProjectIdWithHttpInfoAsync(id, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project work items &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted">If result must consist of only actual/deleted work items (optional, default to false)</param>
        /// <param name="tagNames">List of tags to filter by (optional)</param>
        /// <param name="includeIterations"> (optional, default to true)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<WorkItemShortModel>>> GetWorkItemsByProjectIdWithHttpInfoAsync(string id, bool? isDeleted = default(bool?), List<string> tagNames = default(List<string>), bool? includeIterations = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetWorkItemsByProjectId");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (tagNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tagNames", tagNames));
            }
            if (includeIterations != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeIterations", includeIterations));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkItemShortModel>>("/api/v2/projects/{id}/workItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkItemsByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import project from JSON file &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns></returns>
        public void Import(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter))
        {
            ImportWithHttpInfo(includeAttachments, file);
        }

        /// <summary>
        /// Import project from JSON file &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ImportWithHttpInfo(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Import", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import project from JSON file &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportAsync(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ImportWithHttpInfoAsync(includeAttachments, file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Import project from JSON file &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAttachments">Enables attachment import. (optional, default to false)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ImportWithHttpInfoAsync(bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Import", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import project from JSON file into existing project &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns></returns>
        public void ImportToExistingProject(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter))
        {
            ImportToExistingProjectWithHttpInfo(id, includeAttachments, file);
        }

        /// <summary>
        /// Import project from JSON file into existing project &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ImportToExistingProjectWithHttpInfo(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ImportToExistingProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/{id}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportToExistingProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import project from JSON file into existing project &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportToExistingProjectAsync(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ImportToExistingProjectWithHttpInfoAsync(id, includeAttachments, file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Import project from JSON file into existing project &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="includeAttachments"> (optional)</param>
        /// <param name="file">Select file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ImportToExistingProjectWithHttpInfoAsync(string id, bool? includeAttachments = default(bool?), FileParameter file = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->ImportToExistingProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/{id}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportToExistingProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns></returns>
        public void RestoreProject(string id)
        {
            RestoreProjectWithHttpInfo(id);
        }

        /// <summary>
        /// Restore project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> RestoreProjectWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->RestoreProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/projects/{id}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreProjectAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RestoreProjectWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Restore project &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> RestoreProjectWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->RestoreProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/projects/{id}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        public List<CustomAttributeGetModel> SearchAttributesInProject(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = SearchAttributesInProjectWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> SearchAttributesInProjectWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->SearchAttributesInProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CustomAttributeGetModel>>("/api/v2/projects/{id}/attributes/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchAttributesInProjectAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = await SearchAttributesInProjectWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>>> SearchAttributesInProjectWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->SearchAttributesInProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CustomAttributeGetModel>>("/api/v2/projects/{id}/attributes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project test plans 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        public List<CustomAttributeGetModel> SearchTestPlanAttributesInProject(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = SearchTestPlanAttributesInProjectWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project test plans 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> SearchTestPlanAttributesInProjectWithHttpInfo(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->SearchTestPlanAttributesInProject");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CustomAttributeGetModel>>("/api/v2/projects/{id}/testPlans/attributes/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTestPlanAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project test plans 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchTestPlanAttributesInProjectAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = await SearchTestPlanAttributesInProjectWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project test plans 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<CustomAttributeGetModel>>> SearchTestPlanAttributesInProjectWithHttpInfoAsync(string id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->SearchTestPlanAttributesInProject");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CustomAttributeGetModel>>("/api/v2/projects/{id}/testPlans/attributes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTestPlanAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update attribute of project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <returns></returns>
        public void UpdateCustomAttributeTestPlanProjectRelations(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel))
        {
            UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfo(id, customAttributeTestPlanProjectRelationPutModel);
        }

        /// <summary>
        /// Update attribute of project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfo(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->UpdateCustomAttributeTestPlanProjectRelations");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributeTestPlanProjectRelationPutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/projects/{id}/testPlans/attribute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update attribute of project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCustomAttributeTestPlanProjectRelationsAsync(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(id, customAttributeTestPlanProjectRelationPutModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update attribute of project&#39;s test plans &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributeTestPlanProjectRelationPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> UpdateCustomAttributeTestPlanProjectRelationsWithHttpInfoAsync(string id, CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = default(CustomAttributeTestPlanProjectRelationPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->UpdateCustomAttributeTestPlanProjectRelations");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributeTestPlanProjectRelationPutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/projects/{id}/testPlans/attribute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomAttributeTestPlanProjectRelations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <returns></returns>
        public void UpdateProject(ProjectPutModel projectPutModel = default(ProjectPutModel))
        {
            UpdateProjectWithHttpInfo(projectPutModel);
        }

        /// <summary>
        /// Update project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> UpdateProjectWithHttpInfo(ProjectPutModel projectPutModel = default(ProjectPutModel))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectPutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectAsync(ProjectPutModel projectPutModel = default(ProjectPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProjectWithHttpInfoAsync(projectPutModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update project &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> UpdateProjectWithHttpInfoAsync(ProjectPutModel projectPutModel = default(ProjectPutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectPutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns></returns>
        public void UpdateProjectsAttribute(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel))
        {
            UpdateProjectsAttributeWithHttpInfo(id, customAttributePutModel);
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> UpdateProjectsAttributeWithHttpInfo(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->UpdateProjectsAttribute");

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributePutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectsAttributeAsync(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProjectsAttributeWithHttpInfoAsync(id, customAttributePutModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> UpdateProjectsAttributeWithHttpInfoAsync(string id, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->UpdateProjectsAttribute");


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customAttributePutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/projects/{id}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
