/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIt.Client.Client;
using TestIt.Client.Model;

namespace TestIt.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for the test run test results and build statistics
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <returns>TestResultsStatisticsGetModel</returns>
        TestResultsStatisticsGetModel ApiV2TestRunsIdStatisticsFilterPost(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest));

        /// <summary>
        /// Search for the test run test results and build statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <returns>ApiResponse of TestResultsStatisticsGetModel</returns>
        ApiResponse<TestResultsStatisticsGetModel> ApiV2TestRunsIdStatisticsFilterPostWithHttpInfo(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest));
        /// <summary>
        /// Get test results from the test run grouped by test points
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>List&lt;TestPointResultModel&gt;</returns>
        List<TestPointResultModel> ApiV2TestRunsIdTestPointsResultsGet(Guid id);

        /// <summary>
        /// Get test results from the test run grouped by test points
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>ApiResponse of List&lt;TestPointResultModel&gt;</returns>
        ApiResponse<List<TestPointResultModel>> ApiV2TestRunsIdTestPointsResultsGetWithHttpInfo(Guid id);
        /// <summary>
        /// Partial edit of multiple test results in the test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <returns></returns>
        void ApiV2TestRunsIdTestResultsBulkPut(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest));

        /// <summary>
        /// Partial edit of multiple test results in the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestRunsIdTestResultsBulkPutWithHttpInfo(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest));
        /// <summary>
        /// Get modification date of last test result of the test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>DateTime</returns>
        DateTime ApiV2TestRunsIdTestResultsLastModifiedModificationDateGet(Guid id);

        /// <summary>
        /// Get modification date of last test result of the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>ApiResponse of DateTime</returns>
        ApiResponse<DateTime> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfo(Guid id);
        /// <summary>
        /// Search for test runs
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <returns>List&lt;TestRunShortGetModel&gt;</returns>
        List<TestRunShortGetModel> ApiV2TestRunsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest));

        /// <summary>
        /// Search for test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunShortGetModel&gt;</returns>
        ApiResponse<List<TestRunShortGetModel>> ApiV2TestRunsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest));
        /// <summary>
        /// Update multiple test runs
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <returns></returns>
        void ApiV2TestRunsUpdateMultiplePost(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest));

        /// <summary>
        /// Update multiple test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestRunsUpdateMultiplePostWithHttpInfo(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest));
        /// <summary>
        /// Complete TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        void CompleteTestRun(Guid id);

        /// <summary>
        /// Complete TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteTestRunWithHttpInfo(Guid id);
        /// <summary>
        /// Create test runs based on autotests and configurations
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        TestRunV2GetModel CreateAndFillByAutoTests(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest));

        /// <summary>
        /// Create test runs based on autotests and configurations
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        ApiResponse<TestRunV2GetModel> CreateAndFillByAutoTestsWithHttpInfo(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest));
        /// <summary>
        /// Create test runs picking the needed test points
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        TestRunV2GetModel CreateAndFillByConfigurations(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest));

        /// <summary>
        /// Create test runs picking the needed test points
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        ApiResponse<TestRunV2GetModel> CreateAndFillByConfigurationsWithHttpInfo(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest));
        /// <summary>
        /// Create test run based on configurations and work items
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        TestRunV2GetModel CreateAndFillByWorkItems(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest));

        /// <summary>
        /// Create test run based on configurations and work items
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        ApiResponse<TestRunV2GetModel> CreateAndFillByWorkItemsWithHttpInfo(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest));
        /// <summary>
        /// Create empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        TestRunV2GetModel CreateEmpty(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest));

        /// <summary>
        /// Create empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        ApiResponse<TestRunV2GetModel> CreateEmptyWithHttpInfo(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest));
        /// <summary>
        /// Get TestRun by Id
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>TestRunV2GetModel</returns>
        TestRunV2GetModel GetTestRunById(Guid id);

        /// <summary>
        /// Get TestRun by Id
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        ApiResponse<TestRunV2GetModel> GetTestRunByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Send test results to the test runs in the system
        /// </summary>
        /// <remarks>
        /// This method sends test results to the test management system.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> SetAutoTestResultsForTestRun(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>));

        /// <summary>
        /// Send test results to the test runs in the system
        /// </summary>
        /// <remarks>
        /// This method sends test results to the test management system.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> SetAutoTestResultsForTestRunWithHttpInfo(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>));
        /// <summary>
        /// Start TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        void StartTestRun(Guid id);

        /// <summary>
        /// Start TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartTestRunWithHttpInfo(Guid id);
        /// <summary>
        /// Stop TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        void StopTestRun(Guid id);

        /// <summary>
        /// Stop TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopTestRunWithHttpInfo(Guid id);
        /// <summary>
        /// Update empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <returns></returns>
        void UpdateEmpty(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest));

        /// <summary>
        /// Update empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateEmptyWithHttpInfo(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search for the test run test results and build statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestResultsStatisticsGetModel</returns>
        System.Threading.Tasks.Task<TestResultsStatisticsGetModel> ApiV2TestRunsIdStatisticsFilterPostAsync(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for the test run test results and build statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestResultsStatisticsGetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestResultsStatisticsGetModel>> ApiV2TestRunsIdStatisticsFilterPostWithHttpInfoAsync(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get test results from the test run grouped by test points
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPointResultModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestPointResultModel>> ApiV2TestRunsIdTestPointsResultsGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get test results from the test run grouped by test points
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPointResultModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestPointResultModel>>> ApiV2TestRunsIdTestPointsResultsGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partial edit of multiple test results in the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestRunsIdTestResultsBulkPutAsync(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partial edit of multiple test results in the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestRunsIdTestResultsBulkPutWithHttpInfoAsync(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get modification date of last test result of the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        System.Threading.Tasks.Task<DateTime> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get modification date of last test result of the test run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTime>> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunShortGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestRunShortGetModel>> ApiV2TestRunsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunShortGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestRunShortGetModel>>> ApiV2TestRunsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update multiple test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestRunsUpdateMultiplePostAsync(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update multiple test runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestRunsUpdateMultiplePostWithHttpInfoAsync(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompleteTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompleteTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create test runs based on autotests and configurations
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByAutoTestsAsync(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create test runs based on autotests and configurations
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunV2GetModel>> CreateAndFillByAutoTestsWithHttpInfoAsync(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create test runs picking the needed test points
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByConfigurationsAsync(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create test runs picking the needed test points
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunV2GetModel>> CreateAndFillByConfigurationsWithHttpInfoAsync(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create test run based on configurations and work items
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByWorkItemsAsync(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create test run based on configurations and work items
        /// </summary>
        /// <remarks>
        /// This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunV2GetModel>> CreateAndFillByWorkItemsWithHttpInfoAsync(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        System.Threading.Tasks.Task<TestRunV2GetModel> CreateEmptyAsync(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunV2GetModel>> CreateEmptyWithHttpInfoAsync(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get TestRun by Id
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        System.Threading.Tasks.Task<TestRunV2GetModel> GetTestRunByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get TestRun by Id
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunV2GetModel>> GetTestRunByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send test results to the test runs in the system
        /// </summary>
        /// <remarks>
        /// This method sends test results to the test management system.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> SetAutoTestResultsForTestRunAsync(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send test results to the test runs in the system
        /// </summary>
        /// <remarks>
        /// This method sends test results to the test management system.
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> SetAutoTestResultsForTestRunWithHttpInfoAsync(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateEmptyAsync(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update empty TestRun
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmptyWithHttpInfoAsync(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestRunsApi : ITestRunsApiSync, ITestRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TestRunsApi : IDisposable, ITestRunsApi
    {
        private TestIt.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TestRunsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TestRunsApi(string basePath)
        {
            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                new TestIt.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TestRunsApi(TestIt.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestRunsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestRunsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                new TestIt.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestRunsApi(HttpClient client, TestIt.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TestRunsApi(TestIt.Client.Client.ISynchronousClient client, TestIt.Client.Client.IAsynchronousClient asyncClient, TestIt.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIt.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIt.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIt.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIt.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIt.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search for the test run test results and build statistics 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <returns>TestResultsStatisticsGetModel</returns>
        public TestResultsStatisticsGetModel ApiV2TestRunsIdStatisticsFilterPost(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest))
        {
            TestIt.Client.Client.ApiResponse<TestResultsStatisticsGetModel> localVarResponse = ApiV2TestRunsIdStatisticsFilterPostWithHttpInfo(id, apiV2TestRunsIdStatisticsFilterPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for the test run test results and build statistics 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <returns>ApiResponse of TestResultsStatisticsGetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestResultsStatisticsGetModel> ApiV2TestRunsIdStatisticsFilterPostWithHttpInfo(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV2TestRunsIdStatisticsFilterPostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestResultsStatisticsGetModel>("/api/v2/testRuns/{id}/statistics/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdStatisticsFilterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for the test run test results and build statistics 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestResultsStatisticsGetModel</returns>
        public async System.Threading.Tasks.Task<TestResultsStatisticsGetModel> ApiV2TestRunsIdStatisticsFilterPostAsync(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestResultsStatisticsGetModel> localVarResponse = await ApiV2TestRunsIdStatisticsFilterPostWithHttpInfoAsync(id, apiV2TestRunsIdStatisticsFilterPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for the test run test results and build statistics 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdStatisticsFilterPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestResultsStatisticsGetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestResultsStatisticsGetModel>> ApiV2TestRunsIdStatisticsFilterPostWithHttpInfoAsync(Guid id, ApiV2TestRunsIdStatisticsFilterPostRequest apiV2TestRunsIdStatisticsFilterPostRequest = default(ApiV2TestRunsIdStatisticsFilterPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV2TestRunsIdStatisticsFilterPostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestResultsStatisticsGetModel>("/api/v2/testRuns/{id}/statistics/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdStatisticsFilterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get test results from the test run grouped by test points 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>List&lt;TestPointResultModel&gt;</returns>
        public List<TestPointResultModel> ApiV2TestRunsIdTestPointsResultsGet(Guid id)
        {
            TestIt.Client.Client.ApiResponse<List<TestPointResultModel>> localVarResponse = ApiV2TestRunsIdTestPointsResultsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get test results from the test run grouped by test points 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>ApiResponse of List&lt;TestPointResultModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestPointResultModel>> ApiV2TestRunsIdTestPointsResultsGetWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestPointResultModel>>("/api/v2/testRuns/{id}/testPoints/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestPointsResultsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get test results from the test run grouped by test points 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPointResultModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestPointResultModel>> ApiV2TestRunsIdTestPointsResultsGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestPointResultModel>> localVarResponse = await ApiV2TestRunsIdTestPointsResultsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get test results from the test run grouped by test points 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPointResultModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestPointResultModel>>> ApiV2TestRunsIdTestPointsResultsGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestPointResultModel>>("/api/v2/testRuns/{id}/testPoints/results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestPointsResultsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial edit of multiple test results in the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <returns></returns>
        public void ApiV2TestRunsIdTestResultsBulkPut(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest))
        {
            ApiV2TestRunsIdTestResultsBulkPutWithHttpInfo(id, apiV2TestRunsIdTestResultsBulkPutRequest);
        }

        /// <summary>
        /// Partial edit of multiple test results in the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2TestRunsIdTestResultsBulkPutWithHttpInfo(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV2TestRunsIdTestResultsBulkPutRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/testRuns/{id}/testResults/bulk", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestResultsBulkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial edit of multiple test results in the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestRunsIdTestResultsBulkPutAsync(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2TestRunsIdTestResultsBulkPutWithHttpInfoAsync(id, apiV2TestRunsIdTestResultsBulkPutRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Partial edit of multiple test results in the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="apiV2TestRunsIdTestResultsBulkPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2TestRunsIdTestResultsBulkPutWithHttpInfoAsync(Guid id, ApiV2TestRunsIdTestResultsBulkPutRequest apiV2TestRunsIdTestResultsBulkPutRequest = default(ApiV2TestRunsIdTestResultsBulkPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV2TestRunsIdTestResultsBulkPutRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/testRuns/{id}/testResults/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestResultsBulkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get modification date of last test result of the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>DateTime</returns>
        public DateTime ApiV2TestRunsIdTestResultsLastModifiedModificationDateGet(Guid id)
        {
            TestIt.Client.Client.ApiResponse<DateTime> localVarResponse = ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get modification date of last test result of the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <returns>ApiResponse of DateTime</returns>
        public TestIt.Client.Client.ApiResponse<DateTime> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DateTime>("/api/v2/testRuns/{id}/testResults/lastModified/modificationDate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestResultsLastModifiedModificationDateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get modification date of last test result of the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        public async System.Threading.Tasks.Task<DateTime> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<DateTime> localVarResponse = await ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get modification date of last test result of the test run 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test run unique ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<DateTime>> ApiV2TestRunsIdTestResultsLastModifiedModificationDateGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DateTime>("/api/v2/testRuns/{id}/testResults/lastModified/modificationDate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsIdTestResultsLastModifiedModificationDateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <returns>List&lt;TestRunShortGetModel&gt;</returns>
        public List<TestRunShortGetModel> ApiV2TestRunsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunShortGetModel>> localVarResponse = ApiV2TestRunsSearchPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, apiV2TestRunsSearchPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TestRunShortGetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<TestRunShortGetModel>> ApiV2TestRunsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = apiV2TestRunsSearchPostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TestRunShortGetModel>>("/api/v2/testRuns/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestRunShortGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestRunShortGetModel>> ApiV2TestRunsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<TestRunShortGetModel>> localVarResponse = await ApiV2TestRunsSearchPostWithHttpInfoAsync(skip, take, orderBy, searchField, searchValue, apiV2TestRunsSearchPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="apiV2TestRunsSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestRunShortGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<TestRunShortGetModel>>> ApiV2TestRunsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ApiV2TestRunsSearchPostRequest apiV2TestRunsSearchPostRequest = default(ApiV2TestRunsSearchPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = apiV2TestRunsSearchPostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TestRunShortGetModel>>("/api/v2/testRuns/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <returns></returns>
        public void ApiV2TestRunsUpdateMultiplePost(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest))
        {
            ApiV2TestRunsUpdateMultiplePostWithHttpInfo(apiV2TestRunsUpdateMultiplePostRequest);
        }

        /// <summary>
        /// Update multiple test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2TestRunsUpdateMultiplePostWithHttpInfo(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiV2TestRunsUpdateMultiplePostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testRuns/updateMultiple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsUpdateMultiplePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestRunsUpdateMultiplePostAsync(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2TestRunsUpdateMultiplePostWithHttpInfoAsync(apiV2TestRunsUpdateMultiplePostRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update multiple test runs 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiV2TestRunsUpdateMultiplePostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2TestRunsUpdateMultiplePostWithHttpInfoAsync(ApiV2TestRunsUpdateMultiplePostRequest apiV2TestRunsUpdateMultiplePostRequest = default(ApiV2TestRunsUpdateMultiplePostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiV2TestRunsUpdateMultiplePostRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testRuns/updateMultiple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestRunsUpdateMultiplePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        public void CompleteTestRun(Guid id)
        {
            CompleteTestRunWithHttpInfo(id);
        }

        /// <summary>
        /// Complete TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> CompleteTestRunWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testRuns/{id}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompleteTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CompleteTestRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Complete TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> CompleteTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testRuns/{id}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test runs based on autotests and configurations This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        public TestRunV2GetModel CreateAndFillByAutoTests(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = CreateAndFillByAutoTestsWithHttpInfo(createAndFillByAutoTestsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test runs based on autotests and configurations This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestRunV2GetModel> CreateAndFillByAutoTestsWithHttpInfo(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByAutoTestsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestRunV2GetModel>("/api/v2/testRuns/byAutoTests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByAutoTests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test runs based on autotests and configurations This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByAutoTestsAsync(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = await CreateAndFillByAutoTestsWithHttpInfoAsync(createAndFillByAutoTestsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test runs based on autotests and configurations This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByAutoTestsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestRunV2GetModel>> CreateAndFillByAutoTestsWithHttpInfoAsync(CreateAndFillByAutoTestsRequest createAndFillByAutoTestsRequest = default(CreateAndFillByAutoTestsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByAutoTestsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestRunV2GetModel>("/api/v2/testRuns/byAutoTests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByAutoTests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test runs picking the needed test points This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        public TestRunV2GetModel CreateAndFillByConfigurations(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = CreateAndFillByConfigurationsWithHttpInfo(createAndFillByConfigurationsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test runs picking the needed test points This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestRunV2GetModel> CreateAndFillByConfigurationsWithHttpInfo(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByConfigurationsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestRunV2GetModel>("/api/v2/testRuns/byConfigurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test runs picking the needed test points This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByConfigurationsAsync(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = await CreateAndFillByConfigurationsWithHttpInfoAsync(createAndFillByConfigurationsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test runs picking the needed test points This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByConfigurationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestRunV2GetModel>> CreateAndFillByConfigurationsWithHttpInfoAsync(CreateAndFillByConfigurationsRequest createAndFillByConfigurationsRequest = default(CreateAndFillByConfigurationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByConfigurationsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestRunV2GetModel>("/api/v2/testRuns/byConfigurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test run based on configurations and work items This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        public TestRunV2GetModel CreateAndFillByWorkItems(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = CreateAndFillByWorkItemsWithHttpInfo(createAndFillByWorkItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test run based on configurations and work items This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestRunV2GetModel> CreateAndFillByWorkItemsWithHttpInfo(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByWorkItemsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestRunV2GetModel>("/api/v2/testRuns/byWorkItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByWorkItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test run based on configurations and work items This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestRunV2GetModel> CreateAndFillByWorkItemsAsync(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = await CreateAndFillByWorkItemsWithHttpInfoAsync(createAndFillByWorkItemsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test run based on configurations and work items This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAndFillByWorkItemsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestRunV2GetModel>> CreateAndFillByWorkItemsWithHttpInfoAsync(CreateAndFillByWorkItemsRequest createAndFillByWorkItemsRequest = default(CreateAndFillByWorkItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAndFillByWorkItemsRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestRunV2GetModel>("/api/v2/testRuns/byWorkItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAndFillByWorkItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <returns>TestRunV2GetModel</returns>
        public TestRunV2GetModel CreateEmpty(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = CreateEmptyWithHttpInfo(createEmptyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestRunV2GetModel> CreateEmptyWithHttpInfo(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEmptyRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestRunV2GetModel>("/api/v2/testRuns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmpty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestRunV2GetModel> CreateEmptyAsync(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = await CreateEmptyWithHttpInfoAsync(createEmptyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestRunV2GetModel>> CreateEmptyWithHttpInfoAsync(CreateEmptyRequest createEmptyRequest = default(CreateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEmptyRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestRunV2GetModel>("/api/v2/testRuns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmpty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestRun by Id &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>TestRunV2GetModel</returns>
        public TestRunV2GetModel GetTestRunById(Guid id)
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = GetTestRunByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestRun by Id &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of TestRunV2GetModel</returns>
        public TestIt.Client.Client.ApiResponse<TestRunV2GetModel> GetTestRunByIdWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TestRunV2GetModel>("/api/v2/testRuns/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestRunById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestRun by Id &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestRunV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestRunV2GetModel> GetTestRunByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<TestRunV2GetModel> localVarResponse = await GetTestRunByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestRun by Id &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestRunV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<TestRunV2GetModel>> GetTestRunByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TestRunV2GetModel>("/api/v2/testRuns/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestRunById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send test results to the test runs in the system This method sends test results to the test management system.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> SetAutoTestResultsForTestRun(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>))
        {
            TestIt.Client.Client.ApiResponse<List<Guid>> localVarResponse = SetAutoTestResultsForTestRunWithHttpInfo(id, autoTestResultsForTestRunModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send test results to the test runs in the system This method sends test results to the test management system.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<Guid>> SetAutoTestResultsForTestRunWithHttpInfo(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = autoTestResultsForTestRunModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Guid>>("/api/v2/testRuns/{id}/testResults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoTestResultsForTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send test results to the test runs in the system This method sends test results to the test management system.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> SetAutoTestResultsForTestRunAsync(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<Guid>> localVarResponse = await SetAutoTestResultsForTestRunWithHttpInfoAsync(id, autoTestResultsForTestRunModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send test results to the test runs in the system This method sends test results to the test management system.
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="autoTestResultsForTestRunModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<Guid>>> SetAutoTestResultsForTestRunWithHttpInfoAsync(Guid id, List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = default(List<AutoTestResultsForTestRunModel>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = autoTestResultsForTestRunModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Guid>>("/api/v2/testRuns/{id}/testResults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoTestResultsForTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        public void StartTestRun(Guid id)
        {
            StartTestRunWithHttpInfo(id);
        }

        /// <summary>
        /// Start TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> StartTestRunWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testRuns/{id}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StartTestRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> StartTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testRuns/{id}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns></returns>
        public void StopTestRun(Guid id)
        {
            StopTestRunWithHttpInfo(id);
        }

        /// <summary>
        /// Stop TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> StopTestRunWithHttpInfo(Guid id)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testRuns/{id}/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopTestRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StopTestRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stop TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Run internal identifier (GUID format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> StopTestRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testRuns/{id}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTestRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <returns></returns>
        public void UpdateEmpty(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest))
        {
            UpdateEmptyWithHttpInfo(updateEmptyRequest);
        }

        /// <summary>
        /// Update empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> UpdateEmptyWithHttpInfo(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest))
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateEmptyRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/testRuns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmpty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateEmptyAsync(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateEmptyWithHttpInfoAsync(updateEmptyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update empty TestRun &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmptyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> UpdateEmptyWithHttpInfoAsync(UpdateEmptyRequest updateEmptyRequest = default(UpdateEmptyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateEmptyRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/testRuns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmpty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
