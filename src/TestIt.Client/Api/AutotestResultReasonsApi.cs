/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TestIt.Client.Client;
using TestIt.Client.Model;

namespace TestIt.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutotestResultReasonsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoContentResult</returns>
        NoContentResult ApiV2AutotestsResultReasonsIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoContentResult</returns>
        ApiResponse<NoContentResult> ApiV2AutotestsResultReasonsIdDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get FailureClass by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FailureClassModel</returns>
        FailureClassModel ApiV2AutotestsResultReasonsIdGet(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get FailureClass by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FailureClassModel</returns>
        ApiResponse<FailureClassModel> ApiV2AutotestsResultReasonsIdGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiV2AutotestsResultReasonsNameNameExistsGet(string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Create FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FailureClassModel</returns>
        FailureClassModel ApiV2AutotestsResultReasonsPost(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0);

        /// <summary>
        /// Create FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FailureClassModel</returns>
        ApiResponse<FailureClassModel> ApiV2AutotestsResultReasonsPostWithHttpInfo(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0);
        /// <summary>
        /// Update FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV2AutotestsResultReasonsPut(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0);

        /// <summary>
        /// Update FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2AutotestsResultReasonsPutWithHttpInfo(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        List<AutotestResultReasonShortGetModel> ApiV2AutotestsResultReasonsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        ApiResponse<List<AutotestResultReasonShortGetModel>> ApiV2AutotestsResultReasonsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutotestResultReasonsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoContentResult</returns>
        System.Threading.Tasks.Task<NoContentResult> ApiV2AutotestsResultReasonsIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoContentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<NoContentResult>> ApiV2AutotestsResultReasonsIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get FailureClass by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FailureClassModel</returns>
        System.Threading.Tasks.Task<FailureClassModel> ApiV2AutotestsResultReasonsIdGetAsync(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get FailureClass by ID
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FailureClassModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FailureClassModel>> ApiV2AutotestsResultReasonsIdGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2AutotestsResultReasonsNameNameExistsGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FailureClassModel</returns>
        System.Threading.Tasks.Task<FailureClassModel> ApiV2AutotestsResultReasonsPostAsync(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FailureClassModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FailureClassModel>> ApiV2AutotestsResultReasonsPostWithHttpInfoAsync(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2AutotestsResultReasonsPutAsync(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update FailureClass
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2AutotestsResultReasonsPutWithHttpInfoAsync(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<AutotestResultReasonShortGetModel>> ApiV2AutotestsResultReasonsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutotestResultReasonShortGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutotestResultReasonShortGetModel>>> ApiV2AutotestsResultReasonsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutotestResultReasonsApi : IAutotestResultReasonsApiSync, IAutotestResultReasonsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutotestResultReasonsApi : IAutotestResultReasonsApi
    {
        private TestIt.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutotestResultReasonsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutotestResultReasonsApi(string basePath)
        {
            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                new TestIt.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutotestResultReasonsApi(TestIt.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIt.Client.Client.Configuration.MergeConfigurations(
                TestIt.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TestIt.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AutotestResultReasonsApi(TestIt.Client.Client.ISynchronousClient client, TestIt.Client.Client.IAsynchronousClient asyncClient, TestIt.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIt.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIt.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIt.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIt.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIt.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NoContentResult</returns>
        public NoContentResult ApiV2AutotestsResultReasonsIdDelete(Guid id, int operationIndex = 0)
        {
            TestIt.Client.Client.ApiResponse<NoContentResult> localVarResponse = ApiV2AutotestsResultReasonsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NoContentResult</returns>
        public TestIt.Client.Client.ApiResponse<NoContentResult> ApiV2AutotestsResultReasonsIdDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<NoContentResult>("/api/v2/autotests/resultReasons/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoContentResult</returns>
        public async System.Threading.Tasks.Task<NoContentResult> ApiV2AutotestsResultReasonsIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<NoContentResult> localVarResponse = await ApiV2AutotestsResultReasonsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoContentResult)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<NoContentResult>> ApiV2AutotestsResultReasonsIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<NoContentResult>("/api/v2/autotests/resultReasons/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FailureClass by ID &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FailureClassModel</returns>
        public FailureClassModel ApiV2AutotestsResultReasonsIdGet(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0)
        {
            TestIt.Client.Client.ApiResponse<FailureClassModel> localVarResponse = ApiV2AutotestsResultReasonsIdGetWithHttpInfo(id, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FailureClass by ID &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FailureClassModel</returns>
        public TestIt.Client.Client.ApiResponse<FailureClassModel> ApiV2AutotestsResultReasonsIdGetWithHttpInfo(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FailureClassModel>("/api/v2/autotests/resultReasons/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FailureClass by ID &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FailureClassModel</returns>
        public async System.Threading.Tasks.Task<FailureClassModel> ApiV2AutotestsResultReasonsIdGetAsync(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<FailureClassModel> localVarResponse = await ApiV2AutotestsResultReasonsIdGetWithHttpInfoAsync(id, isDeleted, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FailureClass by ID &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns FailureClasses by ID (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">FailureClass internal (UUID) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FailureClassModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<FailureClassModel>> ApiV2AutotestsResultReasonsIdGetWithHttpInfoAsync(Guid id, bool? isDeleted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", TestIt.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FailureClassModel>("/api/v2/autotests/resultReasons/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiV2AutotestsResultReasonsNameNameExistsGet(string name, int operationIndex = 0)
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public TestIt.Client.Client.ApiResponse<bool> ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling AutotestResultReasonsApi->ApiV2AutotestsResultReasonsNameNameExistsGet");
            }

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsNameNameExistsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/autotests/resultReasons/name/{name}/exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsNameNameExistsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2AutotestsResultReasonsNameNameExistsGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<bool> localVarResponse = await ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<bool>> ApiV2AutotestsResultReasonsNameNameExistsGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TestIt.Client.Client.ApiException(400, "Missing required parameter 'name' when calling AutotestResultReasonsApi->ApiV2AutotestsResultReasonsNameNameExistsGet");
            }


            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", TestIt.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsNameNameExistsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/autotests/resultReasons/name/{name}/exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsNameNameExistsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FailureClassModel</returns>
        public FailureClassModel ApiV2AutotestsResultReasonsPost(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0)
        {
            TestIt.Client.Client.ApiResponse<FailureClassModel> localVarResponse = ApiV2AutotestsResultReasonsPostWithHttpInfo(failureClassPostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FailureClassModel</returns>
        public TestIt.Client.Client.ApiResponse<FailureClassModel> ApiV2AutotestsResultReasonsPostWithHttpInfo(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = failureClassPostModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FailureClassModel>("/api/v2/autotests/resultReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FailureClassModel</returns>
        public async System.Threading.Tasks.Task<FailureClassModel> ApiV2AutotestsResultReasonsPostAsync(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<FailureClassModel> localVarResponse = await ApiV2AutotestsResultReasonsPostWithHttpInfoAsync(failureClassPostModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates and returns FailureClass (listed in response example)
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPostModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FailureClassModel)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<FailureClassModel>> ApiV2AutotestsResultReasonsPostWithHttpInfoAsync(FailureClassPostModel failureClassPostModel = default(FailureClassPostModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = failureClassPostModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FailureClassModel>("/api/v2/autotests/resultReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV2AutotestsResultReasonsPut(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0)
        {
            ApiV2AutotestsResultReasonsPutWithHttpInfo(failureClassPutModel);
        }

        /// <summary>
        /// Update FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIt.Client.Client.ApiResponse<Object> ApiV2AutotestsResultReasonsPutWithHttpInfo(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = failureClassPutModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/autotests/resultReasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2AutotestsResultReasonsPutAsync(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV2AutotestsResultReasonsPutWithHttpInfoAsync(failureClassPutModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update FailureClass &lt;br&gt;Use case  &lt;br&gt;User sets FailureClass internal identifier  &lt;br&gt;User sets FailureClass parameters (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System update FailureClass
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failureClassPutModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<Object>> ApiV2AutotestsResultReasonsPutWithHttpInfoAsync(FailureClassPutModel failureClassPutModel = default(FailureClassPutModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = failureClassPutModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/autotests/resultReasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        public List<AutotestResultReasonShortGetModel> ApiV2AutotestsResultReasonsSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0)
        {
            TestIt.Client.Client.ApiResponse<List<AutotestResultReasonShortGetModel>> localVarResponse = ApiV2AutotestsResultReasonsSearchPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, autotestResultReasonSelectModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        public TestIt.Client.Client.ApiResponse<List<AutotestResultReasonShortGetModel>> ApiV2AutotestsResultReasonsSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0)
        {
            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = autotestResultReasonSelectModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsSearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<AutotestResultReasonShortGetModel>>("/api/v2/autotests/resultReasons/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutotestResultReasonShortGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutotestResultReasonShortGetModel>> ApiV2AutotestsResultReasonsSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.Client.Client.ApiResponse<List<AutotestResultReasonShortGetModel>> localVarResponse = await ApiV2AutotestsResultReasonsSearchPostWithHttpInfoAsync(skip, take, orderBy, searchField, searchValue, autotestResultReasonSelectModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TestIt.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="autotestResultReasonSelectModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutotestResultReasonShortGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIt.Client.Client.ApiResponse<List<AutotestResultReasonShortGetModel>>> ApiV2AutotestsResultReasonsSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), AutotestResultReasonSelectModel autotestResultReasonSelectModel = default(AutotestResultReasonSelectModel), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TestIt.Client.Client.RequestOptions localVarRequestOptions = new TestIt.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TestIt.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = autotestResultReasonSelectModel;

            localVarRequestOptions.Operation = "AutotestResultReasonsApi.ApiV2AutotestsResultReasonsSearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<AutotestResultReasonShortGetModel>>("/api/v2/autotests/resultReasons/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AutotestsResultReasonsSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
