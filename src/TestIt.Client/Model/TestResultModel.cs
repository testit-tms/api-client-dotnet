/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.Client.Client.FileParameter;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// TestResultModel
    /// </summary>
    [DataContract(Name = "TestResultModel")]
    public partial class TestResultModel : IEquatable<TestResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultModel" /> class.
        /// </summary>
        /// <param name="autoTestId">autoTestId.</param>
        /// <param name="configurationId">configurationId.</param>
        /// <param name="startedOn">startedOn.</param>
        /// <param name="completedOn">completedOn.</param>
        /// <param name="durationInMs">durationInMs.</param>
        /// <param name="traces">traces.</param>
        /// <param name="failureType">failureType.</param>
        /// <param name="message">message.</param>
        /// <param name="runByUserId">runByUserId.</param>
        /// <param name="stoppedByUserId">stoppedByUserId.</param>
        /// <param name="testPointId">testPointId.</param>
        /// <param name="testRunId">testRunId.</param>
        /// <param name="testPoint">testPoint.</param>
        /// <param name="autoTest">autoTest.</param>
        /// <param name="autoTestStepResults">autoTestStepResults.</param>
        /// <param name="setupResults">setupResults.</param>
        /// <param name="teardownResults">teardownResults.</param>
        /// <param name="workItemVersionId">workItemVersionId.</param>
        /// <param name="workItemVersionNumber">workItemVersionNumber.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="properties">properties.</param>
        /// <param name="id">id.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="createdById">createdById.</param>
        /// <param name="modifiedById">modifiedById.</param>
        /// <param name="stepComments">stepComments.</param>
        /// <param name="failureClassIds">failureClassIds.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="comment">comment.</param>
        /// <param name="links">links.</param>
        /// <param name="stepResults">stepResults.</param>
        /// <param name="attachments">attachments.</param>
        public TestResultModel(Guid? autoTestId = default(Guid?), Guid configurationId = default(Guid), DateTime? startedOn = default(DateTime?), DateTime? completedOn = default(DateTime?), long? durationInMs = default(long?), string traces = default(string), string failureType = default(string), string message = default(string), Guid? runByUserId = default(Guid?), Guid? stoppedByUserId = default(Guid?), Guid testPointId = default(Guid), Guid testRunId = default(Guid), TestPointPutModel testPoint = default(TestPointPutModel), AutoTestModel autoTest = default(AutoTestModel), List<AttachmentModelAutoTestStepResultsModel> autoTestStepResults = default(List<AttachmentModelAutoTestStepResultsModel>), List<AttachmentModelAutoTestStepResultsModel> setupResults = default(List<AttachmentModelAutoTestStepResultsModel>), List<AttachmentModelAutoTestStepResultsModel> teardownResults = default(List<AttachmentModelAutoTestStepResultsModel>), Guid workItemVersionId = default(Guid), int? workItemVersionNumber = default(int?), Dictionary<string, string> parameters = default(Dictionary<string, string>), Dictionary<string, string> properties = default(Dictionary<string, string>), Guid id = default(Guid), DateTime createdDate = default(DateTime), DateTime? modifiedDate = default(DateTime?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?), List<StepCommentModel> stepComments = default(List<StepCommentModel>), List<Guid> failureClassIds = default(List<Guid>), string outcome = default(string), string comment = default(string), List<LinkModel> links = default(List<LinkModel>), List<StepResultModel> stepResults = default(List<StepResultModel>), List<AttachmentModel> attachments = default(List<AttachmentModel>))
        {
            this.AutoTestId = autoTestId;
            this.ConfigurationId = configurationId;
            this.StartedOn = startedOn;
            this.CompletedOn = completedOn;
            this.DurationInMs = durationInMs;
            this.Traces = traces;
            this.FailureType = failureType;
            this.Message = message;
            this.RunByUserId = runByUserId;
            this.StoppedByUserId = stoppedByUserId;
            this.TestPointId = testPointId;
            this.TestRunId = testRunId;
            this.TestPoint = testPoint;
            this.AutoTest = autoTest;
            this.AutoTestStepResults = autoTestStepResults;
            this.SetupResults = setupResults;
            this.TeardownResults = teardownResults;
            this.WorkItemVersionId = workItemVersionId;
            this.WorkItemVersionNumber = workItemVersionNumber;
            this.Parameters = parameters;
            this.Properties = properties;
            this.Id = id;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.CreatedById = createdById;
            this.ModifiedById = modifiedById;
            this.StepComments = stepComments;
            this.FailureClassIds = failureClassIds;
            this.Outcome = outcome;
            this.Comment = comment;
            this.Links = links;
            this.StepResults = stepResults;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Gets or Sets AutoTestId
        /// </summary>
        [DataMember(Name = "autoTestId", EmitDefaultValue = true)]
        public Guid? AutoTestId { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationId
        /// </summary>
        [DataMember(Name = "configurationId", EmitDefaultValue = false)]
        public Guid ConfigurationId { get; set; }

        /// <summary>
        /// Gets or Sets StartedOn
        /// </summary>
        [DataMember(Name = "startedOn", EmitDefaultValue = true)]
        public DateTime? StartedOn { get; set; }

        /// <summary>
        /// Gets or Sets CompletedOn
        /// </summary>
        [DataMember(Name = "completedOn", EmitDefaultValue = true)]
        public DateTime? CompletedOn { get; set; }

        /// <summary>
        /// Gets or Sets DurationInMs
        /// </summary>
        [DataMember(Name = "durationInMs", EmitDefaultValue = true)]
        public long? DurationInMs { get; set; }

        /// <summary>
        /// Gets or Sets Traces
        /// </summary>
        [DataMember(Name = "traces", EmitDefaultValue = true)]
        public string Traces { get; set; }

        /// <summary>
        /// Gets or Sets FailureType
        /// </summary>
        [DataMember(Name = "failureType", EmitDefaultValue = true)]
        public string FailureType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets RunByUserId
        /// </summary>
        [DataMember(Name = "runByUserId", EmitDefaultValue = true)]
        public Guid? RunByUserId { get; set; }

        /// <summary>
        /// Gets or Sets StoppedByUserId
        /// </summary>
        [DataMember(Name = "stoppedByUserId", EmitDefaultValue = true)]
        public Guid? StoppedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets TestPointId
        /// </summary>
        [DataMember(Name = "testPointId", EmitDefaultValue = false)]
        public Guid TestPointId { get; set; }

        /// <summary>
        /// Gets or Sets TestRunId
        /// </summary>
        [DataMember(Name = "testRunId", EmitDefaultValue = false)]
        public Guid TestRunId { get; set; }

        /// <summary>
        /// Gets or Sets TestPoint
        /// </summary>
        [DataMember(Name = "testPoint", EmitDefaultValue = true)]
        public TestPointPutModel TestPoint { get; set; }

        /// <summary>
        /// Gets or Sets AutoTest
        /// </summary>
        [DataMember(Name = "autoTest", EmitDefaultValue = true)]
        public AutoTestModel AutoTest { get; set; }

        /// <summary>
        /// Gets or Sets AutoTestStepResults
        /// </summary>
        [DataMember(Name = "autoTestStepResults", EmitDefaultValue = true)]
        public List<AttachmentModelAutoTestStepResultsModel> AutoTestStepResults { get; set; }

        /// <summary>
        /// Gets or Sets SetupResults
        /// </summary>
        [DataMember(Name = "setupResults", EmitDefaultValue = true)]
        public List<AttachmentModelAutoTestStepResultsModel> SetupResults { get; set; }

        /// <summary>
        /// Gets or Sets TeardownResults
        /// </summary>
        [DataMember(Name = "teardownResults", EmitDefaultValue = true)]
        public List<AttachmentModelAutoTestStepResultsModel> TeardownResults { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemVersionId
        /// </summary>
        [DataMember(Name = "workItemVersionId", EmitDefaultValue = false)]
        public Guid WorkItemVersionId { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemVersionNumber
        /// </summary>
        [DataMember(Name = "workItemVersionNumber", EmitDefaultValue = true)]
        public int? WorkItemVersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", EmitDefaultValue = false)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedById
        /// </summary>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Gets or Sets StepComments
        /// </summary>
        [DataMember(Name = "stepComments", EmitDefaultValue = true)]
        public List<StepCommentModel> StepComments { get; set; }

        /// <summary>
        /// Gets or Sets FailureClassIds
        /// </summary>
        [DataMember(Name = "failureClassIds", EmitDefaultValue = false)]
        public List<Guid> FailureClassIds { get; set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = false)]
        public string Outcome { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<LinkModel> Links { get; set; }

        /// <summary>
        /// Gets or Sets StepResults
        /// </summary>
        [DataMember(Name = "stepResults", EmitDefaultValue = false)]
        public List<StepResultModel> StepResults { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<AttachmentModel> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultModel {\n");
            sb.Append("  AutoTestId: ").Append(AutoTestId).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  DurationInMs: ").Append(DurationInMs).Append("\n");
            sb.Append("  Traces: ").Append(Traces).Append("\n");
            sb.Append("  FailureType: ").Append(FailureType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RunByUserId: ").Append(RunByUserId).Append("\n");
            sb.Append("  StoppedByUserId: ").Append(StoppedByUserId).Append("\n");
            sb.Append("  TestPointId: ").Append(TestPointId).Append("\n");
            sb.Append("  TestRunId: ").Append(TestRunId).Append("\n");
            sb.Append("  TestPoint: ").Append(TestPoint).Append("\n");
            sb.Append("  AutoTest: ").Append(AutoTest).Append("\n");
            sb.Append("  AutoTestStepResults: ").Append(AutoTestStepResults).Append("\n");
            sb.Append("  SetupResults: ").Append(SetupResults).Append("\n");
            sb.Append("  TeardownResults: ").Append(TeardownResults).Append("\n");
            sb.Append("  WorkItemVersionId: ").Append(WorkItemVersionId).Append("\n");
            sb.Append("  WorkItemVersionNumber: ").Append(WorkItemVersionNumber).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  StepComments: ").Append(StepComments).Append("\n");
            sb.Append("  FailureClassIds: ").Append(FailureClassIds).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  StepResults: ").Append(StepResults).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestResultModel);
        }

        /// <summary>
        /// Returns true if TestResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TestResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AutoTestId == input.AutoTestId ||
                    (this.AutoTestId != null &&
                    this.AutoTestId.Equals(input.AutoTestId))
                ) && 
                (
                    this.ConfigurationId == input.ConfigurationId ||
                    (this.ConfigurationId != null &&
                    this.ConfigurationId.Equals(input.ConfigurationId))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.CompletedOn == input.CompletedOn ||
                    (this.CompletedOn != null &&
                    this.CompletedOn.Equals(input.CompletedOn))
                ) && 
                (
                    this.DurationInMs == input.DurationInMs ||
                    (this.DurationInMs != null &&
                    this.DurationInMs.Equals(input.DurationInMs))
                ) && 
                (
                    this.Traces == input.Traces ||
                    (this.Traces != null &&
                    this.Traces.Equals(input.Traces))
                ) && 
                (
                    this.FailureType == input.FailureType ||
                    (this.FailureType != null &&
                    this.FailureType.Equals(input.FailureType))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.RunByUserId == input.RunByUserId ||
                    (this.RunByUserId != null &&
                    this.RunByUserId.Equals(input.RunByUserId))
                ) && 
                (
                    this.StoppedByUserId == input.StoppedByUserId ||
                    (this.StoppedByUserId != null &&
                    this.StoppedByUserId.Equals(input.StoppedByUserId))
                ) && 
                (
                    this.TestPointId == input.TestPointId ||
                    (this.TestPointId != null &&
                    this.TestPointId.Equals(input.TestPointId))
                ) && 
                (
                    this.TestRunId == input.TestRunId ||
                    (this.TestRunId != null &&
                    this.TestRunId.Equals(input.TestRunId))
                ) && 
                (
                    this.TestPoint == input.TestPoint ||
                    (this.TestPoint != null &&
                    this.TestPoint.Equals(input.TestPoint))
                ) && 
                (
                    this.AutoTest == input.AutoTest ||
                    (this.AutoTest != null &&
                    this.AutoTest.Equals(input.AutoTest))
                ) && 
                (
                    this.AutoTestStepResults == input.AutoTestStepResults ||
                    this.AutoTestStepResults != null &&
                    input.AutoTestStepResults != null &&
                    this.AutoTestStepResults.SequenceEqual(input.AutoTestStepResults)
                ) && 
                (
                    this.SetupResults == input.SetupResults ||
                    this.SetupResults != null &&
                    input.SetupResults != null &&
                    this.SetupResults.SequenceEqual(input.SetupResults)
                ) && 
                (
                    this.TeardownResults == input.TeardownResults ||
                    this.TeardownResults != null &&
                    input.TeardownResults != null &&
                    this.TeardownResults.SequenceEqual(input.TeardownResults)
                ) && 
                (
                    this.WorkItemVersionId == input.WorkItemVersionId ||
                    (this.WorkItemVersionId != null &&
                    this.WorkItemVersionId.Equals(input.WorkItemVersionId))
                ) && 
                (
                    this.WorkItemVersionNumber == input.WorkItemVersionNumber ||
                    (this.WorkItemVersionNumber != null &&
                    this.WorkItemVersionNumber.Equals(input.WorkItemVersionNumber))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    (this.CreatedById != null &&
                    this.CreatedById.Equals(input.CreatedById))
                ) && 
                (
                    this.ModifiedById == input.ModifiedById ||
                    (this.ModifiedById != null &&
                    this.ModifiedById.Equals(input.ModifiedById))
                ) && 
                (
                    this.StepComments == input.StepComments ||
                    this.StepComments != null &&
                    input.StepComments != null &&
                    this.StepComments.SequenceEqual(input.StepComments)
                ) && 
                (
                    this.FailureClassIds == input.FailureClassIds ||
                    this.FailureClassIds != null &&
                    input.FailureClassIds != null &&
                    this.FailureClassIds.SequenceEqual(input.FailureClassIds)
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.StepResults == input.StepResults ||
                    this.StepResults != null &&
                    input.StepResults != null &&
                    this.StepResults.SequenceEqual(input.StepResults)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoTestId != null)
                {
                    hashCode = (hashCode * 59) + this.AutoTestId.GetHashCode();
                }
                if (this.ConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationId.GetHashCode();
                }
                if (this.StartedOn != null)
                {
                    hashCode = (hashCode * 59) + this.StartedOn.GetHashCode();
                }
                if (this.CompletedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedOn.GetHashCode();
                }
                if (this.DurationInMs != null)
                {
                    hashCode = (hashCode * 59) + this.DurationInMs.GetHashCode();
                }
                if (this.Traces != null)
                {
                    hashCode = (hashCode * 59) + this.Traces.GetHashCode();
                }
                if (this.FailureType != null)
                {
                    hashCode = (hashCode * 59) + this.FailureType.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.RunByUserId != null)
                {
                    hashCode = (hashCode * 59) + this.RunByUserId.GetHashCode();
                }
                if (this.StoppedByUserId != null)
                {
                    hashCode = (hashCode * 59) + this.StoppedByUserId.GetHashCode();
                }
                if (this.TestPointId != null)
                {
                    hashCode = (hashCode * 59) + this.TestPointId.GetHashCode();
                }
                if (this.TestRunId != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunId.GetHashCode();
                }
                if (this.TestPoint != null)
                {
                    hashCode = (hashCode * 59) + this.TestPoint.GetHashCode();
                }
                if (this.AutoTest != null)
                {
                    hashCode = (hashCode * 59) + this.AutoTest.GetHashCode();
                }
                if (this.AutoTestStepResults != null)
                {
                    hashCode = (hashCode * 59) + this.AutoTestStepResults.GetHashCode();
                }
                if (this.SetupResults != null)
                {
                    hashCode = (hashCode * 59) + this.SetupResults.GetHashCode();
                }
                if (this.TeardownResults != null)
                {
                    hashCode = (hashCode * 59) + this.TeardownResults.GetHashCode();
                }
                if (this.WorkItemVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemVersionId.GetHashCode();
                }
                if (this.WorkItemVersionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemVersionNumber.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                if (this.CreatedById != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                }
                if (this.ModifiedById != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedById.GetHashCode();
                }
                if (this.StepComments != null)
                {
                    hashCode = (hashCode * 59) + this.StepComments.GetHashCode();
                }
                if (this.FailureClassIds != null)
                {
                    hashCode = (hashCode * 59) + this.FailureClassIds.GetHashCode();
                }
                if (this.Outcome != null)
                {
                    hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.StepResults != null)
                {
                    hashCode = (hashCode * 59) + this.StepResults.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
