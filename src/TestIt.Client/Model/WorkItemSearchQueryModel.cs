/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// WorkItemSearchQueryModel
    /// </summary>
    [DataContract(Name = "WorkItemSearchQueryModel")]
    public partial class WorkItemSearchQueryModel : IEquatable<WorkItemSearchQueryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemSearchQueryModel" /> class.
        /// </summary>
        /// <param name="name">Name of work item.</param>
        /// <param name="globalIds">Collection of global (integer) identifiers.</param>
        /// <param name="attributes">Custom attributes of work item.</param>
        /// <param name="isDeleted">Is result must consist of only actual/deleted work items.</param>
        /// <param name="projectIds">Collection of project identifiers.</param>
        /// <param name="sectionIds">Collection of section identifiers.</param>
        /// <param name="createdByIds">Collection of identifiers of users who created work item.</param>
        /// <param name="modifiedByIds">Collection of identifiers of users who applied last modification to work item.</param>
        /// <param name="states">Collection of states of work item.</param>
        /// <param name="priorities">Collection of priorities of work item.</param>
        /// <param name="entityTypes">Collection of types of work item  &lt;br&gt;Allowed values: &#x60;TestCases&#x60;, &#x60;CheckLists&#x60;, &#x60;SharedSteps&#x60;.</param>
        /// <param name="createdDateMinimal">Minimum date and time of work item creation.</param>
        /// <param name="createdDateMaximal">Maximum date and time of work item creation.</param>
        /// <param name="modifiedDateMinimal">Minimum date and time of work item last modification.</param>
        /// <param name="modifiedDateMaximal">Maximum date and time of work item last modification.</param>
        /// <param name="durationMinimal">Minimum completion time (seconds) of work item.</param>
        /// <param name="durationMaximal">Maximum completion time (seconds) of work item.</param>
        /// <param name="isAutomated">Is result must consist of only manual/automated work items.</param>
        /// <param name="tagNames">Collection of tags.</param>
        /// <param name="autoTestIds">Collection of identifiers of linked autotests.</param>
        /// <param name="exceptWorkItemIds">exceptWorkItemIds.</param>
        public WorkItemSearchQueryModel(string name = default(string), List<long> globalIds = default(List<long>), Dictionary<string, List<string>> attributes = default(Dictionary<string, List<string>>), bool? isDeleted = default(bool?), List<Guid> projectIds = default(List<Guid>), List<Guid> sectionIds = default(List<Guid>), List<Guid> createdByIds = default(List<Guid>), List<Guid> modifiedByIds = default(List<Guid>), List<WorkItemStates> states = default(List<WorkItemStates>), List<WorkItemPriorityModel> priorities = default(List<WorkItemPriorityModel>), List<string> entityTypes = default(List<string>), DateTime? createdDateMinimal = default(DateTime?), DateTime? createdDateMaximal = default(DateTime?), DateTime? modifiedDateMinimal = default(DateTime?), DateTime? modifiedDateMaximal = default(DateTime?), int? durationMinimal = default(int?), int? durationMaximal = default(int?), bool? isAutomated = default(bool?), List<string> tagNames = default(List<string>), List<Guid> autoTestIds = default(List<Guid>), List<Guid> exceptWorkItemIds = default(List<Guid>))
        {
            this.Name = name;
            this.GlobalIds = globalIds;
            this.Attributes = attributes;
            this.IsDeleted = isDeleted;
            this.ProjectIds = projectIds;
            this.SectionIds = sectionIds;
            this.CreatedByIds = createdByIds;
            this.ModifiedByIds = modifiedByIds;
            this.States = states;
            this.Priorities = priorities;
            this.EntityTypes = entityTypes;
            this.CreatedDateMinimal = createdDateMinimal;
            this.CreatedDateMaximal = createdDateMaximal;
            this.ModifiedDateMinimal = modifiedDateMinimal;
            this.ModifiedDateMaximal = modifiedDateMaximal;
            this.DurationMinimal = durationMinimal;
            this.DurationMaximal = durationMaximal;
            this.IsAutomated = isAutomated;
            this.TagNames = tagNames;
            this.AutoTestIds = autoTestIds;
            this.ExceptWorkItemIds = exceptWorkItemIds;
        }

        /// <summary>
        /// Name of work item
        /// </summary>
        /// <value>Name of work item</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Collection of global (integer) identifiers
        /// </summary>
        /// <value>Collection of global (integer) identifiers</value>
        [DataMember(Name = "globalIds", EmitDefaultValue = true)]
        public List<long> GlobalIds { get; set; }

        /// <summary>
        /// Custom attributes of work item
        /// </summary>
        /// <value>Custom attributes of work item</value>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> Attributes { get; set; }

        /// <summary>
        /// Is result must consist of only actual/deleted work items
        /// </summary>
        /// <value>Is result must consist of only actual/deleted work items</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Collection of project identifiers
        /// </summary>
        /// <value>Collection of project identifiers</value>
        [DataMember(Name = "projectIds", EmitDefaultValue = true)]
        public List<Guid> ProjectIds { get; set; }

        /// <summary>
        /// Collection of section identifiers
        /// </summary>
        /// <value>Collection of section identifiers</value>
        [DataMember(Name = "sectionIds", EmitDefaultValue = true)]
        public List<Guid> SectionIds { get; set; }

        /// <summary>
        /// Collection of identifiers of users who created work item
        /// </summary>
        /// <value>Collection of identifiers of users who created work item</value>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Collection of identifiers of users who applied last modification to work item
        /// </summary>
        /// <value>Collection of identifiers of users who applied last modification to work item</value>
        [DataMember(Name = "modifiedByIds", EmitDefaultValue = true)]
        public List<Guid> ModifiedByIds { get; set; }

        /// <summary>
        /// Collection of states of work item
        /// </summary>
        /// <value>Collection of states of work item</value>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        public List<WorkItemStates> States { get; set; }

        /// <summary>
        /// Collection of priorities of work item
        /// </summary>
        /// <value>Collection of priorities of work item</value>
        [DataMember(Name = "priorities", EmitDefaultValue = true)]
        public List<WorkItemPriorityModel> Priorities { get; set; }

        /// <summary>
        /// Collection of types of work item  &lt;br&gt;Allowed values: &#x60;TestCases&#x60;, &#x60;CheckLists&#x60;, &#x60;SharedSteps&#x60;
        /// </summary>
        /// <value>Collection of types of work item  &lt;br&gt;Allowed values: &#x60;TestCases&#x60;, &#x60;CheckLists&#x60;, &#x60;SharedSteps&#x60;</value>
        [DataMember(Name = "entityTypes", EmitDefaultValue = true)]
        public List<string> EntityTypes { get; set; }

        /// <summary>
        /// Minimum date and time of work item creation
        /// </summary>
        /// <value>Minimum date and time of work item creation</value>
        [DataMember(Name = "createdDateMinimal", EmitDefaultValue = true)]
        public DateTime? CreatedDateMinimal { get; set; }

        /// <summary>
        /// Maximum date and time of work item creation
        /// </summary>
        /// <value>Maximum date and time of work item creation</value>
        [DataMember(Name = "createdDateMaximal", EmitDefaultValue = true)]
        public DateTime? CreatedDateMaximal { get; set; }

        /// <summary>
        /// Minimum date and time of work item last modification
        /// </summary>
        /// <value>Minimum date and time of work item last modification</value>
        [DataMember(Name = "modifiedDateMinimal", EmitDefaultValue = true)]
        public DateTime? ModifiedDateMinimal { get; set; }

        /// <summary>
        /// Maximum date and time of work item last modification
        /// </summary>
        /// <value>Maximum date and time of work item last modification</value>
        [DataMember(Name = "modifiedDateMaximal", EmitDefaultValue = true)]
        public DateTime? ModifiedDateMaximal { get; set; }

        /// <summary>
        /// Minimum completion time (seconds) of work item
        /// </summary>
        /// <value>Minimum completion time (seconds) of work item</value>
        [DataMember(Name = "durationMinimal", EmitDefaultValue = true)]
        public int? DurationMinimal { get; set; }

        /// <summary>
        /// Maximum completion time (seconds) of work item
        /// </summary>
        /// <value>Maximum completion time (seconds) of work item</value>
        [DataMember(Name = "durationMaximal", EmitDefaultValue = true)]
        public int? DurationMaximal { get; set; }

        /// <summary>
        /// Is result must consist of only manual/automated work items
        /// </summary>
        /// <value>Is result must consist of only manual/automated work items</value>
        [DataMember(Name = "isAutomated", EmitDefaultValue = true)]
        public bool? IsAutomated { get; set; }

        /// <summary>
        /// Collection of tags
        /// </summary>
        /// <value>Collection of tags</value>
        [DataMember(Name = "tagNames", EmitDefaultValue = true)]
        public List<string> TagNames { get; set; }

        /// <summary>
        /// Collection of identifiers of linked autotests
        /// </summary>
        /// <value>Collection of identifiers of linked autotests</value>
        [DataMember(Name = "autoTestIds", EmitDefaultValue = true)]
        public List<Guid> AutoTestIds { get; set; }

        /// <summary>
        /// Gets or Sets ExceptWorkItemIds
        /// </summary>
        [DataMember(Name = "exceptWorkItemIds", EmitDefaultValue = true)]
        [Obsolete]
        public List<Guid> ExceptWorkItemIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemSearchQueryModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GlobalIds: ").Append(GlobalIds).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  SectionIds: ").Append(SectionIds).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  ModifiedByIds: ").Append(ModifiedByIds).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("  EntityTypes: ").Append(EntityTypes).Append("\n");
            sb.Append("  CreatedDateMinimal: ").Append(CreatedDateMinimal).Append("\n");
            sb.Append("  CreatedDateMaximal: ").Append(CreatedDateMaximal).Append("\n");
            sb.Append("  ModifiedDateMinimal: ").Append(ModifiedDateMinimal).Append("\n");
            sb.Append("  ModifiedDateMaximal: ").Append(ModifiedDateMaximal).Append("\n");
            sb.Append("  DurationMinimal: ").Append(DurationMinimal).Append("\n");
            sb.Append("  DurationMaximal: ").Append(DurationMaximal).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  TagNames: ").Append(TagNames).Append("\n");
            sb.Append("  AutoTestIds: ").Append(AutoTestIds).Append("\n");
            sb.Append("  ExceptWorkItemIds: ").Append(ExceptWorkItemIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkItemSearchQueryModel);
        }

        /// <summary>
        /// Returns true if WorkItemSearchQueryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkItemSearchQueryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkItemSearchQueryModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.GlobalIds == input.GlobalIds ||
                    this.GlobalIds != null &&
                    input.GlobalIds != null &&
                    this.GlobalIds.SequenceEqual(input.GlobalIds)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.ProjectIds == input.ProjectIds ||
                    this.ProjectIds != null &&
                    input.ProjectIds != null &&
                    this.ProjectIds.SequenceEqual(input.ProjectIds)
                ) && 
                (
                    this.SectionIds == input.SectionIds ||
                    this.SectionIds != null &&
                    input.SectionIds != null &&
                    this.SectionIds.SequenceEqual(input.SectionIds)
                ) && 
                (
                    this.CreatedByIds == input.CreatedByIds ||
                    this.CreatedByIds != null &&
                    input.CreatedByIds != null &&
                    this.CreatedByIds.SequenceEqual(input.CreatedByIds)
                ) && 
                (
                    this.ModifiedByIds == input.ModifiedByIds ||
                    this.ModifiedByIds != null &&
                    input.ModifiedByIds != null &&
                    this.ModifiedByIds.SequenceEqual(input.ModifiedByIds)
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Priorities == input.Priorities ||
                    this.Priorities != null &&
                    input.Priorities != null &&
                    this.Priorities.SequenceEqual(input.Priorities)
                ) && 
                (
                    this.EntityTypes == input.EntityTypes ||
                    this.EntityTypes != null &&
                    input.EntityTypes != null &&
                    this.EntityTypes.SequenceEqual(input.EntityTypes)
                ) && 
                (
                    this.CreatedDateMinimal == input.CreatedDateMinimal ||
                    (this.CreatedDateMinimal != null &&
                    this.CreatedDateMinimal.Equals(input.CreatedDateMinimal))
                ) && 
                (
                    this.CreatedDateMaximal == input.CreatedDateMaximal ||
                    (this.CreatedDateMaximal != null &&
                    this.CreatedDateMaximal.Equals(input.CreatedDateMaximal))
                ) && 
                (
                    this.ModifiedDateMinimal == input.ModifiedDateMinimal ||
                    (this.ModifiedDateMinimal != null &&
                    this.ModifiedDateMinimal.Equals(input.ModifiedDateMinimal))
                ) && 
                (
                    this.ModifiedDateMaximal == input.ModifiedDateMaximal ||
                    (this.ModifiedDateMaximal != null &&
                    this.ModifiedDateMaximal.Equals(input.ModifiedDateMaximal))
                ) && 
                (
                    this.DurationMinimal == input.DurationMinimal ||
                    (this.DurationMinimal != null &&
                    this.DurationMinimal.Equals(input.DurationMinimal))
                ) && 
                (
                    this.DurationMaximal == input.DurationMaximal ||
                    (this.DurationMaximal != null &&
                    this.DurationMaximal.Equals(input.DurationMaximal))
                ) && 
                (
                    this.IsAutomated == input.IsAutomated ||
                    (this.IsAutomated != null &&
                    this.IsAutomated.Equals(input.IsAutomated))
                ) && 
                (
                    this.TagNames == input.TagNames ||
                    this.TagNames != null &&
                    input.TagNames != null &&
                    this.TagNames.SequenceEqual(input.TagNames)
                ) && 
                (
                    this.AutoTestIds == input.AutoTestIds ||
                    this.AutoTestIds != null &&
                    input.AutoTestIds != null &&
                    this.AutoTestIds.SequenceEqual(input.AutoTestIds)
                ) && 
                (
                    this.ExceptWorkItemIds == input.ExceptWorkItemIds ||
                    this.ExceptWorkItemIds != null &&
                    input.ExceptWorkItemIds != null &&
                    this.ExceptWorkItemIds.SequenceEqual(input.ExceptWorkItemIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.GlobalIds != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalIds.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.IsDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                }
                if (this.ProjectIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectIds.GetHashCode();
                }
                if (this.SectionIds != null)
                {
                    hashCode = (hashCode * 59) + this.SectionIds.GetHashCode();
                }
                if (this.CreatedByIds != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByIds.GetHashCode();
                }
                if (this.ModifiedByIds != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedByIds.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                if (this.Priorities != null)
                {
                    hashCode = (hashCode * 59) + this.Priorities.GetHashCode();
                }
                if (this.EntityTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypes.GetHashCode();
                }
                if (this.CreatedDateMinimal != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateMinimal.GetHashCode();
                }
                if (this.CreatedDateMaximal != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateMaximal.GetHashCode();
                }
                if (this.ModifiedDateMinimal != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDateMinimal.GetHashCode();
                }
                if (this.ModifiedDateMaximal != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDateMaximal.GetHashCode();
                }
                if (this.DurationMinimal != null)
                {
                    hashCode = (hashCode * 59) + this.DurationMinimal.GetHashCode();
                }
                if (this.DurationMaximal != null)
                {
                    hashCode = (hashCode * 59) + this.DurationMaximal.GetHashCode();
                }
                if (this.IsAutomated != null)
                {
                    hashCode = (hashCode * 59) + this.IsAutomated.GetHashCode();
                }
                if (this.TagNames != null)
                {
                    hashCode = (hashCode * 59) + this.TagNames.GetHashCode();
                }
                if (this.AutoTestIds != null)
                {
                    hashCode = (hashCode * 59) + this.AutoTestIds.GetHashCode();
                }
                if (this.ExceptWorkItemIds != null)
                {
                    hashCode = (hashCode * 59) + this.ExceptWorkItemIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
