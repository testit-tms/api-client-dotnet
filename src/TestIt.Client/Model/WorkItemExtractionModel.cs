/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// Rules for different level entities inclusion/exclusion
    /// </summary>
    [DataContract(Name = "WorkItemExtractionModel")]
    public partial class WorkItemExtractionModel : IEquatable<WorkItemExtractionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemExtractionModel" /> class.
        /// </summary>
        /// <param name="includeWorkItems">Identifiers of work items to be included.</param>
        /// <param name="includeSections">Identifiers of sections to be included.</param>
        /// <param name="includeProjects">Identifiers of projects to be included.</param>
        /// <param name="excludeWorkItems">Identifiers of work items to be excluded.</param>
        /// <param name="excludeSections">Identifiers of sections to be excluded.</param>
        /// <param name="excludeProjects">Identifiers of projects to be excluded.</param>
        public WorkItemExtractionModel(List<Guid> includeWorkItems = default(List<Guid>), List<Guid> includeSections = default(List<Guid>), List<Guid> includeProjects = default(List<Guid>), List<Guid> excludeWorkItems = default(List<Guid>), List<Guid> excludeSections = default(List<Guid>), List<Guid> excludeProjects = default(List<Guid>))
        {
            this.IncludeWorkItems = includeWorkItems;
            this.IncludeSections = includeSections;
            this.IncludeProjects = includeProjects;
            this.ExcludeWorkItems = excludeWorkItems;
            this.ExcludeSections = excludeSections;
            this.ExcludeProjects = excludeProjects;
        }

        /// <summary>
        /// Identifiers of work items to be included
        /// </summary>
        /// <value>Identifiers of work items to be included</value>
        [DataMember(Name = "includeWorkItems", EmitDefaultValue = false)]
        public List<Guid> IncludeWorkItems { get; set; }

        /// <summary>
        /// Identifiers of sections to be included
        /// </summary>
        /// <value>Identifiers of sections to be included</value>
        [DataMember(Name = "includeSections", EmitDefaultValue = false)]
        public List<Guid> IncludeSections { get; set; }

        /// <summary>
        /// Identifiers of projects to be included
        /// </summary>
        /// <value>Identifiers of projects to be included</value>
        [DataMember(Name = "includeProjects", EmitDefaultValue = false)]
        public List<Guid> IncludeProjects { get; set; }

        /// <summary>
        /// Identifiers of work items to be excluded
        /// </summary>
        /// <value>Identifiers of work items to be excluded</value>
        [DataMember(Name = "excludeWorkItems", EmitDefaultValue = false)]
        public List<Guid> ExcludeWorkItems { get; set; }

        /// <summary>
        /// Identifiers of sections to be excluded
        /// </summary>
        /// <value>Identifiers of sections to be excluded</value>
        [DataMember(Name = "excludeSections", EmitDefaultValue = false)]
        public List<Guid> ExcludeSections { get; set; }

        /// <summary>
        /// Identifiers of projects to be excluded
        /// </summary>
        /// <value>Identifiers of projects to be excluded</value>
        [DataMember(Name = "excludeProjects", EmitDefaultValue = false)]
        public List<Guid> ExcludeProjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemExtractionModel {\n");
            sb.Append("  IncludeWorkItems: ").Append(IncludeWorkItems).Append("\n");
            sb.Append("  IncludeSections: ").Append(IncludeSections).Append("\n");
            sb.Append("  IncludeProjects: ").Append(IncludeProjects).Append("\n");
            sb.Append("  ExcludeWorkItems: ").Append(ExcludeWorkItems).Append("\n");
            sb.Append("  ExcludeSections: ").Append(ExcludeSections).Append("\n");
            sb.Append("  ExcludeProjects: ").Append(ExcludeProjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkItemExtractionModel);
        }

        /// <summary>
        /// Returns true if WorkItemExtractionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkItemExtractionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkItemExtractionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncludeWorkItems == input.IncludeWorkItems ||
                    this.IncludeWorkItems != null &&
                    input.IncludeWorkItems != null &&
                    this.IncludeWorkItems.SequenceEqual(input.IncludeWorkItems)
                ) && 
                (
                    this.IncludeSections == input.IncludeSections ||
                    this.IncludeSections != null &&
                    input.IncludeSections != null &&
                    this.IncludeSections.SequenceEqual(input.IncludeSections)
                ) && 
                (
                    this.IncludeProjects == input.IncludeProjects ||
                    this.IncludeProjects != null &&
                    input.IncludeProjects != null &&
                    this.IncludeProjects.SequenceEqual(input.IncludeProjects)
                ) && 
                (
                    this.ExcludeWorkItems == input.ExcludeWorkItems ||
                    this.ExcludeWorkItems != null &&
                    input.ExcludeWorkItems != null &&
                    this.ExcludeWorkItems.SequenceEqual(input.ExcludeWorkItems)
                ) && 
                (
                    this.ExcludeSections == input.ExcludeSections ||
                    this.ExcludeSections != null &&
                    input.ExcludeSections != null &&
                    this.ExcludeSections.SequenceEqual(input.ExcludeSections)
                ) && 
                (
                    this.ExcludeProjects == input.ExcludeProjects ||
                    this.ExcludeProjects != null &&
                    input.ExcludeProjects != null &&
                    this.ExcludeProjects.SequenceEqual(input.ExcludeProjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludeWorkItems != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeWorkItems.GetHashCode();
                }
                if (this.IncludeSections != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeSections.GetHashCode();
                }
                if (this.IncludeProjects != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeProjects.GetHashCode();
                }
                if (this.ExcludeWorkItems != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeWorkItems.GetHashCode();
                }
                if (this.ExcludeSections != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeSections.GetHashCode();
                }
                if (this.ExcludeProjects != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeProjects.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
