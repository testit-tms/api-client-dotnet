/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// DateRangeSelectionModel
    /// </summary>
    [DataContract(Name = "DateRangeSelectionModel")]
    public partial class DateRangeSelectionModel : IEquatable<DateRangeSelectionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRangeSelectionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateRangeSelectionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRangeSelectionModel" /> class.
        /// </summary>
        /// <param name="periodInDays">periodInDays.</param>
        /// <param name="dateRange">dateRange (required).</param>
        public DateRangeSelectionModel(int periodInDays = default(int), DateTimeRangeSelectorModel dateRange = default(DateTimeRangeSelectorModel))
        {
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new ArgumentNullException("dateRange is a required property for DateRangeSelectionModel and cannot be null");
            }
            this.DateRange = dateRange;
            this.PeriodInDays = periodInDays;
        }

        /// <summary>
        /// Gets or Sets PeriodInDays
        /// </summary>
        [DataMember(Name = "periodInDays", EmitDefaultValue = false)]
        public int PeriodInDays { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeRangeSelectorModel DateRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateRangeSelectionModel {\n");
            sb.Append("  PeriodInDays: ").Append(PeriodInDays).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateRangeSelectionModel);
        }

        /// <summary>
        /// Returns true if DateRangeSelectionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DateRangeSelectionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateRangeSelectionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PeriodInDays == input.PeriodInDays ||
                    this.PeriodInDays.Equals(input.PeriodInDays)
                ) && 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PeriodInDays.GetHashCode();
                if (this.DateRange != null)
                {
                    hashCode = (hashCode * 59) + this.DateRange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
