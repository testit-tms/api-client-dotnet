/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// WidgetFilterModel
    /// </summary>
    [DataContract(Name = "WidgetFilterModel")]
    public partial class WidgetFilterModel : IEquatable<WidgetFilterModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TestPlanStatus
        /// </summary>
        [DataMember(Name = "testPlanStatus", EmitDefaultValue = false)]
        public TestPlanStatusModel? TestPlanStatus { get; set; }

        /// <summary>
        /// Gets or Sets TestRunStateName
        /// </summary>
        [DataMember(Name = "testRunStateName", EmitDefaultValue = false)]
        public TestRunState? TestRunStateName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetFilterModel" /> class.
        /// </summary>
        /// <param name="projectIds">projectIds.</param>
        /// <param name="sectionIds">sectionIds.</param>
        /// <param name="testRunIds">testRunIds.</param>
        /// <param name="testPlanIds">testPlanIds.</param>
        /// <param name="testPlanTagNames">testPlanTagNames.</param>
        /// <param name="configurationIds">configurationIds.</param>
        /// <param name="isAutomated">isAutomated.</param>
        /// <param name="priorities">priorities.</param>
        /// <param name="testPlanStatus">testPlanStatus.</param>
        /// <param name="testRunStateName">testRunStateName.</param>
        /// <param name="dateRangeSelection">dateRangeSelection.</param>
        /// <param name="mustReturnOnlyLastTestResult">mustReturnOnlyLastTestResult.</param>
        /// <param name="entityTypes">entityTypes.</param>
        /// <param name="testPlanAttributes">testPlanAttributes.</param>
        public WidgetFilterModel(List<Guid> projectIds = default(List<Guid>), List<Guid> sectionIds = default(List<Guid>), List<Guid> testRunIds = default(List<Guid>), List<Guid> testPlanIds = default(List<Guid>), List<string> testPlanTagNames = default(List<string>), List<Guid> configurationIds = default(List<Guid>), bool? isAutomated = default(bool?), List<string> priorities = default(List<string>), TestPlanStatusModel? testPlanStatus = default(TestPlanStatusModel?), TestRunState? testRunStateName = default(TestRunState?), DateRangeSelectionModel dateRangeSelection = default(DateRangeSelectionModel), bool mustReturnOnlyLastTestResult = default(bool), List<string> entityTypes = default(List<string>), Dictionary<string, List<string>> testPlanAttributes = default(Dictionary<string, List<string>>))
        {
            this.ProjectIds = projectIds;
            this.SectionIds = sectionIds;
            this.TestRunIds = testRunIds;
            this.TestPlanIds = testPlanIds;
            this.TestPlanTagNames = testPlanTagNames;
            this.ConfigurationIds = configurationIds;
            this.IsAutomated = isAutomated;
            this.Priorities = priorities;
            this.TestPlanStatus = testPlanStatus;
            this.TestRunStateName = testRunStateName;
            this.DateRangeSelection = dateRangeSelection;
            this.MustReturnOnlyLastTestResult = mustReturnOnlyLastTestResult;
            this.EntityTypes = entityTypes;
            this.TestPlanAttributes = testPlanAttributes;
        }

        /// <summary>
        /// Gets or Sets ProjectIds
        /// </summary>
        [DataMember(Name = "projectIds", EmitDefaultValue = true)]
        public List<Guid> ProjectIds { get; set; }

        /// <summary>
        /// Gets or Sets SectionIds
        /// </summary>
        [DataMember(Name = "sectionIds", EmitDefaultValue = true)]
        public List<Guid> SectionIds { get; set; }

        /// <summary>
        /// Gets or Sets TestRunIds
        /// </summary>
        [DataMember(Name = "testRunIds", EmitDefaultValue = true)]
        public List<Guid> TestRunIds { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanIds
        /// </summary>
        [DataMember(Name = "testPlanIds", EmitDefaultValue = true)]
        public List<Guid> TestPlanIds { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanTagNames
        /// </summary>
        [DataMember(Name = "testPlanTagNames", EmitDefaultValue = true)]
        public List<string> TestPlanTagNames { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationIds
        /// </summary>
        [DataMember(Name = "configurationIds", EmitDefaultValue = true)]
        public List<Guid> ConfigurationIds { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name = "isAutomated", EmitDefaultValue = true)]
        public bool? IsAutomated { get; set; }

        /// <summary>
        /// Gets or Sets Priorities
        /// </summary>
        [DataMember(Name = "priorities", EmitDefaultValue = true)]
        public List<string> Priorities { get; set; }

        /// <summary>
        /// Gets or Sets DateRangeSelection
        /// </summary>
        [DataMember(Name = "dateRangeSelection", EmitDefaultValue = false)]
        public DateRangeSelectionModel DateRangeSelection { get; set; }

        /// <summary>
        /// Gets or Sets MustReturnOnlyLastTestResult
        /// </summary>
        [DataMember(Name = "mustReturnOnlyLastTestResult", EmitDefaultValue = true)]
        public bool MustReturnOnlyLastTestResult { get; set; }

        /// <summary>
        /// Gets or Sets EntityTypes
        /// </summary>
        [DataMember(Name = "entityTypes", EmitDefaultValue = true)]
        public List<string> EntityTypes { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanAttributes
        /// </summary>
        [DataMember(Name = "testPlanAttributes", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> TestPlanAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WidgetFilterModel {\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  SectionIds: ").Append(SectionIds).Append("\n");
            sb.Append("  TestRunIds: ").Append(TestRunIds).Append("\n");
            sb.Append("  TestPlanIds: ").Append(TestPlanIds).Append("\n");
            sb.Append("  TestPlanTagNames: ").Append(TestPlanTagNames).Append("\n");
            sb.Append("  ConfigurationIds: ").Append(ConfigurationIds).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("  TestPlanStatus: ").Append(TestPlanStatus).Append("\n");
            sb.Append("  TestRunStateName: ").Append(TestRunStateName).Append("\n");
            sb.Append("  DateRangeSelection: ").Append(DateRangeSelection).Append("\n");
            sb.Append("  MustReturnOnlyLastTestResult: ").Append(MustReturnOnlyLastTestResult).Append("\n");
            sb.Append("  EntityTypes: ").Append(EntityTypes).Append("\n");
            sb.Append("  TestPlanAttributes: ").Append(TestPlanAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetFilterModel);
        }

        /// <summary>
        /// Returns true if WidgetFilterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetFilterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetFilterModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProjectIds == input.ProjectIds ||
                    this.ProjectIds != null &&
                    input.ProjectIds != null &&
                    this.ProjectIds.SequenceEqual(input.ProjectIds)
                ) && 
                (
                    this.SectionIds == input.SectionIds ||
                    this.SectionIds != null &&
                    input.SectionIds != null &&
                    this.SectionIds.SequenceEqual(input.SectionIds)
                ) && 
                (
                    this.TestRunIds == input.TestRunIds ||
                    this.TestRunIds != null &&
                    input.TestRunIds != null &&
                    this.TestRunIds.SequenceEqual(input.TestRunIds)
                ) && 
                (
                    this.TestPlanIds == input.TestPlanIds ||
                    this.TestPlanIds != null &&
                    input.TestPlanIds != null &&
                    this.TestPlanIds.SequenceEqual(input.TestPlanIds)
                ) && 
                (
                    this.TestPlanTagNames == input.TestPlanTagNames ||
                    this.TestPlanTagNames != null &&
                    input.TestPlanTagNames != null &&
                    this.TestPlanTagNames.SequenceEqual(input.TestPlanTagNames)
                ) && 
                (
                    this.ConfigurationIds == input.ConfigurationIds ||
                    this.ConfigurationIds != null &&
                    input.ConfigurationIds != null &&
                    this.ConfigurationIds.SequenceEqual(input.ConfigurationIds)
                ) && 
                (
                    this.IsAutomated == input.IsAutomated ||
                    (this.IsAutomated != null &&
                    this.IsAutomated.Equals(input.IsAutomated))
                ) && 
                (
                    this.Priorities == input.Priorities ||
                    this.Priorities != null &&
                    input.Priorities != null &&
                    this.Priorities.SequenceEqual(input.Priorities)
                ) && 
                (
                    this.TestPlanStatus == input.TestPlanStatus ||
                    this.TestPlanStatus.Equals(input.TestPlanStatus)
                ) && 
                (
                    this.TestRunStateName == input.TestRunStateName ||
                    this.TestRunStateName.Equals(input.TestRunStateName)
                ) && 
                (
                    this.DateRangeSelection == input.DateRangeSelection ||
                    (this.DateRangeSelection != null &&
                    this.DateRangeSelection.Equals(input.DateRangeSelection))
                ) && 
                (
                    this.MustReturnOnlyLastTestResult == input.MustReturnOnlyLastTestResult ||
                    this.MustReturnOnlyLastTestResult.Equals(input.MustReturnOnlyLastTestResult)
                ) && 
                (
                    this.EntityTypes == input.EntityTypes ||
                    this.EntityTypes != null &&
                    input.EntityTypes != null &&
                    this.EntityTypes.SequenceEqual(input.EntityTypes)
                ) && 
                (
                    this.TestPlanAttributes == input.TestPlanAttributes ||
                    this.TestPlanAttributes != null &&
                    input.TestPlanAttributes != null &&
                    this.TestPlanAttributes.SequenceEqual(input.TestPlanAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectIds.GetHashCode();
                }
                if (this.SectionIds != null)
                {
                    hashCode = (hashCode * 59) + this.SectionIds.GetHashCode();
                }
                if (this.TestRunIds != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunIds.GetHashCode();
                }
                if (this.TestPlanIds != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanIds.GetHashCode();
                }
                if (this.TestPlanTagNames != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanTagNames.GetHashCode();
                }
                if (this.ConfigurationIds != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationIds.GetHashCode();
                }
                if (this.IsAutomated != null)
                {
                    hashCode = (hashCode * 59) + this.IsAutomated.GetHashCode();
                }
                if (this.Priorities != null)
                {
                    hashCode = (hashCode * 59) + this.Priorities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TestPlanStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.TestRunStateName.GetHashCode();
                if (this.DateRangeSelection != null)
                {
                    hashCode = (hashCode * 59) + this.DateRangeSelection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MustReturnOnlyLastTestResult.GetHashCode();
                if (this.EntityTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypes.GetHashCode();
                }
                if (this.TestPlanAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanAttributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
