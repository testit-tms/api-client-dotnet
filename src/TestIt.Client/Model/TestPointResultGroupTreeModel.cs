/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// TestPointResultGroupTreeModel
    /// </summary>
    [DataContract(Name = "TestPointResultGroupTreeModel")]
    public partial class TestPointResultGroupTreeModel : IEquatable<TestPointResultGroupTreeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointResultGroupTreeModel" /> class.
        /// </summary>
        /// <param name="sectionId">sectionId.</param>
        /// <param name="sectionName">sectionName.</param>
        /// <param name="passed">passed.</param>
        /// <param name="blocked">blocked.</param>
        /// <param name="failed">failed.</param>
        /// <param name="skipped">skipped.</param>
        /// <param name="children">children.</param>
        public TestPointResultGroupTreeModel(Guid sectionId = default(Guid), string sectionName = default(string), int passed = default(int), int blocked = default(int), int failed = default(int), int skipped = default(int), List<TestPointResultGroupTreeModel> children = default(List<TestPointResultGroupTreeModel>))
        {
            this.SectionId = sectionId;
            this.SectionName = sectionName;
            this.Passed = passed;
            this.Blocked = blocked;
            this.Failed = failed;
            this.Skipped = skipped;
            this.Children = children;
        }

        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [DataMember(Name = "sectionId", EmitDefaultValue = false)]
        public Guid SectionId { get; set; }

        /// <summary>
        /// Gets or Sets SectionName
        /// </summary>
        [DataMember(Name = "sectionName", EmitDefaultValue = true)]
        public string SectionName { get; set; }

        /// <summary>
        /// Gets or Sets Passed
        /// </summary>
        [DataMember(Name = "passed", EmitDefaultValue = false)]
        public int Passed { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name = "blocked", EmitDefaultValue = false)]
        public int Blocked { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "failed", EmitDefaultValue = false)]
        public int Failed { get; set; }

        /// <summary>
        /// Gets or Sets Skipped
        /// </summary>
        [DataMember(Name = "skipped", EmitDefaultValue = false)]
        public int Skipped { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = true)]
        public List<TestPointResultGroupTreeModel> Children { get; set; }

        /// <summary>
        /// Gets or Sets SumPassed
        /// </summary>
        [DataMember(Name = "sumPassed", EmitDefaultValue = false)]
        public int SumPassed { get; private set; }

        /// <summary>
        /// Returns false as SumPassed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSumPassed()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SumBlocked
        /// </summary>
        [DataMember(Name = "sumBlocked", EmitDefaultValue = false)]
        public int SumBlocked { get; private set; }

        /// <summary>
        /// Returns false as SumBlocked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSumBlocked()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SumFailed
        /// </summary>
        [DataMember(Name = "sumFailed", EmitDefaultValue = false)]
        public int SumFailed { get; private set; }

        /// <summary>
        /// Returns false as SumFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSumFailed()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SumSkipped
        /// </summary>
        [DataMember(Name = "sumSkipped", EmitDefaultValue = false)]
        public int SumSkipped { get; private set; }

        /// <summary>
        /// Returns false as SumSkipped should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSumSkipped()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPointResultGroupTreeModel {\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  SectionName: ").Append(SectionName).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  SumPassed: ").Append(SumPassed).Append("\n");
            sb.Append("  SumBlocked: ").Append(SumBlocked).Append("\n");
            sb.Append("  SumFailed: ").Append(SumFailed).Append("\n");
            sb.Append("  SumSkipped: ").Append(SumSkipped).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestPointResultGroupTreeModel);
        }

        /// <summary>
        /// Returns true if TestPointResultGroupTreeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TestPointResultGroupTreeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestPointResultGroupTreeModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) && 
                (
                    this.SectionName == input.SectionName ||
                    (this.SectionName != null &&
                    this.SectionName.Equals(input.SectionName))
                ) && 
                (
                    this.Passed == input.Passed ||
                    this.Passed.Equals(input.Passed)
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    this.Blocked.Equals(input.Blocked)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed.Equals(input.Failed)
                ) && 
                (
                    this.Skipped == input.Skipped ||
                    this.Skipped.Equals(input.Skipped)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.SumPassed == input.SumPassed ||
                    this.SumPassed.Equals(input.SumPassed)
                ) && 
                (
                    this.SumBlocked == input.SumBlocked ||
                    this.SumBlocked.Equals(input.SumBlocked)
                ) && 
                (
                    this.SumFailed == input.SumFailed ||
                    this.SumFailed.Equals(input.SumFailed)
                ) && 
                (
                    this.SumSkipped == input.SumSkipped ||
                    this.SumSkipped.Equals(input.SumSkipped)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SectionId != null)
                {
                    hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                }
                if (this.SectionName != null)
                {
                    hashCode = (hashCode * 59) + this.SectionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Passed.GetHashCode();
                hashCode = (hashCode * 59) + this.Blocked.GetHashCode();
                hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                hashCode = (hashCode * 59) + this.Skipped.GetHashCode();
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SumPassed.GetHashCode();
                hashCode = (hashCode * 59) + this.SumBlocked.GetHashCode();
                hashCode = (hashCode * 59) + this.SumFailed.GetHashCode();
                hashCode = (hashCode * 59) + this.SumSkipped.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
