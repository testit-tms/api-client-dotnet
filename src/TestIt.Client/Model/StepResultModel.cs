/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.Client.Client.FileParameter;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// StepResultModel
    /// </summary>
    [DataContract(Name = "StepResultModel")]
    public partial class StepResultModel : IEquatable<StepResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepResultModel" /> class.
        /// </summary>
        /// <param name="stepId">stepId.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="sharedStepVersionId">sharedStepVersionId.</param>
        /// <param name="sharedStepResults">sharedStepResults.</param>
        /// <param name="comment">comment.</param>
        public StepResultModel(Guid stepId = default(Guid), string outcome = default(string), Guid? sharedStepVersionId = default(Guid?), List<SharedStepResultModel> sharedStepResults = default(List<SharedStepResultModel>), StepCommentModel comment = default(StepCommentModel))
        {
            this.StepId = stepId;
            this.Outcome = outcome;
            this.SharedStepVersionId = sharedStepVersionId;
            this.SharedStepResults = sharedStepResults;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name = "stepId", EmitDefaultValue = false)]
        public Guid StepId { get; set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = true)]
        public string Outcome { get; set; }

        /// <summary>
        /// Gets or Sets SharedStepVersionId
        /// </summary>
        [DataMember(Name = "sharedStepVersionId", EmitDefaultValue = true)]
        public Guid? SharedStepVersionId { get; set; }

        /// <summary>
        /// Gets or Sets SharedStepResults
        /// </summary>
        [DataMember(Name = "sharedStepResults", EmitDefaultValue = true)]
        public List<SharedStepResultModel> SharedStepResults { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public StepCommentModel Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StepResultModel {\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  SharedStepVersionId: ").Append(SharedStepVersionId).Append("\n");
            sb.Append("  SharedStepResults: ").Append(SharedStepResults).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepResultModel);
        }

        /// <summary>
        /// Returns true if StepResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of StepResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepResultModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StepId == input.StepId ||
                    (this.StepId != null &&
                    this.StepId.Equals(input.StepId))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.SharedStepVersionId == input.SharedStepVersionId ||
                    (this.SharedStepVersionId != null &&
                    this.SharedStepVersionId.Equals(input.SharedStepVersionId))
                ) && 
                (
                    this.SharedStepResults == input.SharedStepResults ||
                    this.SharedStepResults != null &&
                    input.SharedStepResults != null &&
                    this.SharedStepResults.SequenceEqual(input.SharedStepResults)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StepId != null)
                {
                    hashCode = (hashCode * 59) + this.StepId.GetHashCode();
                }
                if (this.Outcome != null)
                {
                    hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                }
                if (this.SharedStepVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.SharedStepVersionId.GetHashCode();
                }
                if (this.SharedStepResults != null)
                {
                    hashCode = (hashCode * 59) + this.SharedStepResults.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
