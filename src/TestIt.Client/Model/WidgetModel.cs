/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// WidgetModel
    /// </summary>
    [DataContract(Name = "WidgetModel")]
    public partial class WidgetModel : IEquatable<WidgetModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public WidgetTypeModel Type { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        public WidgetSizeTypeModel Size { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceType
        /// </summary>
        [DataMember(Name = "dataSourceType", IsRequired = true, EmitDefaultValue = false)]
        public WidgetSourceTypeModel DataSourceType { get; set; }

        /// <summary>
        /// Gets or Sets DataGroupingType
        /// </summary>
        [DataMember(Name = "dataGroupingType", IsRequired = true, EmitDefaultValue = false)]
        public WidgetGroupingTypeModel DataGroupingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WidgetModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="dataSourceType">dataSourceType (required).</param>
        /// <param name="dataGroupingType">dataGroupingType (required).</param>
        /// <param name="filter">filter (required).</param>
        /// <param name="name">name.</param>
        /// <param name="savedFilterId">savedFilterId.</param>
        public WidgetModel(Guid id = default(Guid), WidgetTypeModel type = default(WidgetTypeModel), WidgetSizeTypeModel size = default(WidgetSizeTypeModel), WidgetSourceTypeModel dataSourceType = default(WidgetSourceTypeModel), WidgetGroupingTypeModel dataGroupingType = default(WidgetGroupingTypeModel), WidgetFilterModel filter = default(WidgetFilterModel), string name = default(string), Guid? savedFilterId = default(Guid?))
        {
            this.Type = type;
            this.Size = size;
            this.DataSourceType = dataSourceType;
            this.DataGroupingType = dataGroupingType;
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for WidgetModel and cannot be null");
            }
            this.Filter = filter;
            this.Id = id;
            this.Name = name;
            this.SavedFilterId = savedFilterId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = false)]
        public WidgetFilterModel Filter { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SavedFilterId
        /// </summary>
        [DataMember(Name = "savedFilterId", EmitDefaultValue = true)]
        public Guid? SavedFilterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WidgetModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DataSourceType: ").Append(DataSourceType).Append("\n");
            sb.Append("  DataGroupingType: ").Append(DataGroupingType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SavedFilterId: ").Append(SavedFilterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetModel);
        }

        /// <summary>
        /// Returns true if WidgetModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.DataSourceType == input.DataSourceType ||
                    this.DataSourceType.Equals(input.DataSourceType)
                ) && 
                (
                    this.DataGroupingType == input.DataGroupingType ||
                    this.DataGroupingType.Equals(input.DataGroupingType)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SavedFilterId == input.SavedFilterId ||
                    (this.SavedFilterId != null &&
                    this.SavedFilterId.Equals(input.SavedFilterId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                hashCode = (hashCode * 59) + this.DataSourceType.GetHashCode();
                hashCode = (hashCode * 59) + this.DataGroupingType.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SavedFilterId != null)
                {
                    hashCode = (hashCode * 59) + this.SavedFilterId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
