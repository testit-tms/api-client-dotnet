/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.Client.Client.FileParameter;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// AutotestExtractionModel
    /// </summary>
    [DataContract(Name = "AutotestExtractionModel")]
    public partial class AutotestExtractionModel : IEquatable<AutotestExtractionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestExtractionModel" /> class.
        /// </summary>
        /// <param name="includeAutotests">Identifiers of autotests to be included.</param>
        /// <param name="excludeAutotests">Identifiers of autotests to be excluded.</param>
        public AutotestExtractionModel(List<Guid> includeAutotests = default(List<Guid>), List<Guid> excludeAutotests = default(List<Guid>))
        {
            this.IncludeAutotests = includeAutotests;
            this.ExcludeAutotests = excludeAutotests;
        }

        /// <summary>
        /// Identifiers of autotests to be included
        /// </summary>
        /// <value>Identifiers of autotests to be included</value>
        [DataMember(Name = "includeAutotests", EmitDefaultValue = true)]
        public List<Guid> IncludeAutotests { get; set; }

        /// <summary>
        /// Identifiers of autotests to be excluded
        /// </summary>
        /// <value>Identifiers of autotests to be excluded</value>
        [DataMember(Name = "excludeAutotests", EmitDefaultValue = true)]
        public List<Guid> ExcludeAutotests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutotestExtractionModel {\n");
            sb.Append("  IncludeAutotests: ").Append(IncludeAutotests).Append("\n");
            sb.Append("  ExcludeAutotests: ").Append(ExcludeAutotests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutotestExtractionModel);
        }

        /// <summary>
        /// Returns true if AutotestExtractionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AutotestExtractionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutotestExtractionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncludeAutotests == input.IncludeAutotests ||
                    this.IncludeAutotests != null &&
                    input.IncludeAutotests != null &&
                    this.IncludeAutotests.SequenceEqual(input.IncludeAutotests)
                ) && 
                (
                    this.ExcludeAutotests == input.ExcludeAutotests ||
                    this.ExcludeAutotests != null &&
                    input.ExcludeAutotests != null &&
                    this.ExcludeAutotests.SequenceEqual(input.ExcludeAutotests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludeAutotests != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeAutotests.GetHashCode();
                }
                if (this.ExcludeAutotests != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeAutotests.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
