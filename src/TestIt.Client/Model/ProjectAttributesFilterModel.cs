/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.Client.Client.FileParameter;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// ProjectAttributesFilterModel
    /// </summary>
    [DataContract(Name = "ProjectAttributesFilterModel")]
    public partial class ProjectAttributesFilterModel : IEquatable<ProjectAttributesFilterModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesFilterModel" /> class.
        /// </summary>
        /// <param name="name">Specifies an attribute name to search for.</param>
        /// <param name="isRequired">Specifies an attribute mandatory status to search for.</param>
        /// <param name="isGlobal">Specifies an attribute global status to search for.</param>
        /// <param name="types">Specifies an attribute types to search for.</param>
        /// <param name="isEnabled">Specifies an attribute enabled status to search for.</param>
        public ProjectAttributesFilterModel(string name = default(string), bool? isRequired = default(bool?), bool? isGlobal = default(bool?), List<CustomAttributeTypesEnum> types = default(List<CustomAttributeTypesEnum>), bool? isEnabled = default(bool?))
        {
            this.Name = name;
            this.IsRequired = isRequired;
            this.IsGlobal = isGlobal;
            this.Types = types;
            this.IsEnabled = isEnabled;
        }

        /// <summary>
        /// Specifies an attribute name to search for
        /// </summary>
        /// <value>Specifies an attribute name to search for</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies an attribute mandatory status to search for
        /// </summary>
        /// <value>Specifies an attribute mandatory status to search for</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Specifies an attribute global status to search for
        /// </summary>
        /// <value>Specifies an attribute global status to search for</value>
        [DataMember(Name = "isGlobal", EmitDefaultValue = true)]
        public bool? IsGlobal { get; set; }

        /// <summary>
        /// Specifies an attribute types to search for
        /// </summary>
        /// <value>Specifies an attribute types to search for</value>
        [DataMember(Name = "types", EmitDefaultValue = true)]
        public List<CustomAttributeTypesEnum> Types { get; set; }

        /// <summary>
        /// Specifies an attribute enabled status to search for
        /// </summary>
        /// <value>Specifies an attribute enabled status to search for</value>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectAttributesFilterModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectAttributesFilterModel);
        }

        /// <summary>
        /// Returns true if ProjectAttributesFilterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectAttributesFilterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectAttributesFilterModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsGlobal == input.IsGlobal ||
                    (this.IsGlobal != null &&
                    this.IsGlobal.Equals(input.IsGlobal))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    input.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IsRequired != null)
                {
                    hashCode = (hashCode * 59) + this.IsRequired.GetHashCode();
                }
                if (this.IsGlobal != null)
                {
                    hashCode = (hashCode * 59) + this.IsGlobal.GetHashCode();
                }
                if (this.Types != null)
                {
                    hashCode = (hashCode * 59) + this.Types.GetHashCode();
                }
                if (this.IsEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
