/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// AutotestResultReasonSelectModel
    /// </summary>
    [DataContract(Name = "AutotestResultReasonSelectModel")]
    public partial class AutotestResultReasonSelectModel : IEquatable<AutotestResultReasonSelectModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonSelectModel" /> class.
        /// </summary>
        /// <param name="failureCategories">failureCategories.</param>
        /// <param name="name">name.</param>
        /// <param name="regexCount">regexCount.</param>
        /// <param name="isDeleted">isDeleted.</param>
        public AutotestResultReasonSelectModel(List<AvailableFailureCategory> failureCategories = default(List<AvailableFailureCategory>), string name = default(string), Int32RangeSelectorModel regexCount = default(Int32RangeSelectorModel), bool? isDeleted = default(bool?))
        {
            this.FailureCategories = failureCategories;
            this.Name = name;
            this.RegexCount = regexCount;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or Sets FailureCategories
        /// </summary>
        [DataMember(Name = "failureCategories", EmitDefaultValue = true)]
        public List<AvailableFailureCategory> FailureCategories { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegexCount
        /// </summary>
        [DataMember(Name = "regexCount", EmitDefaultValue = false)]
        public Int32RangeSelectorModel RegexCount { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutotestResultReasonSelectModel {\n");
            sb.Append("  FailureCategories: ").Append(FailureCategories).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegexCount: ").Append(RegexCount).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutotestResultReasonSelectModel);
        }

        /// <summary>
        /// Returns true if AutotestResultReasonSelectModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AutotestResultReasonSelectModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutotestResultReasonSelectModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FailureCategories == input.FailureCategories ||
                    this.FailureCategories != null &&
                    input.FailureCategories != null &&
                    this.FailureCategories.SequenceEqual(input.FailureCategories)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RegexCount == input.RegexCount ||
                    (this.RegexCount != null &&
                    this.RegexCount.Equals(input.RegexCount))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FailureCategories != null)
                {
                    hashCode = (hashCode * 59) + this.FailureCategories.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RegexCount != null)
                {
                    hashCode = (hashCode * 59) + this.RegexCount.GetHashCode();
                }
                if (this.IsDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
