/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.Client.Client.FileParameter;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// TestResultShortGetModel
    /// </summary>
    [DataContract(Name = "TestResultShortGetModel")]
    public partial class TestResultShortGetModel : IEquatable<TestResultShortGetModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = false)]
        public TestResultOutcome? Outcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultShortGetModel" /> class.
        /// </summary>
        /// <param name="id">Unique ID of test result.</param>
        /// <param name="name">Name of autotest represented by the test result.</param>
        /// <param name="autotestGlobalId">Global ID of autotest represented by test result.</param>
        /// <param name="testRunId">Unique ID of test run where test result is located.</param>
        /// <param name="configurationId">Unique ID of configuration which test result uses.</param>
        /// <param name="configurationName">Name of configuration which test result uses.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="resultReasons">Collection of result reasons which test result have.</param>
        /// <param name="comment">Comment to test result.</param>
        /// <param name="date">Date when test result has been set.</param>
        /// <param name="duration">Time which it took to run the test.</param>
        /// <param name="links">Collection of links attached to test result.</param>
        /// <param name="attachments">Collection of files attached to test result.</param>
        public TestResultShortGetModel(Guid id = default(Guid), string name = default(string), long autotestGlobalId = default(long), Guid testRunId = default(Guid), Guid configurationId = default(Guid), string configurationName = default(string), TestResultOutcome? outcome = default(TestResultOutcome?), List<AutotestResultReasonSubGetModel> resultReasons = default(List<AutotestResultReasonSubGetModel>), string comment = default(string), DateTime date = default(DateTime), long? duration = default(long?), List<LinkSubGetModel> links = default(List<LinkSubGetModel>), List<AttachmentSubGetModel> attachments = default(List<AttachmentSubGetModel>))
        {
            this.Id = id;
            this.Name = name;
            this.AutotestGlobalId = autotestGlobalId;
            this.TestRunId = testRunId;
            this.ConfigurationId = configurationId;
            this.ConfigurationName = configurationName;
            this.Outcome = outcome;
            this.ResultReasons = resultReasons;
            this.Comment = comment;
            this.Date = date;
            this.Duration = duration;
            this.Links = links;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Unique ID of test result
        /// </summary>
        /// <value>Unique ID of test result</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Name of autotest represented by the test result
        /// </summary>
        /// <value>Name of autotest represented by the test result</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Global ID of autotest represented by test result
        /// </summary>
        /// <value>Global ID of autotest represented by test result</value>
        [DataMember(Name = "autotestGlobalId", EmitDefaultValue = false)]
        public long AutotestGlobalId { get; set; }

        /// <summary>
        /// Unique ID of test run where test result is located
        /// </summary>
        /// <value>Unique ID of test run where test result is located</value>
        [DataMember(Name = "testRunId", EmitDefaultValue = false)]
        public Guid TestRunId { get; set; }

        /// <summary>
        /// Unique ID of configuration which test result uses
        /// </summary>
        /// <value>Unique ID of configuration which test result uses</value>
        [DataMember(Name = "configurationId", EmitDefaultValue = false)]
        public Guid ConfigurationId { get; set; }

        /// <summary>
        /// Name of configuration which test result uses
        /// </summary>
        /// <value>Name of configuration which test result uses</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = true)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Collection of result reasons which test result have
        /// </summary>
        /// <value>Collection of result reasons which test result have</value>
        [DataMember(Name = "resultReasons", EmitDefaultValue = true)]
        public List<AutotestResultReasonSubGetModel> ResultReasons { get; set; }

        /// <summary>
        /// Comment to test result
        /// </summary>
        /// <value>Comment to test result</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Date when test result has been set
        /// </summary>
        /// <value>Date when test result has been set</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Time which it took to run the test
        /// </summary>
        /// <value>Time which it took to run the test</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public long? Duration { get; set; }

        /// <summary>
        /// Collection of links attached to test result
        /// </summary>
        /// <value>Collection of links attached to test result</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<LinkSubGetModel> Links { get; set; }

        /// <summary>
        /// Collection of files attached to test result
        /// </summary>
        /// <value>Collection of files attached to test result</value>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<AttachmentSubGetModel> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultShortGetModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AutotestGlobalId: ").Append(AutotestGlobalId).Append("\n");
            sb.Append("  TestRunId: ").Append(TestRunId).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  ResultReasons: ").Append(ResultReasons).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestResultShortGetModel);
        }

        /// <summary>
        /// Returns true if TestResultShortGetModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TestResultShortGetModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultShortGetModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AutotestGlobalId == input.AutotestGlobalId ||
                    this.AutotestGlobalId.Equals(input.AutotestGlobalId)
                ) && 
                (
                    this.TestRunId == input.TestRunId ||
                    (this.TestRunId != null &&
                    this.TestRunId.Equals(input.TestRunId))
                ) && 
                (
                    this.ConfigurationId == input.ConfigurationId ||
                    (this.ConfigurationId != null &&
                    this.ConfigurationId.Equals(input.ConfigurationId))
                ) && 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    this.Outcome.Equals(input.Outcome)
                ) && 
                (
                    this.ResultReasons == input.ResultReasons ||
                    this.ResultReasons != null &&
                    input.ResultReasons != null &&
                    this.ResultReasons.SequenceEqual(input.ResultReasons)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutotestGlobalId.GetHashCode();
                if (this.TestRunId != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunId.GetHashCode();
                }
                if (this.ConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationId.GetHashCode();
                }
                if (this.ConfigurationName != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                if (this.ResultReasons != null)
                {
                    hashCode = (hashCode * 59) + this.ResultReasons.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
