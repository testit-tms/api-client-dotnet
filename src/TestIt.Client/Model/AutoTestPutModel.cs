/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// AutoTestPutModel
    /// </summary>
    [DataContract(Name = "AutoTestPutModel")]
    public partial class AutoTestPutModel : IEquatable<AutoTestPutModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestPutModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutoTestPutModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestPutModel" /> class.
        /// </summary>
        /// <param name="id">Used for search autotest. If value equals Guid mask filled with zeros, search will be executed using ExternalId.</param>
        /// <param name="workItemIdsForLinkWithAutoTest">workItemIdsForLinkWithAutoTest.</param>
        /// <param name="externalId">Specifies the ID of your autotest in the external system.&lt;br /&gt;  To test the method, you can use any ID. (required).</param>
        /// <param name="links">Specifies the links in the autotest..</param>
        /// <param name="projectId">Specifies the project GUID.&lt;br /&gt;  You can get it using the &#x60;GET /api/v2/projects&#x60; method. (required).</param>
        /// <param name="name">Specifies autotest name in the test management system. (required).</param>
        /// <param name="_namespace">Specifies the name of the namespace in the test management system..</param>
        /// <param name="classname">Specifies the class name in the test management system..</param>
        /// <param name="steps">Specifies the steps in the autotest..</param>
        /// <param name="setup">Specifies the setup steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter..</param>
        /// <param name="teardown">Specifies the teardown steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter..</param>
        /// <param name="title">Specifies the name of the autotest in the autotest card.   The &#x60;Name&#x60; parameter is responsible for the name in the table..</param>
        /// <param name="description">Specifies the autotest description in the test management system..</param>
        /// <param name="labels">Specifies autotest labels..</param>
        /// <param name="isFlaky">Marks the autotest as flaky..</param>
        public AutoTestPutModel(Guid id = default(Guid), List<Guid> workItemIdsForLinkWithAutoTest = default(List<Guid>), string externalId = default(string), List<LinkPutModel> links = default(List<LinkPutModel>), Guid projectId = default(Guid), string name = default(string), string _namespace = default(string), string classname = default(string), List<AutoTestStepModel> steps = default(List<AutoTestStepModel>), List<AutoTestStepModel> setup = default(List<AutoTestStepModel>), List<AutoTestStepModel> teardown = default(List<AutoTestStepModel>), string title = default(string), string description = default(string), List<LabelPostModel> labels = default(List<LabelPostModel>), bool? isFlaky = default(bool?))
        {
            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new ArgumentNullException("externalId is a required property for AutoTestPutModel and cannot be null");
            }
            this.ExternalId = externalId;
            this.ProjectId = projectId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AutoTestPutModel and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.WorkItemIdsForLinkWithAutoTest = workItemIdsForLinkWithAutoTest;
            this.Links = links;
            this.Namespace = _namespace;
            this.Classname = classname;
            this.Steps = steps;
            this.Setup = setup;
            this.Teardown = teardown;
            this.Title = title;
            this.Description = description;
            this.Labels = labels;
            this.IsFlaky = isFlaky;
        }

        /// <summary>
        /// Used for search autotest. If value equals Guid mask filled with zeros, search will be executed using ExternalId
        /// </summary>
        /// <value>Used for search autotest. If value equals Guid mask filled with zeros, search will be executed using ExternalId</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemIdsForLinkWithAutoTest
        /// </summary>
        [DataMember(Name = "workItemIdsForLinkWithAutoTest", EmitDefaultValue = true)]
        public List<Guid> WorkItemIdsForLinkWithAutoTest { get; set; }

        /// <summary>
        /// Specifies the ID of your autotest in the external system.&lt;br /&gt;  To test the method, you can use any ID.
        /// </summary>
        /// <value>Specifies the ID of your autotest in the external system.&lt;br /&gt;  To test the method, you can use any ID.</value>
        [DataMember(Name = "externalId", IsRequired = true, EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Specifies the links in the autotest.
        /// </summary>
        /// <value>Specifies the links in the autotest.</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<LinkPutModel> Links { get; set; }

        /// <summary>
        /// Specifies the project GUID.&lt;br /&gt;  You can get it using the &#x60;GET /api/v2/projects&#x60; method.
        /// </summary>
        /// <value>Specifies the project GUID.&lt;br /&gt;  You can get it using the &#x60;GET /api/v2/projects&#x60; method.</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = false)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Specifies autotest name in the test management system.
        /// </summary>
        /// <value>Specifies autotest name in the test management system.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the name of the namespace in the test management system.
        /// </summary>
        /// <value>Specifies the name of the namespace in the test management system.</value>
        [DataMember(Name = "namespace", EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Specifies the class name in the test management system.
        /// </summary>
        /// <value>Specifies the class name in the test management system.</value>
        [DataMember(Name = "classname", EmitDefaultValue = true)]
        public string Classname { get; set; }

        /// <summary>
        /// Specifies the steps in the autotest.
        /// </summary>
        /// <value>Specifies the steps in the autotest.</value>
        [DataMember(Name = "steps", EmitDefaultValue = true)]
        public List<AutoTestStepModel> Steps { get; set; }

        /// <summary>
        /// Specifies the setup steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter.
        /// </summary>
        /// <value>Specifies the setup steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter.</value>
        [DataMember(Name = "setup", EmitDefaultValue = true)]
        public List<AutoTestStepModel> Setup { get; set; }

        /// <summary>
        /// Specifies the teardown steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter.
        /// </summary>
        /// <value>Specifies the teardown steps and relates them to the autotest. Supported values are the same as in the &#x60;steps&#x60; parameter.</value>
        [DataMember(Name = "teardown", EmitDefaultValue = true)]
        public List<AutoTestStepModel> Teardown { get; set; }

        /// <summary>
        /// Specifies the name of the autotest in the autotest card.   The &#x60;Name&#x60; parameter is responsible for the name in the table.
        /// </summary>
        /// <value>Specifies the name of the autotest in the autotest card.   The &#x60;Name&#x60; parameter is responsible for the name in the table.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Specifies the autotest description in the test management system.
        /// </summary>
        /// <value>Specifies the autotest description in the test management system.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies autotest labels.
        /// </summary>
        /// <value>Specifies autotest labels.</value>
        [DataMember(Name = "labels", EmitDefaultValue = true)]
        public List<LabelPostModel> Labels { get; set; }

        /// <summary>
        /// Marks the autotest as flaky.
        /// </summary>
        /// <value>Marks the autotest as flaky.</value>
        [DataMember(Name = "isFlaky", EmitDefaultValue = true)]
        public bool? IsFlaky { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoTestPutModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkItemIdsForLinkWithAutoTest: ").Append(WorkItemIdsForLinkWithAutoTest).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Classname: ").Append(Classname).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("  Teardown: ").Append(Teardown).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  IsFlaky: ").Append(IsFlaky).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoTestPutModel);
        }

        /// <summary>
        /// Returns true if AutoTestPutModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoTestPutModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoTestPutModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.WorkItemIdsForLinkWithAutoTest == input.WorkItemIdsForLinkWithAutoTest ||
                    this.WorkItemIdsForLinkWithAutoTest != null &&
                    input.WorkItemIdsForLinkWithAutoTest != null &&
                    this.WorkItemIdsForLinkWithAutoTest.SequenceEqual(input.WorkItemIdsForLinkWithAutoTest)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Classname == input.Classname ||
                    (this.Classname != null &&
                    this.Classname.Equals(input.Classname))
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                ) && 
                (
                    this.Setup == input.Setup ||
                    this.Setup != null &&
                    input.Setup != null &&
                    this.Setup.SequenceEqual(input.Setup)
                ) && 
                (
                    this.Teardown == input.Teardown ||
                    this.Teardown != null &&
                    input.Teardown != null &&
                    this.Teardown.SequenceEqual(input.Teardown)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.IsFlaky == input.IsFlaky ||
                    (this.IsFlaky != null &&
                    this.IsFlaky.Equals(input.IsFlaky))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.WorkItemIdsForLinkWithAutoTest != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemIdsForLinkWithAutoTest.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Namespace != null)
                {
                    hashCode = (hashCode * 59) + this.Namespace.GetHashCode();
                }
                if (this.Classname != null)
                {
                    hashCode = (hashCode * 59) + this.Classname.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                if (this.Setup != null)
                {
                    hashCode = (hashCode * 59) + this.Setup.GetHashCode();
                }
                if (this.Teardown != null)
                {
                    hashCode = (hashCode * 59) + this.Teardown.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.IsFlaky != null)
                {
                    hashCode = (hashCode * 59) + this.IsFlaky.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
