/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// TimeLineFromAutoTestRunsModel
    /// </summary>
    [DataContract(Name = "TimeLineFromAutoTestRunsModel")]
    public partial class TimeLineFromAutoTestRunsModel : IEquatable<TimeLineFromAutoTestRunsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeLineFromAutoTestRunsModel" /> class.
        /// </summary>
        /// <param name="testRunId">testRunId.</param>
        /// <param name="testRunName">testRunName.</param>
        /// <param name="projectGlobalId">projectGlobalId.</param>
        /// <param name="startedDate">startedDate.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="stateName">stateName.</param>
        /// <param name="inProgressCount">inProgressCount.</param>
        /// <param name="passedCount">passedCount.</param>
        /// <param name="failedCount">failedCount.</param>
        /// <param name="skippedCount">skippedCount.</param>
        /// <param name="blockedCount">blockedCount.</param>
        public TimeLineFromAutoTestRunsModel(Guid testRunId = default(Guid), string testRunName = default(string), long? projectGlobalId = default(long?), DateTime? startedDate = default(DateTime?), DateTime? completedDate = default(DateTime?), string stateName = default(string), int? inProgressCount = default(int?), int? passedCount = default(int?), int? failedCount = default(int?), int? skippedCount = default(int?), int? blockedCount = default(int?))
        {
            this.TestRunId = testRunId;
            this.TestRunName = testRunName;
            this.ProjectGlobalId = projectGlobalId;
            this.StartedDate = startedDate;
            this.CompletedDate = completedDate;
            this.StateName = stateName;
            this.InProgressCount = inProgressCount;
            this.PassedCount = passedCount;
            this.FailedCount = failedCount;
            this.SkippedCount = skippedCount;
            this.BlockedCount = blockedCount;
        }

        /// <summary>
        /// Gets or Sets TestRunId
        /// </summary>
        [DataMember(Name = "testRunId", EmitDefaultValue = false)]
        public Guid TestRunId { get; set; }

        /// <summary>
        /// Gets or Sets TestRunName
        /// </summary>
        [DataMember(Name = "testRunName", EmitDefaultValue = true)]
        public string TestRunName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectGlobalId
        /// </summary>
        [DataMember(Name = "projectGlobalId", EmitDefaultValue = true)]
        public long? ProjectGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets StartedDate
        /// </summary>
        [DataMember(Name = "startedDate", EmitDefaultValue = true)]
        public DateTime? StartedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "completedDate", EmitDefaultValue = true)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets StateName
        /// </summary>
        [DataMember(Name = "stateName", EmitDefaultValue = true)]
        public string StateName { get; set; }

        /// <summary>
        /// Gets or Sets InProgressCount
        /// </summary>
        [DataMember(Name = "inProgressCount", EmitDefaultValue = true)]
        public int? InProgressCount { get; set; }

        /// <summary>
        /// Gets or Sets PassedCount
        /// </summary>
        [DataMember(Name = "passedCount", EmitDefaultValue = true)]
        public int? PassedCount { get; set; }

        /// <summary>
        /// Gets or Sets FailedCount
        /// </summary>
        [DataMember(Name = "failedCount", EmitDefaultValue = true)]
        public int? FailedCount { get; set; }

        /// <summary>
        /// Gets or Sets SkippedCount
        /// </summary>
        [DataMember(Name = "skippedCount", EmitDefaultValue = true)]
        public int? SkippedCount { get; set; }

        /// <summary>
        /// Gets or Sets BlockedCount
        /// </summary>
        [DataMember(Name = "blockedCount", EmitDefaultValue = true)]
        public int? BlockedCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeLineFromAutoTestRunsModel {\n");
            sb.Append("  TestRunId: ").Append(TestRunId).Append("\n");
            sb.Append("  TestRunName: ").Append(TestRunName).Append("\n");
            sb.Append("  ProjectGlobalId: ").Append(ProjectGlobalId).Append("\n");
            sb.Append("  StartedDate: ").Append(StartedDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  InProgressCount: ").Append(InProgressCount).Append("\n");
            sb.Append("  PassedCount: ").Append(PassedCount).Append("\n");
            sb.Append("  FailedCount: ").Append(FailedCount).Append("\n");
            sb.Append("  SkippedCount: ").Append(SkippedCount).Append("\n");
            sb.Append("  BlockedCount: ").Append(BlockedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeLineFromAutoTestRunsModel);
        }

        /// <summary>
        /// Returns true if TimeLineFromAutoTestRunsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeLineFromAutoTestRunsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeLineFromAutoTestRunsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TestRunId == input.TestRunId ||
                    (this.TestRunId != null &&
                    this.TestRunId.Equals(input.TestRunId))
                ) && 
                (
                    this.TestRunName == input.TestRunName ||
                    (this.TestRunName != null &&
                    this.TestRunName.Equals(input.TestRunName))
                ) && 
                (
                    this.ProjectGlobalId == input.ProjectGlobalId ||
                    (this.ProjectGlobalId != null &&
                    this.ProjectGlobalId.Equals(input.ProjectGlobalId))
                ) && 
                (
                    this.StartedDate == input.StartedDate ||
                    (this.StartedDate != null &&
                    this.StartedDate.Equals(input.StartedDate))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.InProgressCount == input.InProgressCount ||
                    (this.InProgressCount != null &&
                    this.InProgressCount.Equals(input.InProgressCount))
                ) && 
                (
                    this.PassedCount == input.PassedCount ||
                    (this.PassedCount != null &&
                    this.PassedCount.Equals(input.PassedCount))
                ) && 
                (
                    this.FailedCount == input.FailedCount ||
                    (this.FailedCount != null &&
                    this.FailedCount.Equals(input.FailedCount))
                ) && 
                (
                    this.SkippedCount == input.SkippedCount ||
                    (this.SkippedCount != null &&
                    this.SkippedCount.Equals(input.SkippedCount))
                ) && 
                (
                    this.BlockedCount == input.BlockedCount ||
                    (this.BlockedCount != null &&
                    this.BlockedCount.Equals(input.BlockedCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TestRunId != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunId.GetHashCode();
                }
                if (this.TestRunName != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunName.GetHashCode();
                }
                if (this.ProjectGlobalId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectGlobalId.GetHashCode();
                }
                if (this.StartedDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartedDate.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                if (this.StateName != null)
                {
                    hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                }
                if (this.InProgressCount != null)
                {
                    hashCode = (hashCode * 59) + this.InProgressCount.GetHashCode();
                }
                if (this.PassedCount != null)
                {
                    hashCode = (hashCode * 59) + this.PassedCount.GetHashCode();
                }
                if (this.FailedCount != null)
                {
                    hashCode = (hashCode * 59) + this.FailedCount.GetHashCode();
                }
                if (this.SkippedCount != null)
                {
                    hashCode = (hashCode * 59) + this.SkippedCount.GetHashCode();
                }
                if (this.BlockedCount != null)
                {
                    hashCode = (hashCode * 59) + this.BlockedCount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
