/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TestIt.Client.Client.OpenAPIDateConverter;

namespace TestIt.Client.Model
{
    /// <summary>
    /// Defines WidgetGroupingTypeModel
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WidgetGroupingTypeModel
    {
        /// <summary>
        /// Enum Status for value: Status
        /// </summary>
        [EnumMember(Value = "Status")]
        Status = 1,

        /// <summary>
        /// Enum Priority for value: Priority
        /// </summary>
        [EnumMember(Value = "Priority")]
        Priority = 2,

        /// <summary>
        /// Enum Automation for value: Automation
        /// </summary>
        [EnumMember(Value = "Automation")]
        Automation = 3,

        /// <summary>
        /// Enum Configuration for value: Configuration
        /// </summary>
        [EnumMember(Value = "Configuration")]
        Configuration = 4,

        /// <summary>
        /// Enum Tester for value: Tester
        /// </summary>
        [EnumMember(Value = "Tester")]
        Tester = 5,

        /// <summary>
        /// Enum FailureReason for value: FailureReason
        /// </summary>
        [EnumMember(Value = "FailureReason")]
        FailureReason = 6,

        /// <summary>
        /// Enum Author for value: Author
        /// </summary>
        [EnumMember(Value = "Author")]
        Author = 7,

        /// <summary>
        /// Enum TestPoint for value: TestPoint
        /// </summary>
        [EnumMember(Value = "TestPoint")]
        TestPoint = 8,

        /// <summary>
        /// Enum IsFlaky for value: IsFlaky
        /// </summary>
        [EnumMember(Value = "IsFlaky")]
        IsFlaky = 9,

        /// <summary>
        /// Enum NoGrouping for value: NoGrouping
        /// </summary>
        [EnumMember(Value = "NoGrouping")]
        NoGrouping = 10

    }

}
