/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIT.ApiClient.Client;
using TestIT.ApiClient.Model;

namespace TestIT.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParametersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        List<ParameterApiResult> ApiV2ParametersBulkPost(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>));

        /// <summary>
        /// Create multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        ApiResponse<List<ParameterApiResult>> ApiV2ParametersBulkPostWithHttpInfo(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>));
        /// <summary>
        /// Update multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        void ApiV2ParametersBulkPut(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>));

        /// <summary>
        /// Update multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> ApiV2ParametersBulkPutWithHttpInfo(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>));
        /// <summary>
        /// Get parameters as group
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        List<ParameterGroupApiResult> ApiV2ParametersGroupsGet(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get parameters as group
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        ApiResponse<List<ParameterGroupApiResult>> ApiV2ParametersGroupsGetWithHttpInfo(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Check existence parameter key in system
        /// </summary>
        /// <remarks>
        ///  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        [Obsolete]
        bool ApiV2ParametersKeyNameNameExistsGet(string name);

        /// <summary>
        /// Check existence parameter key in system
        /// </summary>
        /// <remarks>
        ///  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        [Obsolete]
        ApiResponse<bool> ApiV2ParametersKeyNameNameExistsGetWithHttpInfo(string name);
        /// <summary>
        /// Get all parameter key values
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <returns>List&lt;string&gt;</returns>
        [Obsolete]
        List<string> ApiV2ParametersKeyValuesGet(string key);

        /// <summary>
        /// Get all parameter key values
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        [Obsolete]
        ApiResponse<List<string>> ApiV2ParametersKeyValuesGetWithHttpInfo(string key);
        /// <summary>
        /// Get all parameter keys
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        [Obsolete]
        List<string> ApiV2ParametersKeysGet(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get all parameter keys
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        [Obsolete]
        ApiResponse<List<string>> ApiV2ParametersKeysGetWithHttpInfo(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Search for parameters as group
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        List<ParameterGroupApiResult> ApiV2ParametersSearchGroupsPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel));

        /// <summary>
        /// Search for parameters as group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        ApiResponse<List<ParameterGroupApiResult>> ApiV2ParametersSearchGroupsPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel));
        /// <summary>
        /// Search for parameters
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        List<ParameterApiResult> ApiV2ParametersSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel));

        /// <summary>
        /// Search for parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        ApiResponse<List<ParameterApiResult>> ApiV2ParametersSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel));
        /// <summary>
        /// Create parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ParameterApiResult</returns>
        [Obsolete]
        ParameterApiResult CreateParameter(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel));

        /// <summary>
        /// Create parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of ParameterApiResult</returns>
        [Obsolete]
        ApiResponse<ParameterApiResult> CreateParameterWithHttpInfo(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel));
        /// <summary>
        /// Delete parameter by name
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteByName(string name);

        /// <summary>
        /// Delete parameter by name
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteByNameWithHttpInfo(string name);
        /// <summary>
        /// Delete parameters by parameter key identifier
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values by parameter key identifier
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteByParameterKeyId(Guid keyId);

        /// <summary>
        /// Delete parameters by parameter key identifier
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values by parameter key identifier
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteByParameterKeyIdWithHttpInfo(Guid keyId);
        /// <summary>
        /// Delete parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteParameter(Guid id);

        /// <summary>
        /// Delete parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteParameterWithHttpInfo(Guid id);
        /// <summary>
        /// Get all parameters
        /// </summary>
        /// <remarks>
        ///  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        List<ParameterApiResult> GetAllParameters(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));

        /// <summary>
        /// Get all parameters
        /// </summary>
        /// <remarks>
        ///  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        ApiResponse<List<ParameterApiResult>> GetAllParametersWithHttpInfo(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string));
        /// <summary>
        /// Get parameter by ID
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ParameterApiResult</returns>
        [Obsolete]
        ParameterApiResult GetParameterById(Guid id);

        /// <summary>
        /// Get parameter by ID
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ApiResponse of ParameterApiResult</returns>
        [Obsolete]
        ApiResponse<ParameterApiResult> GetParameterByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Update parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        void UpdateParameter(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel));

        /// <summary>
        /// Update parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> UpdateParameterWithHttpInfo(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParametersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ParameterApiResult>> ApiV2ParametersBulkPostAsync(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ParameterApiResult>>> ApiV2ParametersBulkPostWithHttpInfoAsync(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task ApiV2ParametersBulkPutAsync(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update multiple parameters
        /// </summary>
        /// <remarks>
        ///  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2ParametersBulkPutWithHttpInfoAsync(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get parameters as group
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ParameterGroupApiResult>> ApiV2ParametersGroupsGetAsync(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get parameters as group
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterGroupApiResult&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ParameterGroupApiResult>>> ApiV2ParametersGroupsGetWithHttpInfoAsync(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check existence parameter key in system
        /// </summary>
        /// <remarks>
        ///  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        [Obsolete]
        System.Threading.Tasks.Task<bool> ApiV2ParametersKeyNameNameExistsGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check existence parameter key in system
        /// </summary>
        /// <remarks>
        ///  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2ParametersKeyNameNameExistsGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all parameter key values
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<string>> ApiV2ParametersKeyValuesGetAsync(string key, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all parameter key values
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiV2ParametersKeyValuesGetWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all parameter keys
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<string>> ApiV2ParametersKeysGetAsync(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all parameter keys
        /// </summary>
        /// <remarks>
        ///  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiV2ParametersKeysGetWithHttpInfoAsync(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for parameters as group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ParameterGroupApiResult>> ApiV2ParametersSearchGroupsPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for parameters as group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterGroupApiResult&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ParameterGroupApiResult>>> ApiV2ParametersSearchGroupsPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ParameterApiResult>> ApiV2ParametersSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ParameterApiResult>>> ApiV2ParametersSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResult</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ParameterApiResult> CreateParameterAsync(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResult)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResult>> CreateParameterWithHttpInfoAsync(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete parameter by name
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete parameter by name
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete parameters by parameter key identifier
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values by parameter key identifier
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteByParameterKeyIdAsync(Guid keyId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete parameters by parameter key identifier
        /// </summary>
        /// <remarks>
        /// Deletes parameter and all it&#39;s values by parameter key identifier
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByParameterKeyIdWithHttpInfoAsync(Guid keyId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteParameterAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParameterWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all parameters
        /// </summary>
        /// <remarks>
        ///  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ParameterApiResult>> GetAllParametersAsync(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all parameters
        /// </summary>
        /// <remarks>
        ///  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ParameterApiResult>>> GetAllParametersWithHttpInfoAsync(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get parameter by ID
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResult</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ParameterApiResult> GetParameterByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get parameter by ID
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResult)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResult>> GetParameterByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task UpdateParameterAsync(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update parameter
        /// </summary>
        /// <remarks>
        ///  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateParameterWithHttpInfoAsync(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParametersApi : IParametersApiSync, IParametersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ParametersApi : IDisposable, IParametersApi
    {
        private TestIT.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ParametersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ParametersApi(string basePath)
        {
            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ParametersApi(TestIT.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ParametersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ParametersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ParametersApi(HttpClient client, TestIT.ApiClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ParametersApi(TestIT.ApiClient.Client.ISynchronousClient client, TestIT.ApiClient.Client.IAsynchronousClient asyncClient, TestIT.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIT.ApiClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIT.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIT.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIT.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIT.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public List<ParameterApiResult> ApiV2ParametersBulkPost(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = ApiV2ParametersBulkPostWithHttpInfo(createParameterApiModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> ApiV2ParametersBulkPostWithHttpInfo(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ParameterApiResult>>("/api/v2/parameters/bulk", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersBulkPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ParameterApiResult>> ApiV2ParametersBulkPostAsync(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = await ApiV2ParametersBulkPostWithHttpInfoAsync(createParameterApiModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System creates parameters  System returns list of parameter model (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>>> ApiV2ParametersBulkPostWithHttpInfoAsync(List<CreateParameterApiModel> createParameterApiModel = default(List<CreateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ParameterApiResult>>("/api/v2/parameters/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersBulkPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        public void ApiV2ParametersBulkPut(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>))
        {
            ApiV2ParametersBulkPutWithHttpInfo(updateParameterApiModel);
        }

        /// <summary>
        /// Update multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<Object> ApiV2ParametersBulkPutWithHttpInfo(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/parameters/bulk", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersBulkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task ApiV2ParametersBulkPutAsync(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV2ParametersBulkPutWithHttpInfoAsync(updateParameterApiModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update multiple parameters  Use case  User sets list of parameter model (listed in the request example)  User runs method execution  System updates parameters
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> ApiV2ParametersBulkPutWithHttpInfoAsync(List<UpdateParameterApiModel> updateParameterApiModel = default(List<UpdateParameterApiModel>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/parameters/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersBulkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameters as group  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public List<ParameterGroupApiResult> ApiV2ParametersGroupsGet(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> localVarResponse = ApiV2ParametersGroupsGetWithHttpInfo(parameterKeyIds, name, isDeleted, projectIds, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters as group  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> ApiV2ParametersGroupsGetWithHttpInfo(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parameterKeyIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "parameterKeyIds", parameterKeyIds));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (projectIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "projectIds", projectIds));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ParameterGroupApiResult>>("/api/v2/parameters/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersGroupsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameters as group  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ParameterGroupApiResult>> ApiV2ParametersGroupsGetAsync(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> localVarResponse = await ApiV2ParametersGroupsGetWithHttpInfoAsync(parameterKeyIds, name, isDeleted, projectIds, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters as group  Use case  User runs method execution  System search parameters  System returns parameters models as groups (listed in the response example)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterKeyIds"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterGroupApiResult&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>>> ApiV2ParametersGroupsGetWithHttpInfoAsync(List<Guid> parameterKeyIds = default(List<Guid>), string name = default(string), bool? isDeleted = default(bool?), List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parameterKeyIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "parameterKeyIds", parameterKeyIds));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (projectIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "projectIds", projectIds));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ParameterGroupApiResult>>("/api/v2/parameters/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersGroupsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence parameter key in system  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        [Obsolete]
        public bool ApiV2ParametersKeyNameNameExistsGet(string name)
        {
            TestIT.ApiClient.Client.ApiResponse<bool> localVarResponse = ApiV2ParametersKeyNameNameExistsGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence parameter key in system  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<bool> ApiV2ParametersKeyNameNameExistsGetWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'name' when calling ParametersApi->ApiV2ParametersKeyNameNameExistsGet");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIT.ApiClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/parameters/key/name/{name}/exists", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeyNameNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence parameter key in system  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<bool> ApiV2ParametersKeyNameNameExistsGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<bool> localVarResponse = await ApiV2ParametersKeyNameNameExistsGetWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence parameter key in system  Use case  User sets name of parameter key  User runs method execution  System search parameter key  System returns the flag for the existence of the parameter key in the system
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<bool>> ApiV2ParametersKeyNameNameExistsGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'name' when calling ParametersApi->ApiV2ParametersKeyNameNameExistsGet");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIT.ApiClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/parameters/key/name/{name}/exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeyNameNameExistsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameter key values  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <returns>List&lt;string&gt;</returns>
        [Obsolete]
        public List<string> ApiV2ParametersKeyValuesGet(string key)
        {
            TestIT.ApiClient.Client.ApiResponse<List<string>> localVarResponse = ApiV2ParametersKeyValuesGetWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameter key values  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<string>> ApiV2ParametersKeyValuesGetWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'key' when calling ParametersApi->ApiV2ParametersKeyValuesGet");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", TestIT.ApiClient.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/api/v2/parameters/{key}/values", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeyValuesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameter key values  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<string>> ApiV2ParametersKeyValuesGetAsync(string key, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<string>> localVarResponse = await ApiV2ParametersKeyValuesGetWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameter key values  Use case  User sets parameter key (string format)  User runs method execution  System search parameter values using the key  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Parameter key (string format)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<string>>> ApiV2ParametersKeyValuesGetWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'key' when calling ParametersApi->ApiV2ParametersKeyValuesGet");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", TestIT.ApiClient.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/api/v2/parameters/{key}/values", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeyValuesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameter keys  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        [Obsolete]
        public List<string> ApiV2ParametersKeysGet(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.ApiResponse<List<string>> localVarResponse = ApiV2ParametersKeysGetWithHttpInfo(projectIds, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameter keys  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<string>> ApiV2ParametersKeysGetWithHttpInfo(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (projectIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "projectIds", projectIds));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/api/v2/parameters/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameter keys  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<string>> ApiV2ParametersKeysGetAsync(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<string>> localVarResponse = await ApiV2ParametersKeysGetWithHttpInfoAsync(projectIds, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameter keys  Use case  User runs method execution  System search all parameter keys  System returns parameter keys
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds"> (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<string>>> ApiV2ParametersKeysGetWithHttpInfoAsync(List<Guid?> projectIds = default(List<Guid?>), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (projectIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "projectIds", projectIds));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/api/v2/parameters/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for parameters as group 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public List<ParameterGroupApiResult> ApiV2ParametersSearchGroupsPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> localVarResponse = ApiV2ParametersSearchGroupsPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, parameterGroupsFilterApiModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for parameters as group 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> ApiV2ParametersSearchGroupsPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = parameterGroupsFilterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ParameterGroupApiResult>>("/api/v2/parameters/search/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersSearchGroupsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for parameters as group 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterGroupApiResult&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ParameterGroupApiResult>> ApiV2ParametersSearchGroupsPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>> localVarResponse = await ApiV2ParametersSearchGroupsPostWithHttpInfoAsync(skip, take, orderBy, searchField, searchValue, parameterGroupsFilterApiModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for parameters as group 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parameterGroupsFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterGroupApiResult&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ParameterGroupApiResult>>> ApiV2ParametersSearchGroupsPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParameterGroupsFilterApiModel parameterGroupsFilterApiModel = default(ParameterGroupsFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = parameterGroupsFilterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ParameterGroupApiResult>>("/api/v2/parameters/search/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersSearchGroupsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for parameters 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public List<ParameterApiResult> ApiV2ParametersSearchPost(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = ApiV2ParametersSearchPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, parametersFilterApiModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for parameters 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> ApiV2ParametersSearchPostWithHttpInfo(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = parametersFilterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ParameterApiResult>>("/api/v2/parameters/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for parameters 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ParameterApiResult>> ApiV2ParametersSearchPostAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = await ApiV2ParametersSearchPostWithHttpInfoAsync(skip, take, orderBy, searchField, searchValue, parametersFilterApiModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for parameters 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="parametersFilterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>>> ApiV2ParametersSearchPostWithHttpInfoAsync(int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ParametersFilterApiModel parametersFilterApiModel = default(ParametersFilterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = parametersFilterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ParameterApiResult>>("/api/v2/parameters/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ParametersSearchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create parameter  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ParameterApiResult</returns>
        [Obsolete]
        public ParameterApiResult CreateParameter(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel))
        {
            TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> localVarResponse = CreateParameterWithHttpInfo(createParameterApiModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create parameter  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of ParameterApiResult</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> CreateParameterWithHttpInfo(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ParameterApiResult>("/api/v2/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create parameter  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResult</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ParameterApiResult> CreateParameterAsync(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> localVarResponse = await CreateParameterWithHttpInfoAsync(createParameterApiModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create parameter  Use case  User sets parameter model (listed in the request example)  User runs method execution  System creates parameter  System returns parameter model
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResult)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<ParameterApiResult>> CreateParameterWithHttpInfoAsync(CreateParameterApiModel createParameterApiModel = default(CreateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ParameterApiResult>("/api/v2/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameter by name Deletes parameter and all it&#39;s values
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteByName(string name)
        {
            DeleteByNameWithHttpInfo(name);
        }

        /// <summary>
        /// Delete parameter by name Deletes parameter and all it&#39;s values
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<Object> DeleteByNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'name' when calling ParametersApi->DeleteByName");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIT.ApiClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/parameters/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameter by name Deletes parameter and all it&#39;s values
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteByNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete parameter by name Deletes parameter and all it&#39;s values
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> DeleteByNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'name' when calling ParametersApi->DeleteByName");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", TestIT.ApiClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/parameters/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameters by parameter key identifier Deletes parameter and all it&#39;s values by parameter key identifier
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteByParameterKeyId(Guid keyId)
        {
            DeleteByParameterKeyIdWithHttpInfo(keyId);
        }

        /// <summary>
        /// Delete parameters by parameter key identifier Deletes parameter and all it&#39;s values by parameter key identifier
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<Object> DeleteByParameterKeyIdWithHttpInfo(Guid keyId)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("keyId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/parameters/keyId/{keyId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteByParameterKeyId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameters by parameter key identifier Deletes parameter and all it&#39;s values by parameter key identifier
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteByParameterKeyIdAsync(Guid keyId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteByParameterKeyIdWithHttpInfoAsync(keyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete parameters by parameter key identifier Deletes parameter and all it&#39;s values by parameter key identifier
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId">Identifier of the parameter key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> DeleteByParameterKeyIdWithHttpInfoAsync(Guid keyId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("keyId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/parameters/keyId/{keyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteByParameterKeyId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameter  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteParameter(Guid id)
        {
            DeleteParameterWithHttpInfo(id);
        }

        /// <summary>
        /// Delete parameter  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<Object> DeleteParameterWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/parameters/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete parameter  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteParameterAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteParameterWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete parameter  Use case  User sets parameter internal (guid format) identifier  System search and delete parameter  System returns deleted parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> DeleteParameterWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/parameters/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameters  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public List<ParameterApiResult> GetAllParameters(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = GetAllParametersWithHttpInfo(isDeleted, skip, take, orderBy, searchField, searchValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameters  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <returns>ApiResponse of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> GetAllParametersWithHttpInfo(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ParameterApiResult>>("/api/v2/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all parameters  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParameterApiResult&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ParameterApiResult>> GetAllParametersAsync(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>> localVarResponse = await GetAllParametersWithHttpInfoAsync(isDeleted, skip, take, orderBy, searchField, searchValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all parameters  Use case  [Optional] User sets isDeleted field value  [Optional] If User sets isDeleted field value as true, System search all deleted parameters  [Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  If User did not set isDeleted field value, System search all parameters  System returns array of all found parameters(listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDeleted">If result must consist of only actual/deleted parameters (optional)</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParameterApiResult&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ParameterApiResult>>> GetAllParametersWithHttpInfoAsync(bool? isDeleted = default(bool?), int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ParameterApiResult>>("/api/v2/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameter by ID  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ParameterApiResult</returns>
        [Obsolete]
        public ParameterApiResult GetParameterById(Guid id)
        {
            TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> localVarResponse = GetParameterByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameter by ID  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <returns>ApiResponse of ParameterApiResult</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> GetParameterByIdWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ParameterApiResult>("/api/v2/parameters/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParameterById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameter by ID  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResult</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ParameterApiResult> GetParameterByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<ParameterApiResult> localVarResponse = await GetParameterByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameter by ID  Use case  User sets parameter internal (guid format) identifier  User runs method execution  System search parameter using the identifier  System returns parameter
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Parameter internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResult)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<ParameterApiResult>> GetParameterByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ParameterApiResult>("/api/v2/parameters/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParameterById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update parameter  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        public void UpdateParameter(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel))
        {
            UpdateParameterWithHttpInfo(updateParameterApiModel);
        }

        /// <summary>
        /// Update parameter  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<Object> UpdateParameterWithHttpInfo(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update parameter  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task UpdateParameterAsync(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateParameterWithHttpInfoAsync(updateParameterApiModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update parameter  Use case  User sets parameter updated properties(listed in the request example)  User runs method execution  System updated parameter using updated properties  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateParameterApiModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> UpdateParameterWithHttpInfoAsync(UpdateParameterApiModel updateParameterApiModel = default(UpdateParameterApiModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateParameterApiModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParameter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
