/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIT.ApiClient.Client;
using TestIT.ApiClient.Model;

namespace TestIT.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectAttributesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>CustomAttributeModel</returns>
        CustomAttributeModel CreateProjectsAttribute(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel));

        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        ApiResponse<CustomAttributeModel> CreateProjectsAttributeWithHttpInfo(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel));
        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns></returns>
        void DeleteProjectsAttribute(string projectId, Guid attributeId);

        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectsAttributeWithHttpInfo(string projectId, Guid attributeId);
        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>CustomAttributeModel</returns>
        CustomAttributeModel GetAttributeByProjectId(string projectId, Guid attributeId);

        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        ApiResponse<CustomAttributeModel> GetAttributeByProjectIdWithHttpInfo(string projectId, Guid attributeId);
        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        List<CustomAttributeModel> GetAttributesByProjectId(string projectId, DeletionState? isDeleted = default(DeletionState?));

        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        ApiResponse<List<CustomAttributeModel>> GetAttributesByProjectIdWithHttpInfo(string projectId, DeletionState? isDeleted = default(DeletionState?));
        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        List<CustomAttributeGetModel> SearchAttributesInProject(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));

        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        ApiResponse<List<CustomAttributeGetModel>> SearchAttributesInProjectWithHttpInfo(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel));
        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns></returns>
        void UpdateProjectsAttribute(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel));

        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProjectsAttributeWithHttpInfo(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectAttributesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        System.Threading.Tasks.Task<CustomAttributeModel> CreateProjectsAttributeAsync(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomAttributeModel>> CreateProjectsAttributeWithHttpInfoAsync(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectsAttributeAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectsAttributeWithHttpInfoAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        System.Threading.Tasks.Task<CustomAttributeModel> GetAttributeByProjectIdAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get project attribute
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomAttributeModel>> GetAttributeByProjectIdWithHttpInfoAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeModel>> GetAttributesByProjectIdAsync(string projectId, DeletionState? isDeleted = default(DeletionState?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get project attributes
        /// </summary>
        /// <remarks>
        ///   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeModel>>> GetAttributesByProjectIdWithHttpInfoAsync(string projectId, DeletionState? isDeleted = default(DeletionState?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchAttributesInProjectAsync(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for attributes used in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomAttributeGetModel>>> SearchAttributesInProjectWithHttpInfoAsync(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectsAttributeAsync(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit attribute of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectsAttributeWithHttpInfoAsync(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectAttributesApi : IProjectAttributesApiSync, IProjectAttributesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectAttributesApi : IDisposable, IProjectAttributesApi
    {
        private TestIT.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProjectAttributesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProjectAttributesApi(string basePath)
        {
            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProjectAttributesApi(TestIT.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectAttributesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectAttributesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectAttributesApi(HttpClient client, TestIT.ApiClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProjectAttributesApi(TestIT.ApiClient.Client.ISynchronousClient client, TestIT.ApiClient.Client.IAsynchronousClient asyncClient, TestIT.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIT.ApiClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIT.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIT.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIT.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIT.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create project attribute   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>CustomAttributeModel</returns>
        public CustomAttributeModel CreateProjectsAttribute(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel))
        {
            TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> localVarResponse = CreateProjectsAttributeWithHttpInfo(projectId, customAttributePostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project attribute   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        public TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> CreateProjectsAttributeWithHttpInfo(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->CreateProjectsAttribute");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = customAttributePostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomAttributeModel>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project attribute   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        public async System.Threading.Tasks.Task<CustomAttributeModel> CreateProjectsAttributeAsync(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> localVarResponse = await CreateProjectsAttributeWithHttpInfoAsync(projectId, customAttributePostModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project attribute   Use case    User sets attribute parameters (listed in request example) and runs method execution    System search project    System creates attribute and relates it to the project    System returns project attribute properties (example listed in response parameters)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="customAttributePostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel>> CreateProjectsAttributeWithHttpInfoAsync(string projectId, CustomAttributePostModel customAttributePostModel = default(CustomAttributePostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->CreateProjectsAttribute");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = customAttributePostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomAttributeModel>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project attribute   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns></returns>
        public void DeleteProjectsAttribute(string projectId, Guid attributeId)
        {
            DeleteProjectsAttributeWithHttpInfo(projectId, attributeId);
        }

        /// <summary>
        /// Delete project attribute   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> DeleteProjectsAttributeWithHttpInfo(string projectId, Guid attributeId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->DeleteProjectsAttribute");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/projects/{projectId}/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project attribute   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectsAttributeAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteProjectsAttributeWithHttpInfoAsync(projectId, attributeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete project attribute   Use case    User sets project identifier and runs method execution    User sets attribute identifier    User runs method execution    System search project    System search and delete attribute    System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> DeleteProjectsAttributeWithHttpInfoAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->DeleteProjectsAttribute");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/projects/{projectId}/attributes/{attributeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attribute   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>CustomAttributeModel</returns>
        public CustomAttributeModel GetAttributeByProjectId(string projectId, Guid attributeId)
        {
            TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> localVarResponse = GetAttributeByProjectIdWithHttpInfo(projectId, attributeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attribute   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <returns>ApiResponse of CustomAttributeModel</returns>
        public TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> GetAttributeByProjectIdWithHttpInfo(string projectId, Guid attributeId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->GetAttributeByProjectId");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomAttributeModel>("/api/v2/projects/{projectId}/attributes/{attributeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attribute   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomAttributeModel</returns>
        public async System.Threading.Tasks.Task<CustomAttributeModel> GetAttributeByProjectIdAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel> localVarResponse = await GetAttributeByProjectIdWithHttpInfoAsync(projectId, attributeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attribute   Use case    User sets project internal or global identifier    User sets project attribute identifier    User runs method execution    System search project    System search project attribute    System returns project attribute (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="attributeId">Project attribute internal (UUID) or global (integer) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomAttributeModel)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<CustomAttributeModel>> GetAttributeByProjectIdWithHttpInfoAsync(string projectId, Guid attributeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->GetAttributeByProjectId");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attributeId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(attributeId)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomAttributeModel>("/api/v2/projects/{projectId}/attributes/{attributeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attributes   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>List&lt;CustomAttributeModel&gt;</returns>
        public List<CustomAttributeModel> GetAttributesByProjectId(string projectId, DeletionState? isDeleted = default(DeletionState?))
        {
            TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = GetAttributesByProjectIdWithHttpInfo(projectId, isDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attributes   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeModel&gt;</returns>
        public TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeModel>> GetAttributesByProjectIdWithHttpInfo(string projectId, DeletionState? isDeleted = default(DeletionState?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->GetAttributesByProjectId");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CustomAttributeModel>>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributesByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project attributes   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeModel>> GetAttributesByProjectIdAsync(string projectId, DeletionState? isDeleted = default(DeletionState?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeModel>> localVarResponse = await GetAttributesByProjectIdWithHttpInfoAsync(projectId, isDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project attributes   Use case    User sets project internal or global identifier    [Optional] User sets isDeleted field value    User runs method execution    System search project    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted    [Optional] If User did not set isDeleted field value, System search all attributes related to project    System returns array of found attributes (listed in response model)
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="isDeleted"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeModel>>> GetAttributesByProjectIdWithHttpInfoAsync(string projectId, DeletionState? isDeleted = default(DeletionState?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->GetAttributesByProjectId");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isDeleted", isDeleted));
            }

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomAttributeModel>>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributesByProjectId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>List&lt;CustomAttributeGetModel&gt;</returns>
        public List<CustomAttributeGetModel> SearchAttributesInProject(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = SearchAttributesInProjectWithHttpInfo(projectId, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomAttributeGetModel&gt;</returns>
        public TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeGetModel>> SearchAttributesInProjectWithHttpInfo(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->SearchAttributesInProject");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CustomAttributeGetModel>>("/api/v2/projects/{projectId}/attributes/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomAttributeGetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomAttributeGetModel>> SearchAttributesInProjectAsync(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeGetModel>> localVarResponse = await SearchAttributesInProjectWithHttpInfoAsync(projectId, skip, take, orderBy, searchField, searchValue, projectAttributesFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for attributes used in the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="projectAttributesFilterModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomAttributeGetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<CustomAttributeGetModel>>> SearchAttributesInProjectWithHttpInfoAsync(string projectId, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), ProjectAttributesFilterModel projectAttributesFilterModel = default(ProjectAttributesFilterModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->SearchAttributesInProject");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = projectAttributesFilterModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CustomAttributeGetModel>>("/api/v2/projects/{projectId}/attributes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAttributesInProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns></returns>
        public void UpdateProjectsAttribute(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel))
        {
            UpdateProjectsAttributeWithHttpInfo(projectId, customAttributePutModel);
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> UpdateProjectsAttributeWithHttpInfo(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->UpdateProjectsAttribute");

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = customAttributePutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectsAttributeAsync(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateProjectsAttributeWithHttpInfoAsync(projectId, customAttributePutModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit attribute of the project 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Unique or global project ID</param>
        /// <param name="customAttributePutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> UpdateProjectsAttributeWithHttpInfoAsync(string projectId, CustomAttributePutModel customAttributePutModel = default(CustomAttributePutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIT.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectAttributesApi->UpdateProjectsAttribute");


            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIT.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = customAttributePutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/projects/{projectId}/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectsAttribute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
