/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIT.ApiClient.Client;
using TestIT.ApiClient.Model;

namespace TestIT.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestSuitesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add test-points to test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <returns></returns>
        void AddTestPointsToTestSuite(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));

        /// <summary>
        /// Add test-points to test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddTestPointsToTestSuiteWithHttpInfo(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel));
        /// <summary>
        /// Patch test suite
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <returns></returns>
        void ApiV2TestSuitesIdPatch(Guid id, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Patch test suite
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestSuitesIdPatchWithHttpInfo(Guid id, List<Operation> operation = default(List<Operation>));
        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <returns></returns>
        void ApiV2TestSuitesIdRefreshPost(Guid id);

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestSuitesIdRefreshPostWithHttpInfo(Guid id);
        /// <summary>
        /// Set work items for test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void ApiV2TestSuitesIdWorkItemsPost(Guid id, List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// Set work items for test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestSuitesIdWorkItemsPostWithHttpInfo(Guid id, List<Guid> requestBody = default(List<Guid>));
        /// <summary>
        /// Create test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <returns>TestSuiteV2GetModel</returns>
        TestSuiteV2GetModel ApiV2TestSuitesPost(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel));

        /// <summary>
        /// Create test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <returns>ApiResponse of TestSuiteV2GetModel</returns>
        ApiResponse<TestSuiteV2GetModel> ApiV2TestSuitesPostWithHttpInfo(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel));
        /// <summary>
        /// Edit test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <returns></returns>
        void ApiV2TestSuitesPut(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel));

        /// <summary>
        /// Edit test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2TestSuitesPutWithHttpInfo(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel));
        /// <summary>
        /// Delete TestSuite
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns></returns>
        void DeleteTestSuite(Guid id);

        /// <summary>
        /// Delete TestSuite
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTestSuiteWithHttpInfo(Guid id);
        /// <summary>
        /// Get Configurations By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;ConfigurationModel&gt;</returns>
        List<ConfigurationModel> GetConfigurationsByTestSuiteId(Guid id);

        /// <summary>
        /// Get Configurations By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;ConfigurationModel&gt;</returns>
        ApiResponse<List<ConfigurationModel>> GetConfigurationsByTestSuiteIdWithHttpInfo(Guid id);
        /// <summary>
        /// Get TestPoints By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;TestPointByTestSuiteModel&gt;</returns>
        List<TestPointByTestSuiteModel> GetTestPointsById(Guid id);

        /// <summary>
        /// Get TestPoints By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;TestPointByTestSuiteModel&gt;</returns>
        ApiResponse<List<TestPointByTestSuiteModel>> GetTestPointsByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Get TestResults By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;TestResultV2ShortModel&gt;</returns>
        List<TestResultV2ShortModel> GetTestResultsById(Guid id);

        /// <summary>
        /// Get TestResults By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;TestResultV2ShortModel&gt;</returns>
        ApiResponse<List<TestResultV2ShortModel>> GetTestResultsByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Get TestSuite by Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>TestSuiteV2GetModel</returns>
        TestSuiteV2GetModel GetTestSuiteById(Guid id);

        /// <summary>
        /// Get TestSuite by Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of TestSuiteV2GetModel</returns>
        ApiResponse<TestSuiteV2GetModel> GetTestSuiteByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Search WorkItems
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        List<WorkItemShortModel> SearchWorkItems(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel));

        /// <summary>
        /// Search WorkItems
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        ApiResponse<List<WorkItemShortModel>> SearchWorkItemsWithHttpInfo(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel));
        /// <summary>
        /// Set Configurations By TestSuite Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <returns></returns>
        void SetConfigurationsByTestSuiteId(Guid id, List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// Set Configurations By TestSuite Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetConfigurationsByTestSuiteIdWithHttpInfo(Guid id, List<Guid> requestBody = default(List<Guid>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestSuitesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add test-points to test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddTestPointsToTestSuiteAsync(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add test-points to test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTestPointsToTestSuiteWithHttpInfoAsync(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Patch test suite
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestSuitesIdPatchAsync(Guid id, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Patch test suite
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestSuitesIdPatchWithHttpInfoAsync(Guid id, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestSuitesIdRefreshPostAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestSuitesIdRefreshPostWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set work items for test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestSuitesIdWorkItemsPostAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set work items for test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestSuitesIdWorkItemsPostWithHttpInfoAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestSuiteV2GetModel</returns>
        System.Threading.Tasks.Task<TestSuiteV2GetModel> ApiV2TestSuitesPostAsync(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestSuiteV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestSuiteV2GetModel>> ApiV2TestSuitesPostWithHttpInfoAsync(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2TestSuitesPutAsync(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit test suite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2TestSuitesPutWithHttpInfoAsync(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete TestSuite
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTestSuiteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete TestSuite
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTestSuiteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Configurations By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConfigurationModel&gt;</returns>
        System.Threading.Tasks.Task<List<ConfigurationModel>> GetConfigurationsByTestSuiteIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Configurations By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConfigurationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConfigurationModel>>> GetConfigurationsByTestSuiteIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get TestPoints By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPointByTestSuiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestPointByTestSuiteModel>> GetTestPointsByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get TestPoints By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPointByTestSuiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestPointByTestSuiteModel>>> GetTestPointsByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get TestResults By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestResultV2ShortModel&gt;</returns>
        System.Threading.Tasks.Task<List<TestResultV2ShortModel>> GetTestResultsByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get TestResults By Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestResultV2ShortModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestResultV2ShortModel>>> GetTestResultsByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get TestSuite by Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestSuiteV2GetModel</returns>
        System.Threading.Tasks.Task<TestSuiteV2GetModel> GetTestSuiteByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get TestSuite by Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestSuiteV2GetModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestSuiteV2GetModel>> GetTestSuiteByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search WorkItems
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<WorkItemShortModel>> SearchWorkItemsAsync(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search WorkItems
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<WorkItemShortModel>>> SearchWorkItemsWithHttpInfoAsync(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Configurations By TestSuite Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetConfigurationsByTestSuiteIdAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Configurations By TestSuite Id
        /// </summary>
        /// <remarks>
        ///  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </remarks>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetConfigurationsByTestSuiteIdWithHttpInfoAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestSuitesApi : ITestSuitesApiSync, ITestSuitesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TestSuitesApi : IDisposable, ITestSuitesApi
    {
        private TestIT.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TestSuitesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TestSuitesApi(string basePath)
        {
            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TestSuitesApi(TestIT.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestSuitesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestSuitesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIT.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TestSuitesApi(HttpClient client, TestIT.ApiClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIT.ApiClient.Client.Configuration.MergeConfigurations(
                TestIT.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIT.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuitesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TestSuitesApi(TestIT.ApiClient.Client.ISynchronousClient client, TestIT.ApiClient.Client.IAsynchronousClient asyncClient, TestIT.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIT.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIT.ApiClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIT.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIT.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIT.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIT.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add test-points to test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <returns></returns>
        public void AddTestPointsToTestSuite(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            AddTestPointsToTestSuiteWithHttpInfo(id, workItemSelectModel);
        }

        /// <summary>
        /// Add test-points to test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> AddTestPointsToTestSuiteWithHttpInfo(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testSuites/{id}/test-points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTestPointsToTestSuite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add test-points to test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddTestPointsToTestSuiteAsync(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddTestPointsToTestSuiteWithHttpInfoAsync(id, workItemSelectModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add test-points to test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal identifier</param>
        /// <param name="workItemSelectModel">Filter object to retrieve work items for test-suite&#39;s project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> AddTestPointsToTestSuiteWithHttpInfoAsync(Guid id, WorkItemSelectModel workItemSelectModel = default(WorkItemSelectModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workItemSelectModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testSuites/{id}/test-points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTestPointsToTestSuite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch test suite See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <returns></returns>
        public void ApiV2TestSuitesIdPatch(Guid id, List<Operation> operation = default(List<Operation>))
        {
            ApiV2TestSuitesIdPatchWithHttpInfo(id, operation);
        }

        /// <summary>
        /// Patch test suite See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> ApiV2TestSuitesIdPatchWithHttpInfo(Guid id, List<Operation> operation = default(List<Operation>))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch test suite See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestSuitesIdPatchAsync(Guid id, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV2TestSuitesIdPatchWithHttpInfoAsync(id, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Patch test suite See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> ApiV2TestSuitesIdPatchWithHttpInfoAsync(Guid id, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <returns></returns>
        public void ApiV2TestSuitesIdRefreshPost(Guid id)
        {
            ApiV2TestSuitesIdRefreshPostWithHttpInfo(id);
        }

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> ApiV2TestSuitesIdRefreshPostWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testSuites/{id}/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdRefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestSuitesIdRefreshPostAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV2TestSuitesIdRefreshPostWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Refresh test suite. Only dynamic test suites are supported by this method 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test Suite internal (UUID) identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> ApiV2TestSuitesIdRefreshPostWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testSuites/{id}/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdRefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set work items for test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void ApiV2TestSuitesIdWorkItemsPost(Guid id, List<Guid> requestBody = default(List<Guid>))
        {
            ApiV2TestSuitesIdWorkItemsPostWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// Set work items for test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> ApiV2TestSuitesIdWorkItemsPostWithHttpInfo(Guid id, List<Guid> requestBody = default(List<Guid>))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testSuites/{id}/workItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdWorkItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set work items for test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestSuitesIdWorkItemsPostAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV2TestSuitesIdWorkItemsPostWithHttpInfoAsync(id, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set work items for test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique ID of the test suite</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> ApiV2TestSuitesIdWorkItemsPostWithHttpInfoAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testSuites/{id}/workItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesIdWorkItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <returns>TestSuiteV2GetModel</returns>
        public TestSuiteV2GetModel ApiV2TestSuitesPost(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel))
        {
            TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> localVarResponse = ApiV2TestSuitesPostWithHttpInfo(testSuiteV2PostModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <returns>ApiResponse of TestSuiteV2GetModel</returns>
        public TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> ApiV2TestSuitesPostWithHttpInfo(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSuiteV2PostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestSuiteV2GetModel>("/api/v2/testSuites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestSuiteV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestSuiteV2GetModel> ApiV2TestSuitesPostAsync(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> localVarResponse = await ApiV2TestSuitesPostWithHttpInfoAsync(testSuiteV2PostModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PostModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestSuiteV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel>> ApiV2TestSuitesPostWithHttpInfoAsync(TestSuiteV2PostModel testSuiteV2PostModel = default(TestSuiteV2PostModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSuiteV2PostModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestSuiteV2GetModel>("/api/v2/testSuites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <returns></returns>
        public void ApiV2TestSuitesPut(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel))
        {
            ApiV2TestSuitesPutWithHttpInfo(testSuiteV2PutModel);
        }

        /// <summary>
        /// Edit test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> ApiV2TestSuitesPutWithHttpInfo(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSuiteV2PutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v2/testSuites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2TestSuitesPutAsync(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV2TestSuitesPutWithHttpInfoAsync(testSuiteV2PutModel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit test suite 
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSuiteV2PutModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> ApiV2TestSuitesPutWithHttpInfoAsync(TestSuiteV2PutModel testSuiteV2PutModel = default(TestSuiteV2PutModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSuiteV2PutModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v2/testSuites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2TestSuitesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete TestSuite  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns></returns>
        public void DeleteTestSuite(Guid id)
        {
            DeleteTestSuiteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete TestSuite  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> DeleteTestSuiteWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTestSuite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete TestSuite  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTestSuiteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteTestSuiteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete TestSuite  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System deletes test suite  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> DeleteTestSuiteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTestSuite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurations By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;ConfigurationModel&gt;</returns>
        public List<ConfigurationModel> GetConfigurationsByTestSuiteId(Guid id)
        {
            TestIT.ApiClient.Client.ApiResponse<List<ConfigurationModel>> localVarResponse = GetConfigurationsByTestSuiteIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurations By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;ConfigurationModel&gt;</returns>
        public TestIT.ApiClient.Client.ApiResponse<List<ConfigurationModel>> GetConfigurationsByTestSuiteIdWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConfigurationModel>>("/api/v2/testSuites/{id}/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationsByTestSuiteId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurations By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConfigurationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConfigurationModel>> GetConfigurationsByTestSuiteIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<ConfigurationModel>> localVarResponse = await GetConfigurationsByTestSuiteIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurations By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configurations related to the test points  System returns configurations array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConfigurationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<ConfigurationModel>>> GetConfigurationsByTestSuiteIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConfigurationModel>>("/api/v2/testSuites/{id}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationsByTestSuiteId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestPoints By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;TestPointByTestSuiteModel&gt;</returns>
        public List<TestPointByTestSuiteModel> GetTestPointsById(Guid id)
        {
            TestIT.ApiClient.Client.ApiResponse<List<TestPointByTestSuiteModel>> localVarResponse = GetTestPointsByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestPoints By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;TestPointByTestSuiteModel&gt;</returns>
        public TestIT.ApiClient.Client.ApiResponse<List<TestPointByTestSuiteModel>> GetTestPointsByIdWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestPointByTestSuiteModel>>("/api/v2/testSuites/{id}/testPoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestPointsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestPoints By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestPointByTestSuiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestPointByTestSuiteModel>> GetTestPointsByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<TestPointByTestSuiteModel>> localVarResponse = await GetTestPointsByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestPoints By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System returns test points array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestPointByTestSuiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<TestPointByTestSuiteModel>>> GetTestPointsByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestPointByTestSuiteModel>>("/api/v2/testSuites/{id}/testPoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestPointsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestResults By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>List&lt;TestResultV2ShortModel&gt;</returns>
        public List<TestResultV2ShortModel> GetTestResultsById(Guid id)
        {
            TestIT.ApiClient.Client.ApiResponse<List<TestResultV2ShortModel>> localVarResponse = GetTestResultsByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestResults By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of List&lt;TestResultV2ShortModel&gt;</returns>
        public TestIT.ApiClient.Client.ApiResponse<List<TestResultV2ShortModel>> GetTestResultsByIdWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TestResultV2ShortModel>>("/api/v2/testSuites/{id}/testResults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestResultsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestResults By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TestResultV2ShortModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestResultV2ShortModel>> GetTestResultsByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<TestResultV2ShortModel>> localVarResponse = await GetTestResultsByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestResults By Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search test results related to the test points  System returns test results array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TestResultV2ShortModel&gt;)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<TestResultV2ShortModel>>> GetTestResultsByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TestResultV2ShortModel>>("/api/v2/testSuites/{id}/testResults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestResultsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestSuite by Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>TestSuiteV2GetModel</returns>
        public TestSuiteV2GetModel GetTestSuiteById(Guid id)
        {
            TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> localVarResponse = GetTestSuiteByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestSuite by Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <returns>ApiResponse of TestSuiteV2GetModel</returns>
        public TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> GetTestSuiteByIdWithHttpInfo(Guid id)
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TestSuiteV2GetModel>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestSuiteById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get TestSuite by Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestSuiteV2GetModel</returns>
        public async System.Threading.Tasks.Task<TestSuiteV2GetModel> GetTestSuiteByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel> localVarResponse = await GetTestSuiteByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get TestSuite by Id  Use case  User sets test suite identifier  User runs method execution  System search test suite by identifier  System returns test suite
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestSuiteV2GetModel)</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<TestSuiteV2GetModel>> GetTestSuiteByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TestSuiteV2GetModel>("/api/v2/testSuites/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestSuiteById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search WorkItems  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <returns>List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        public List<WorkItemShortModel> SearchWorkItems(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel))
        {
            TestIT.ApiClient.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = SearchWorkItemsWithHttpInfo(id, skip, take, orderBy, searchField, searchValue, testSuiteWorkItemsSearchModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search WorkItems  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        public TestIT.ApiClient.Client.ApiResponse<List<WorkItemShortModel>> SearchWorkItemsWithHttpInfo(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = testSuiteWorkItemsSearchModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkItemShortModel>>("/api/v2/testSuites/{id}/workItems/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search WorkItems  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkItemShortModel&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<WorkItemShortModel>> SearchWorkItemsAsync(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            TestIT.ApiClient.Client.ApiResponse<List<WorkItemShortModel>> localVarResponse = await SearchWorkItemsWithHttpInfoAsync(id, skip, take, orderBy, searchField, searchValue, testSuiteWorkItemsSearchModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search WorkItems  Use case  User sets test suite identifier  [Optional] User sets filter  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search work items related to the test points  [Optional] User sets filter, system applies filter  System returns work items array
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="skip">Amount of items to be skipped (offset) (optional)</param>
        /// <param name="take">Amount of items to be taken (limit) (optional)</param>
        /// <param name="orderBy">SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)</param>
        /// <param name="searchField">Property name for searching (optional)</param>
        /// <param name="searchValue">Value for searching (optional)</param>
        /// <param name="testSuiteWorkItemsSearchModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkItemShortModel&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<List<WorkItemShortModel>>> SearchWorkItemsWithHttpInfoAsync(Guid id, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string searchField = default(string), string searchValue = default(string), TestSuiteWorkItemsSearchModel testSuiteWorkItemsSearchModel = default(TestSuiteWorkItemsSearchModel), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (searchField != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchField", searchField));
            }
            if (searchValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIT.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "SearchValue", searchValue));
            }
            localVarRequestOptions.Data = testSuiteWorkItemsSearchModel;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkItemShortModel>>("/api/v2/testSuites/{id}/workItems/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Configurations By TestSuite Id  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <returns></returns>
        public void SetConfigurationsByTestSuiteId(Guid id, List<Guid> requestBody = default(List<Guid>))
        {
            SetConfigurationsByTestSuiteIdWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// Set Configurations By TestSuite Id  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TestIT.ApiClient.Client.ApiResponse<Object> SetConfigurationsByTestSuiteIdWithHttpInfo(Guid id, List<Guid> requestBody = default(List<Guid>))
        {
            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/testSuites/{id}/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfigurationsByTestSuiteId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Configurations By TestSuite Id  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetConfigurationsByTestSuiteIdAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetConfigurationsByTestSuiteIdWithHttpInfoAsync(id, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Configurations By TestSuite Id  Use case  User sets test suite identifier  User sets collection of configuration identifiers  User runs method execution  System search test suite by identifier  System search test points related to the test suite  System search configuration  System restores(if exist) or creates test points with listed configuration  System returns no content response
        /// </summary>
        /// <exception cref="TestIT.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Test suite internal (guid format) identifier\&quot;</param>
        /// <param name="requestBody">Collection of configuration identifiers\&quot; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TestIT.ApiClient.Client.ApiResponse<Object>> SetConfigurationsByTestSuiteIdWithHttpInfoAsync(Guid id, List<Guid> requestBody = default(List<Guid>), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            TestIT.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIT.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIT.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIT.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", TestIT.ApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/testSuites/{id}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfigurationsByTestSuiteId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
