/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// CustomAttributeTestPlanProjectRelationPutModel
    /// </summary>
    [DataContract(Name = "CustomAttributeTestPlanProjectRelationPutModel")]
    public partial class CustomAttributeTestPlanProjectRelationPutModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAttributeTestPlanProjectRelationPutModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAttributeTestPlanProjectRelationPutModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAttributeTestPlanProjectRelationPutModel" /> class.
        /// </summary>
        /// <param name="id">Custom attribute internal unique identifier (required).</param>
        /// <param name="isEnabled">Flag that defines if custom attribute is enabled (required).</param>
        /// <param name="isRequired">Flag that defines if custom attribute is required (required).</param>
        public CustomAttributeTestPlanProjectRelationPutModel(Guid id = default(Guid), bool isEnabled = default(bool), bool isRequired = default(bool))
        {
            this.Id = id;
            this.IsEnabled = isEnabled;
            this.IsRequired = isRequired;
        }

        /// <summary>
        /// Custom attribute internal unique identifier
        /// </summary>
        /// <value>Custom attribute internal unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Flag that defines if custom attribute is enabled
        /// </summary>
        /// <value>Flag that defines if custom attribute is enabled</value>
        [DataMember(Name = "isEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Flag that defines if custom attribute is required
        /// </summary>
        /// <value>Flag that defines if custom attribute is required</value>
        [DataMember(Name = "isRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomAttributeTestPlanProjectRelationPutModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
