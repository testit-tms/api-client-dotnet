/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// ProjectShortApiResult
    /// </summary>
    [DataContract(Name = "ProjectShortApiResult")]
    public partial class ProjectShortApiResult : IValidatableObject
    {

        /// <summary>
        /// Type of the project
        /// </summary>
        /// <value>Type of the project</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ProjectType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectShortApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectShortApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectShortApiResult" /> class.
        /// </summary>
        /// <param name="id">Unique ID of project (required).</param>
        /// <param name="isDeleted">Indicates whether the project is deleted (required).</param>
        /// <param name="globalId">Global ID of project (required).</param>
        /// <param name="name">Name of project (required).</param>
        /// <param name="type">Type of the project (required).</param>
        /// <param name="isFavorite">Indicates if the project is marked as favorite (required).</param>
        public ProjectShortApiResult(Guid id = default(Guid), bool isDeleted = default(bool), long globalId = default(long), string name = default(string), ProjectType type = default(ProjectType), bool isFavorite = default(bool))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            this.GlobalId = globalId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectShortApiResult and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.IsFavorite = isFavorite;
        }

        /// <summary>
        /// Unique ID of project
        /// </summary>
        /// <value>Unique ID of project</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Indicates whether the project is deleted
        /// </summary>
        /// <value>Indicates whether the project is deleted</value>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Global ID of project
        /// </summary>
        /// <value>Global ID of project</value>
        [DataMember(Name = "globalId", IsRequired = true, EmitDefaultValue = true)]
        public long GlobalId { get; set; }

        /// <summary>
        /// Name of project
        /// </summary>
        /// <value>Name of project</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the project is marked as favorite
        /// </summary>
        /// <value>Indicates if the project is marked as favorite</value>
        [DataMember(Name = "isFavorite", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectShortApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
