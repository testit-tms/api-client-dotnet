/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// UpdateWorkItemApiModel
    /// </summary>
    [DataContract(Name = "UpdateWorkItemApiModel")]
    public partial class UpdateWorkItemApiModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemStates State { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemPriorityModel Priority { get; set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name = "sourceType", EmitDefaultValue = true)]
        public WorkItemSourceTypeModel? SourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWorkItemApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateWorkItemApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWorkItemApiModel" /> class.
        /// </summary>
        /// <param name="id">Workitem internal identifier (required).</param>
        /// <param name="sectionId">Internal identifier of section where workitem is located (required).</param>
        /// <param name="description">Workitem description.</param>
        /// <param name="state">state (required).</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="steps">Collection of workitem steps (required).</param>
        /// <param name="preconditionSteps">Collection of workitem precondtion steps (required).</param>
        /// <param name="postconditionSteps">Collection of workitem postcondition steps (required).</param>
        /// <param name="duration">Workitem duration in milliseconds (required).</param>
        /// <param name="attributes">Key value pair of custom workitem attributes (required).</param>
        /// <param name="tags">Collection of workitem tags (required).</param>
        /// <param name="links">Collection of workitem links (required).</param>
        /// <param name="name">Workitem name (required).</param>
        /// <param name="attachments">attachments (required).</param>
        /// <param name="iterations">Collection of parameter id sets.</param>
        /// <param name="autoTests">Collection of autotest internal ids.</param>
        public UpdateWorkItemApiModel(Guid id = default(Guid), Guid sectionId = default(Guid), string description = default(string), WorkItemStates state = default(WorkItemStates), WorkItemPriorityModel priority = default(WorkItemPriorityModel), WorkItemSourceTypeModel? sourceType = default(WorkItemSourceTypeModel?), List<UpdateStepApiModel> steps = default(List<UpdateStepApiModel>), List<UpdateStepApiModel> preconditionSteps = default(List<UpdateStepApiModel>), List<UpdateStepApiModel> postconditionSteps = default(List<UpdateStepApiModel>), int duration = default(int), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<TagModel> tags = default(List<TagModel>), List<UpdateLinkApiModel> links = default(List<UpdateLinkApiModel>), string name = default(string), List<AssignAttachmentApiModel> attachments = default(List<AssignAttachmentApiModel>), List<AssignIterationApiModel> iterations = default(List<AssignIterationApiModel>), List<AutoTestIdModel> autoTests = default(List<AutoTestIdModel>))
        {
            this.Id = id;
            this.SectionId = sectionId;
            this.State = state;
            this.Priority = priority;
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new ArgumentNullException("steps is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Steps = steps;
            // to ensure "preconditionSteps" is required (not null)
            if (preconditionSteps == null)
            {
                throw new ArgumentNullException("preconditionSteps is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.PreconditionSteps = preconditionSteps;
            // to ensure "postconditionSteps" is required (not null)
            if (postconditionSteps == null)
            {
                throw new ArgumentNullException("postconditionSteps is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.PostconditionSteps = postconditionSteps;
            this.Duration = duration;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Attributes = attributes;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Tags = tags;
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new ArgumentNullException("links is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Links = links;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Name = name;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for UpdateWorkItemApiModel and cannot be null");
            }
            this.Attachments = attachments;
            this.Description = description;
            this.SourceType = sourceType;
            this.Iterations = iterations;
            this.AutoTests = autoTests;
        }

        /// <summary>
        /// Workitem internal identifier
        /// </summary>
        /// <value>Workitem internal identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Internal identifier of section where workitem is located
        /// </summary>
        /// <value>Internal identifier of section where workitem is located</value>
        [DataMember(Name = "sectionId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SectionId { get; set; }

        /// <summary>
        /// Workitem description
        /// </summary>
        /// <value>Workitem description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Collection of workitem steps
        /// </summary>
        /// <value>Collection of workitem steps</value>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdateStepApiModel> Steps { get; set; }

        /// <summary>
        /// Collection of workitem precondtion steps
        /// </summary>
        /// <value>Collection of workitem precondtion steps</value>
        [DataMember(Name = "preconditionSteps", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdateStepApiModel> PreconditionSteps { get; set; }

        /// <summary>
        /// Collection of workitem postcondition steps
        /// </summary>
        /// <value>Collection of workitem postcondition steps</value>
        [DataMember(Name = "postconditionSteps", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdateStepApiModel> PostconditionSteps { get; set; }

        /// <summary>
        /// Workitem duration in milliseconds
        /// </summary>
        /// <value>Workitem duration in milliseconds</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public int Duration { get; set; }

        /// <summary>
        /// Key value pair of custom workitem attributes
        /// </summary>
        /// <value>Key value pair of custom workitem attributes</value>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Collection of workitem tags
        /// </summary>
        /// <value>Collection of workitem tags</value>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<TagModel> Tags { get; set; }

        /// <summary>
        /// Collection of workitem links
        /// </summary>
        /// <value>Collection of workitem links</value>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdateLinkApiModel> Links { get; set; }

        /// <summary>
        /// Workitem name
        /// </summary>
        /// <value>Workitem name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public List<AssignAttachmentApiModel> Attachments { get; set; }

        /// <summary>
        /// Collection of parameter id sets
        /// </summary>
        /// <value>Collection of parameter id sets</value>
        [DataMember(Name = "iterations", EmitDefaultValue = true)]
        public List<AssignIterationApiModel> Iterations { get; set; }

        /// <summary>
        /// Collection of autotest internal ids
        /// </summary>
        /// <value>Collection of autotest internal ids</value>
        [DataMember(Name = "autoTests", EmitDefaultValue = true)]
        public List<AutoTestIdModel> AutoTests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateWorkItemApiModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  PreconditionSteps: ").Append(PreconditionSteps).Append("\n");
            sb.Append("  PostconditionSteps: ").Append(PostconditionSteps).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Iterations: ").Append(Iterations).Append("\n");
            sb.Append("  AutoTests: ").Append(AutoTests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Duration (int) maximum
            if (this.Duration > (int)86400000)
            {
                yield return new ValidationResult("Invalid value for Duration, must be a value less than or equal to 86400000.", new [] { "Duration" });
            }

            // Duration (int) minimum
            if (this.Duration < (int)0)
            {
                yield return new ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
