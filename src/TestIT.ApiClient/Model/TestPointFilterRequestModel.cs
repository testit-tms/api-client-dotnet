/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPointFilterRequestModel
    /// </summary>
    [DataContract(Name = "TestPointFilterRequestModel")]
    public partial class TestPointFilterRequestModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointFilterRequestModel" /> class.
        /// </summary>
        /// <param name="testPlanIds">Specifies a test point test plan IDS to search for.</param>
        /// <param name="testSuiteIds">Specifies a test point test suite IDs to search for.</param>
        /// <param name="workItemGlobalIds">Specifies a test point work item global IDs to search for.</param>
        /// <param name="workItemMedianDuration">Specifies a test point work item median duration range to search for.</param>
        /// <param name="workItemIsDeleted">Specifies a test point work item is deleted flag to search for.</param>
        /// <param name="statuses">Specifies a test point statuses to search for.</param>
        /// <param name="statusCodes">Specifies a test point status codes to search for.</param>
        /// <param name="priorities">Specifies a test point priorities to search for.</param>
        /// <param name="sourceTypes">Specifies a test point source types to search for.</param>
        /// <param name="isAutomated">Specifies a test point automation status to search for.</param>
        /// <param name="name">Specifies a test point name to search for.</param>
        /// <param name="configurationIds">Specifies a test point configuration IDs to search for.</param>
        /// <param name="testerIds">Specifies a test point assigned user IDs to search for.</param>
        /// <param name="duration">Specifies a test point range of duration to search for.</param>
        /// <param name="sectionIds">Specifies a test point work item section IDs to search for.</param>
        /// <param name="createdDate">Specifies a test point range of creation date to search for.</param>
        /// <param name="createdByIds">Specifies a test point creator IDs to search for.</param>
        /// <param name="modifiedDate">Specifies a test point range of last modification date to search for.</param>
        /// <param name="modifiedByIds">Specifies a test point last editor IDs to search for.</param>
        /// <param name="tags">Specifies a test point tags to search for.</param>
        /// <param name="attributes">Specifies a test point attributes to search for.</param>
        /// <param name="workItemCreatedDate">Specifies a work item range of creation date to search for.</param>
        /// <param name="workItemCreatedByIds">Specifies a work item creator IDs to search for.</param>
        /// <param name="workItemModifiedDate">Specifies a work item range of last modification date to search for.</param>
        /// <param name="workItemModifiedByIds">Specifies a work item last editor IDs to search for.</param>
        public TestPointFilterRequestModel(List<Guid> testPlanIds = default(List<Guid>), List<Guid> testSuiteIds = default(List<Guid>), List<long> workItemGlobalIds = default(List<long>), Int64RangeSelectorModel workItemMedianDuration = default(Int64RangeSelectorModel), bool? workItemIsDeleted = default(bool?), List<TestPointStatus> statuses = default(List<TestPointStatus>), List<string> statusCodes = default(List<string>), List<WorkItemPriorityModel> priorities = default(List<WorkItemPriorityModel>), List<WorkItemSourceTypeModel> sourceTypes = default(List<WorkItemSourceTypeModel>), bool? isAutomated = default(bool?), string name = default(string), List<Guid> configurationIds = default(List<Guid>), List<Guid?> testerIds = default(List<Guid?>), Int64RangeSelectorModel duration = default(Int64RangeSelectorModel), List<Guid> sectionIds = default(List<Guid>), DateTimeRangeSelectorModel createdDate = default(DateTimeRangeSelectorModel), List<Guid> createdByIds = default(List<Guid>), DateTimeRangeSelectorModel modifiedDate = default(DateTimeRangeSelectorModel), List<Guid> modifiedByIds = default(List<Guid>), List<string> tags = default(List<string>), Dictionary<string, List<string>> attributes = default(Dictionary<string, List<string>>), DateTimeRangeSelectorModel workItemCreatedDate = default(DateTimeRangeSelectorModel), List<Guid> workItemCreatedByIds = default(List<Guid>), DateTimeRangeSelectorModel workItemModifiedDate = default(DateTimeRangeSelectorModel), List<Guid> workItemModifiedByIds = default(List<Guid>))
        {
            this.TestPlanIds = testPlanIds;
            this.TestSuiteIds = testSuiteIds;
            this.WorkItemGlobalIds = workItemGlobalIds;
            this.WorkItemMedianDuration = workItemMedianDuration;
            this.WorkItemIsDeleted = workItemIsDeleted;
            this.Statuses = statuses;
            this.StatusCodes = statusCodes;
            this.Priorities = priorities;
            this.SourceTypes = sourceTypes;
            this.IsAutomated = isAutomated;
            this.Name = name;
            this.ConfigurationIds = configurationIds;
            this.TesterIds = testerIds;
            this.Duration = duration;
            this.SectionIds = sectionIds;
            this.CreatedDate = createdDate;
            this.CreatedByIds = createdByIds;
            this.ModifiedDate = modifiedDate;
            this.ModifiedByIds = modifiedByIds;
            this.Tags = tags;
            this.Attributes = attributes;
            this.WorkItemCreatedDate = workItemCreatedDate;
            this.WorkItemCreatedByIds = workItemCreatedByIds;
            this.WorkItemModifiedDate = workItemModifiedDate;
            this.WorkItemModifiedByIds = workItemModifiedByIds;
        }

        /// <summary>
        /// Specifies a test point test plan IDS to search for
        /// </summary>
        /// <value>Specifies a test point test plan IDS to search for</value>
        [DataMember(Name = "testPlanIds", EmitDefaultValue = true)]
        public List<Guid> TestPlanIds { get; set; }

        /// <summary>
        /// Specifies a test point test suite IDs to search for
        /// </summary>
        /// <value>Specifies a test point test suite IDs to search for</value>
        [DataMember(Name = "testSuiteIds", EmitDefaultValue = true)]
        public List<Guid> TestSuiteIds { get; set; }

        /// <summary>
        /// Specifies a test point work item global IDs to search for
        /// </summary>
        /// <value>Specifies a test point work item global IDs to search for</value>
        [DataMember(Name = "workItemGlobalIds", EmitDefaultValue = true)]
        public List<long> WorkItemGlobalIds { get; set; }

        /// <summary>
        /// Specifies a test point work item median duration range to search for
        /// </summary>
        /// <value>Specifies a test point work item median duration range to search for</value>
        [DataMember(Name = "workItemMedianDuration", EmitDefaultValue = true)]
        public Int64RangeSelectorModel WorkItemMedianDuration { get; set; }

        /// <summary>
        /// Specifies a test point work item is deleted flag to search for
        /// </summary>
        /// <value>Specifies a test point work item is deleted flag to search for</value>
        [DataMember(Name = "workItemIsDeleted", EmitDefaultValue = true)]
        public bool? WorkItemIsDeleted { get; set; }

        /// <summary>
        /// Specifies a test point statuses to search for
        /// </summary>
        /// <value>Specifies a test point statuses to search for</value>
        [DataMember(Name = "statuses", EmitDefaultValue = true)]
        [Obsolete]
        public List<TestPointStatus> Statuses { get; set; }

        /// <summary>
        /// Specifies a test point status codes to search for
        /// </summary>
        /// <value>Specifies a test point status codes to search for</value>
        [DataMember(Name = "statusCodes", EmitDefaultValue = true)]
        public List<string> StatusCodes { get; set; }

        /// <summary>
        /// Specifies a test point priorities to search for
        /// </summary>
        /// <value>Specifies a test point priorities to search for</value>
        [DataMember(Name = "priorities", EmitDefaultValue = true)]
        public List<WorkItemPriorityModel> Priorities { get; set; }

        /// <summary>
        /// Specifies a test point source types to search for
        /// </summary>
        /// <value>Specifies a test point source types to search for</value>
        [DataMember(Name = "sourceTypes", EmitDefaultValue = true)]
        public List<WorkItemSourceTypeModel> SourceTypes { get; set; }

        /// <summary>
        /// Specifies a test point automation status to search for
        /// </summary>
        /// <value>Specifies a test point automation status to search for</value>
        [DataMember(Name = "isAutomated", EmitDefaultValue = true)]
        public bool? IsAutomated { get; set; }

        /// <summary>
        /// Specifies a test point name to search for
        /// </summary>
        /// <value>Specifies a test point name to search for</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies a test point configuration IDs to search for
        /// </summary>
        /// <value>Specifies a test point configuration IDs to search for</value>
        [DataMember(Name = "configurationIds", EmitDefaultValue = true)]
        public List<Guid> ConfigurationIds { get; set; }

        /// <summary>
        /// Specifies a test point assigned user IDs to search for
        /// </summary>
        /// <value>Specifies a test point assigned user IDs to search for</value>
        [DataMember(Name = "testerIds", EmitDefaultValue = true)]
        public List<Guid?> TesterIds { get; set; }

        /// <summary>
        /// Specifies a test point range of duration to search for
        /// </summary>
        /// <value>Specifies a test point range of duration to search for</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public Int64RangeSelectorModel Duration { get; set; }

        /// <summary>
        /// Specifies a test point work item section IDs to search for
        /// </summary>
        /// <value>Specifies a test point work item section IDs to search for</value>
        [DataMember(Name = "sectionIds", EmitDefaultValue = true)]
        public List<Guid> SectionIds { get; set; }

        /// <summary>
        /// Specifies a test point range of creation date to search for
        /// </summary>
        /// <value>Specifies a test point range of creation date to search for</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CreatedDate { get; set; }

        /// <summary>
        /// Specifies a test point creator IDs to search for
        /// </summary>
        /// <value>Specifies a test point creator IDs to search for</value>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Specifies a test point range of last modification date to search for
        /// </summary>
        /// <value>Specifies a test point range of last modification date to search for</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel ModifiedDate { get; set; }

        /// <summary>
        /// Specifies a test point last editor IDs to search for
        /// </summary>
        /// <value>Specifies a test point last editor IDs to search for</value>
        [DataMember(Name = "modifiedByIds", EmitDefaultValue = true)]
        public List<Guid> ModifiedByIds { get; set; }

        /// <summary>
        /// Specifies a test point tags to search for
        /// </summary>
        /// <value>Specifies a test point tags to search for</value>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Specifies a test point attributes to search for
        /// </summary>
        /// <value>Specifies a test point attributes to search for</value>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> Attributes { get; set; }

        /// <summary>
        /// Specifies a work item range of creation date to search for
        /// </summary>
        /// <value>Specifies a work item range of creation date to search for</value>
        [DataMember(Name = "workItemCreatedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel WorkItemCreatedDate { get; set; }

        /// <summary>
        /// Specifies a work item creator IDs to search for
        /// </summary>
        /// <value>Specifies a work item creator IDs to search for</value>
        [DataMember(Name = "workItemCreatedByIds", EmitDefaultValue = true)]
        public List<Guid> WorkItemCreatedByIds { get; set; }

        /// <summary>
        /// Specifies a work item range of last modification date to search for
        /// </summary>
        /// <value>Specifies a work item range of last modification date to search for</value>
        [DataMember(Name = "workItemModifiedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel WorkItemModifiedDate { get; set; }

        /// <summary>
        /// Specifies a work item last editor IDs to search for
        /// </summary>
        /// <value>Specifies a work item last editor IDs to search for</value>
        [DataMember(Name = "workItemModifiedByIds", EmitDefaultValue = true)]
        public List<Guid> WorkItemModifiedByIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPointFilterRequestModel {\n");
            sb.Append("  TestPlanIds: ").Append(TestPlanIds).Append("\n");
            sb.Append("  TestSuiteIds: ").Append(TestSuiteIds).Append("\n");
            sb.Append("  WorkItemGlobalIds: ").Append(WorkItemGlobalIds).Append("\n");
            sb.Append("  WorkItemMedianDuration: ").Append(WorkItemMedianDuration).Append("\n");
            sb.Append("  WorkItemIsDeleted: ").Append(WorkItemIsDeleted).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  StatusCodes: ").Append(StatusCodes).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("  SourceTypes: ").Append(SourceTypes).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConfigurationIds: ").Append(ConfigurationIds).Append("\n");
            sb.Append("  TesterIds: ").Append(TesterIds).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  SectionIds: ").Append(SectionIds).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedByIds: ").Append(ModifiedByIds).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  WorkItemCreatedDate: ").Append(WorkItemCreatedDate).Append("\n");
            sb.Append("  WorkItemCreatedByIds: ").Append(WorkItemCreatedByIds).Append("\n");
            sb.Append("  WorkItemModifiedDate: ").Append(WorkItemModifiedDate).Append("\n");
            sb.Append("  WorkItemModifiedByIds: ").Append(WorkItemModifiedByIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
