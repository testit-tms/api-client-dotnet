/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// Page
    /// </summary>
    [DataContract(Name = "Page")]
    public partial class Page : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Page" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Page() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Page" /> class.
        /// </summary>
        /// <param name="skip">skip (required).</param>
        /// <param name="take">take (required).</param>
        public Page(int skip = default(int), int take = default(int))
        {
            this.Skip = skip;
            this.Take = take;
        }

        /// <summary>
        /// Gets or Sets Skip
        /// </summary>
        [DataMember(Name = "skip", IsRequired = true, EmitDefaultValue = true)]
        public int Skip { get; set; }

        /// <summary>
        /// Gets or Sets Take
        /// </summary>
        [DataMember(Name = "take", IsRequired = true, EmitDefaultValue = true)]
        public int Take { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Page {\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Take: ").Append(Take).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Skip (int) maximum
            if (this.Skip > (int)2147483647)
            {
                yield return new ValidationResult("Invalid value for Skip, must be a value less than or equal to 2147483647.", new [] { "Skip" });
            }

            // Skip (int) minimum
            if (this.Skip < (int)0)
            {
                yield return new ValidationResult("Invalid value for Skip, must be a value greater than or equal to 0.", new [] { "Skip" });
            }

            // Take (int) maximum
            if (this.Take > (int)2147483647)
            {
                yield return new ValidationResult("Invalid value for Take, must be a value less than or equal to 2147483647.", new [] { "Take" });
            }

            // Take (int) minimum
            if (this.Take < (int)1)
            {
                yield return new ValidationResult("Invalid value for Take, must be a value greater than or equal to 1.", new [] { "Take" });
            }

            yield break;
        }
    }

}
