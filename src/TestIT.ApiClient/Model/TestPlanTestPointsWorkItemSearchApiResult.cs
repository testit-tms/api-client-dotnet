/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPlanTestPointsWorkItemSearchApiResult
    /// </summary>
    [DataContract(Name = "TestPlanTestPointsWorkItemSearchApiResult")]
    public partial class TestPlanTestPointsWorkItemSearchApiResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemState State { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemPriority Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsWorkItemSearchApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPlanTestPointsWorkItemSearchApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsWorkItemSearchApiResult" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="globalId">globalId (required).</param>
        /// <param name="versionId">versionId (required).</param>
        /// <param name="versionNumber">versionNumber (required).</param>
        /// <param name="medianDuration">medianDuration.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="duration">duration (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="attributes">attributes (required).</param>
        /// <param name="orderRank">orderRank.</param>
        /// <param name="isAutomated">isAutomated (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="section">section (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="modified">modified.</param>
        public TestPlanTestPointsWorkItemSearchApiResult(Guid id = default(Guid), long globalId = default(long), Guid versionId = default(Guid), int versionNumber = default(int), long? medianDuration = default(long?), bool? isDeleted = default(bool?), int duration = default(int), WorkItemState state = default(WorkItemState), List<string> tags = default(List<string>), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), string orderRank = default(string), bool isAutomated = default(bool), string name = default(string), WorkItemPriority priority = default(WorkItemPriority), TestPlanTestPointsSectionSearchApiResult section = default(TestPlanTestPointsSectionSearchApiResult), AuditApiResult created = default(AuditApiResult), AuditApiResult modified = default(AuditApiResult))
        {
            this.Id = id;
            this.GlobalId = globalId;
            this.VersionId = versionId;
            this.VersionNumber = versionNumber;
            this.Duration = duration;
            this.State = state;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for TestPlanTestPointsWorkItemSearchApiResult and cannot be null");
            }
            this.Tags = tags;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for TestPlanTestPointsWorkItemSearchApiResult and cannot be null");
            }
            this.Attributes = attributes;
            this.IsAutomated = isAutomated;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TestPlanTestPointsWorkItemSearchApiResult and cannot be null");
            }
            this.Name = name;
            this.Priority = priority;
            // to ensure "section" is required (not null)
            if (section == null)
            {
                throw new ArgumentNullException("section is a required property for TestPlanTestPointsWorkItemSearchApiResult and cannot be null");
            }
            this.Section = section;
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new ArgumentNullException("created is a required property for TestPlanTestPointsWorkItemSearchApiResult and cannot be null");
            }
            this.Created = created;
            this.MedianDuration = medianDuration;
            this.IsDeleted = isDeleted;
            this.OrderRank = orderRank;
            this.Modified = modified;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets GlobalId
        /// </summary>
        [DataMember(Name = "globalId", IsRequired = true, EmitDefaultValue = true)]
        public long GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name = "versionId", IsRequired = true, EmitDefaultValue = true)]
        public Guid VersionId { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "versionNumber", IsRequired = true, EmitDefaultValue = true)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MedianDuration
        /// </summary>
        [DataMember(Name = "medianDuration", EmitDefaultValue = true)]
        public long? MedianDuration { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets OrderRank
        /// </summary>
        [DataMember(Name = "orderRank", EmitDefaultValue = true)]
        public string OrderRank { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name = "isAutomated", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAutomated { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name = "section", IsRequired = true, EmitDefaultValue = true)]
        public TestPlanTestPointsSectionSearchApiResult Section { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public AuditApiResult Created { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = true)]
        public AuditApiResult Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPlanTestPointsWorkItemSearchApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MedianDuration: ").Append(MedianDuration).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  OrderRank: ").Append(OrderRank).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
