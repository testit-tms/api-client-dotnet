/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WorkItemLinkFilterApiModel
    /// </summary>
    [DataContract(Name = "WorkItemLinkFilterApiModel")]
    public partial class WorkItemLinkFilterApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemLinkFilterApiModel" /> class.
        /// </summary>
        /// <param name="types">types.</param>
        /// <param name="title">title.</param>
        /// <param name="urls">urls.</param>
        /// <param name="onlyWithoutLinks">onlyWithoutLinks.</param>
        public WorkItemLinkFilterApiModel(List<LinkType> types = default(List<LinkType>), string title = default(string), List<string> urls = default(List<string>), bool? onlyWithoutLinks = default(bool?))
        {
            this.Types = types;
            this.Title = title;
            this.Urls = urls;
            this.OnlyWithoutLinks = onlyWithoutLinks;
        }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name = "types", EmitDefaultValue = true)]
        public List<LinkType> Types { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets OnlyWithoutLinks
        /// </summary>
        [DataMember(Name = "onlyWithoutLinks", EmitDefaultValue = true)]
        public bool? OnlyWithoutLinks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemLinkFilterApiModel {\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  OnlyWithoutLinks: ").Append(OnlyWithoutLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
