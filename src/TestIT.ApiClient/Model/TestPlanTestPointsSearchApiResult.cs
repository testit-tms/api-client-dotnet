/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPlanTestPointsSearchApiResult
    /// </summary>
    [DataContract(Name = "TestPlanTestPointsSearchApiResult")]
    public partial class TestPlanTestPointsSearchApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsSearchApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPlanTestPointsSearchApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsSearchApiResult" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="modified">modified.</param>
        /// <param name="status">status (required).</param>
        /// <param name="statusModel">statusModel (required).</param>
        /// <param name="inProgress">inProgress (required).</param>
        /// <param name="varConfiguration">varConfiguration (required).</param>
        /// <param name="tester">tester.</param>
        /// <param name="testSuite">testSuite (required).</param>
        /// <param name="workItem">workItem (required).</param>
        /// <param name="parameters">parameters (required).</param>
        /// <param name="lastTestResult">lastTestResult.</param>
        public TestPlanTestPointsSearchApiResult(Guid id = default(Guid), AuditApiResult created = default(AuditApiResult), AuditApiResult modified = default(AuditApiResult), string status = default(string), TestStatusShortApiResult statusModel = default(TestStatusShortApiResult), bool inProgress = default(bool), ConfigurationShortApiResult varConfiguration = default(ConfigurationShortApiResult), UserNameApiResult tester = default(UserNameApiResult), TestPlanTestPointsTestSuiteSearchApiResult testSuite = default(TestPlanTestPointsTestSuiteSearchApiResult), TestPlanTestPointsWorkItemSearchApiResult workItem = default(TestPlanTestPointsWorkItemSearchApiResult), List<ParameterShortApiResult> parameters = default(List<ParameterShortApiResult>), LastTestResultApiResult lastTestResult = default(LastTestResultApiResult))
        {
            this.Id = id;
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new ArgumentNullException("created is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.Created = created;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.Status = status;
            // to ensure "statusModel" is required (not null)
            if (statusModel == null)
            {
                throw new ArgumentNullException("statusModel is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.StatusModel = statusModel;
            this.InProgress = inProgress;
            // to ensure "varConfiguration" is required (not null)
            if (varConfiguration == null)
            {
                throw new ArgumentNullException("varConfiguration is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.VarConfiguration = varConfiguration;
            // to ensure "testSuite" is required (not null)
            if (testSuite == null)
            {
                throw new ArgumentNullException("testSuite is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.TestSuite = testSuite;
            // to ensure "workItem" is required (not null)
            if (workItem == null)
            {
                throw new ArgumentNullException("workItem is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.WorkItem = workItem;
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters is a required property for TestPlanTestPointsSearchApiResult and cannot be null");
            }
            this.Parameters = parameters;
            this.Modified = modified;
            this.Tester = tester;
            this.LastTestResult = lastTestResult;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public AuditApiResult Created { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = true)]
        public AuditApiResult Modified { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusModel
        /// </summary>
        [DataMember(Name = "statusModel", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusShortApiResult StatusModel { get; set; }

        /// <summary>
        /// Gets or Sets InProgress
        /// </summary>
        [DataMember(Name = "inProgress", IsRequired = true, EmitDefaultValue = true)]
        public bool InProgress { get; set; }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = true)]
        public ConfigurationShortApiResult VarConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Tester
        /// </summary>
        [DataMember(Name = "tester", EmitDefaultValue = true)]
        public UserNameApiResult Tester { get; set; }

        /// <summary>
        /// Gets or Sets TestSuite
        /// </summary>
        [DataMember(Name = "testSuite", IsRequired = true, EmitDefaultValue = true)]
        public TestPlanTestPointsTestSuiteSearchApiResult TestSuite { get; set; }

        /// <summary>
        /// Gets or Sets WorkItem
        /// </summary>
        [DataMember(Name = "workItem", IsRequired = true, EmitDefaultValue = true)]
        public TestPlanTestPointsWorkItemSearchApiResult WorkItem { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = true)]
        public List<ParameterShortApiResult> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets LastTestResult
        /// </summary>
        [DataMember(Name = "lastTestResult", EmitDefaultValue = true)]
        public LastTestResultApiResult LastTestResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPlanTestPointsSearchApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusModel: ").Append(StatusModel).Append("\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Tester: ").Append(Tester).Append("\n");
            sb.Append("  TestSuite: ").Append(TestSuite).Append("\n");
            sb.Append("  WorkItem: ").Append(WorkItem).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  LastTestResult: ").Append(LastTestResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
