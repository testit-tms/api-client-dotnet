/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// UpdateMultipleAttachmentsApiModel
    /// </summary>
    [DataContract(Name = "UpdateMultipleAttachmentsApiModel")]
    public partial class UpdateMultipleAttachmentsApiModel : IEquatable<UpdateMultipleAttachmentsApiModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionUpdate Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMultipleAttachmentsApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateMultipleAttachmentsApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMultipleAttachmentsApiModel" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="attachmentIds">attachmentIds.</param>
        public UpdateMultipleAttachmentsApiModel(ActionUpdate action = default(ActionUpdate), List<Guid> attachmentIds = default(List<Guid>))
        {
            this.Action = action;
            this.AttachmentIds = attachmentIds;
        }

        /// <summary>
        /// Gets or Sets AttachmentIds
        /// </summary>
        [DataMember(Name = "attachmentIds", EmitDefaultValue = true)]
        public List<Guid> AttachmentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateMultipleAttachmentsApiModel {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AttachmentIds: ").Append(AttachmentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateMultipleAttachmentsApiModel);
        }

        /// <summary>
        /// Returns true if UpdateMultipleAttachmentsApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateMultipleAttachmentsApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateMultipleAttachmentsApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.AttachmentIds == input.AttachmentIds ||
                    this.AttachmentIds != null &&
                    input.AttachmentIds != null &&
                    this.AttachmentIds.SequenceEqual(input.AttachmentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.AttachmentIds != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
