/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// SearchTestRunsApiModel
    /// </summary>
    [DataContract(Name = "SearchTestRunsApiModel")]
    public partial class SearchTestRunsApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchTestRunsApiModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="states">states.</param>
        /// <param name="statusCodes">statusCodes.</param>
        /// <param name="startedDate">startedDate.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="createdByIds">createdByIds.</param>
        /// <param name="modifiedByIds">modifiedByIds.</param>
        public SearchTestRunsApiModel(string name = default(string), List<TestRunState> states = default(List<TestRunState>), List<string> statusCodes = default(List<string>), DateTimeRangeSelectorModel startedDate = default(DateTimeRangeSelectorModel), DateTimeRangeSelectorModel completedDate = default(DateTimeRangeSelectorModel), List<Guid> createdByIds = default(List<Guid>), List<Guid> modifiedByIds = default(List<Guid>))
        {
            this.Name = name;
            this.States = states;
            this.StatusCodes = statusCodes;
            this.StartedDate = startedDate;
            this.CompletedDate = completedDate;
            this.CreatedByIds = createdByIds;
            this.ModifiedByIds = modifiedByIds;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        [Obsolete]
        public List<TestRunState> States { get; set; }

        /// <summary>
        /// Gets or Sets StatusCodes
        /// </summary>
        [DataMember(Name = "statusCodes", EmitDefaultValue = true)]
        public List<string> StatusCodes { get; set; }

        /// <summary>
        /// Gets or Sets StartedDate
        /// </summary>
        [DataMember(Name = "startedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel StartedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "completedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByIds
        /// </summary>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByIds
        /// </summary>
        [DataMember(Name = "modifiedByIds", EmitDefaultValue = true)]
        public List<Guid> ModifiedByIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchTestRunsApiModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  StatusCodes: ").Append(StatusCodes).Append("\n");
            sb.Append("  StartedDate: ").Append(StartedDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  ModifiedByIds: ").Append(ModifiedByIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
