/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// ExternalServiceMetadataApiResult
    /// </summary>
    [DataContract(Name = "ExternalServiceMetadataApiResult")]
    public partial class ExternalServiceMetadataApiResult : IValidatableObject
    {

        /// <summary>
        /// The category of the external service
        /// </summary>
        /// <value>The category of the external service</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public ExternalServiceCategoryApiResult Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalServiceMetadataApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalServiceMetadataApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalServiceMetadataApiResult" /> class.
        /// </summary>
        /// <param name="name">The name of the external service (required).</param>
        /// <param name="code">The code of the external service (required).</param>
        /// <param name="iconUrl">The icon URL of the external service (required).</param>
        /// <param name="category">The category of the external service (required).</param>
        public ExternalServiceMetadataApiResult(string name = default(string), string code = default(string), string iconUrl = default(string), ExternalServiceCategoryApiResult category = default(ExternalServiceCategoryApiResult))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ExternalServiceMetadataApiResult and cannot be null");
            }
            this.Name = name;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for ExternalServiceMetadataApiResult and cannot be null");
            }
            this.Code = code;
            // to ensure "iconUrl" is required (not null)
            if (iconUrl == null)
            {
                throw new ArgumentNullException("iconUrl is a required property for ExternalServiceMetadataApiResult and cannot be null");
            }
            this.IconUrl = iconUrl;
            this.Category = category;
        }

        /// <summary>
        /// The name of the external service
        /// </summary>
        /// <value>The name of the external service</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The code of the external service
        /// </summary>
        /// <value>The code of the external service</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The icon URL of the external service
        /// </summary>
        /// <value>The icon URL of the external service</value>
        [DataMember(Name = "iconUrl", IsRequired = true, EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalServiceMetadataApiResult {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
