/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPointSelector
    /// </summary>
    [DataContract(Name = "TestPointSelector")]
    public partial class TestPointSelector : IEquatable<TestPointSelector>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointSelector" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPointSelector() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointSelector" /> class.
        /// </summary>
        /// <param name="configurationId">Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs. (required).</param>
        /// <param name="workItemIds">Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs. (required).</param>
        public TestPointSelector(Guid configurationId = default(Guid), List<Guid> workItemIds = default(List<Guid>))
        {
            this.ConfigurationId = configurationId;
            // to ensure "workItemIds" is required (not null)
            if (workItemIds == null)
            {
                throw new ArgumentNullException("workItemIds is a required property for TestPointSelector and cannot be null");
            }
            this.WorkItemIds = workItemIds;
        }

        /// <summary>
        /// Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.
        /// </summary>
        /// <value>Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.</value>
        [DataMember(Name = "configurationId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConfigurationId { get; set; }

        /// <summary>
        /// Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.
        /// </summary>
        /// <value>Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.</value>
        [DataMember(Name = "workItemIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> WorkItemIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPointSelector {\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  WorkItemIds: ").Append(WorkItemIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestPointSelector);
        }

        /// <summary>
        /// Returns true if TestPointSelector instances are equal
        /// </summary>
        /// <param name="input">Instance of TestPointSelector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestPointSelector input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ConfigurationId == input.ConfigurationId ||
                    (this.ConfigurationId != null &&
                    this.ConfigurationId.Equals(input.ConfigurationId))
                ) &&
                (
                    this.WorkItemIds == input.WorkItemIds ||
                    this.WorkItemIds != null &&
                    input.WorkItemIds != null &&
                    this.WorkItemIds.SequenceEqual(input.WorkItemIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationId.GetHashCode();
                }
                if (this.WorkItemIds != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
