/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// ProjectsFilterModel
    /// </summary>
    [DataContract(Name = "ProjectsFilterModel")]
    public partial class ProjectsFilterModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsFilterModel" /> class.
        /// </summary>
        /// <param name="name">Specifies a project name to search for.</param>
        /// <param name="isFavorite">Specifies a project favorite status to search for.</param>
        /// <param name="isDeleted">Specifies a project deleted status to search for.</param>
        /// <param name="testCasesCount">Specifies a project range of test cases count to search for.</param>
        /// <param name="checklistsCount">Specifies a project range of checklists count to search for.</param>
        /// <param name="sharedStepsCount">Specifies a project range of shared steps count to search for.</param>
        /// <param name="autotestsCount">Specifies a project range of autotests count to search for.</param>
        /// <param name="globalIds">Specifies a project global IDs to search for.</param>
        /// <param name="createdDate">Specifies a project range of creation date to search for.</param>
        /// <param name="createdByIds">Specifies an autotest creator IDs to search for.</param>
        /// <param name="types">Collection of project types to search for.</param>
        public ProjectsFilterModel(string name = default(string), bool? isFavorite = default(bool?), bool? isDeleted = default(bool?), Int32RangeSelectorModel testCasesCount = default(Int32RangeSelectorModel), Int32RangeSelectorModel checklistsCount = default(Int32RangeSelectorModel), Int32RangeSelectorModel sharedStepsCount = default(Int32RangeSelectorModel), Int32RangeSelectorModel autotestsCount = default(Int32RangeSelectorModel), List<long> globalIds = default(List<long>), DateTimeRangeSelectorModel createdDate = default(DateTimeRangeSelectorModel), List<Guid> createdByIds = default(List<Guid>), List<ProjectTypeModel> types = default(List<ProjectTypeModel>))
        {
            this.Name = name;
            this.IsFavorite = isFavorite;
            this.IsDeleted = isDeleted;
            this.TestCasesCount = testCasesCount;
            this.ChecklistsCount = checklistsCount;
            this.SharedStepsCount = sharedStepsCount;
            this.AutotestsCount = autotestsCount;
            this.GlobalIds = globalIds;
            this.CreatedDate = createdDate;
            this.CreatedByIds = createdByIds;
            this.Types = types;
        }

        /// <summary>
        /// Specifies a project name to search for
        /// </summary>
        /// <value>Specifies a project name to search for</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies a project favorite status to search for
        /// </summary>
        /// <value>Specifies a project favorite status to search for</value>
        [DataMember(Name = "isFavorite", EmitDefaultValue = true)]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// Specifies a project deleted status to search for
        /// </summary>
        /// <value>Specifies a project deleted status to search for</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Specifies a project range of test cases count to search for
        /// </summary>
        /// <value>Specifies a project range of test cases count to search for</value>
        [DataMember(Name = "testCasesCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel TestCasesCount { get; set; }

        /// <summary>
        /// Specifies a project range of checklists count to search for
        /// </summary>
        /// <value>Specifies a project range of checklists count to search for</value>
        [DataMember(Name = "checklistsCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel ChecklistsCount { get; set; }

        /// <summary>
        /// Specifies a project range of shared steps count to search for
        /// </summary>
        /// <value>Specifies a project range of shared steps count to search for</value>
        [DataMember(Name = "sharedStepsCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel SharedStepsCount { get; set; }

        /// <summary>
        /// Specifies a project range of autotests count to search for
        /// </summary>
        /// <value>Specifies a project range of autotests count to search for</value>
        [DataMember(Name = "autotestsCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel AutotestsCount { get; set; }

        /// <summary>
        /// Specifies a project global IDs to search for
        /// </summary>
        /// <value>Specifies a project global IDs to search for</value>
        [DataMember(Name = "globalIds", EmitDefaultValue = true)]
        public List<long> GlobalIds { get; set; }

        /// <summary>
        /// Specifies a project range of creation date to search for
        /// </summary>
        /// <value>Specifies a project range of creation date to search for</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CreatedDate { get; set; }

        /// <summary>
        /// Specifies an autotest creator IDs to search for
        /// </summary>
        /// <value>Specifies an autotest creator IDs to search for</value>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Collection of project types to search for
        /// </summary>
        /// <value>Collection of project types to search for</value>
        [DataMember(Name = "types", EmitDefaultValue = true)]
        public List<ProjectTypeModel> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectsFilterModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  TestCasesCount: ").Append(TestCasesCount).Append("\n");
            sb.Append("  ChecklistsCount: ").Append(ChecklistsCount).Append("\n");
            sb.Append("  SharedStepsCount: ").Append(SharedStepsCount).Append("\n");
            sb.Append("  AutotestsCount: ").Append(AutotestsCount).Append("\n");
            sb.Append("  GlobalIds: ").Append(GlobalIds).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
