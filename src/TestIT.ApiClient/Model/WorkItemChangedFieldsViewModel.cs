/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WorkItemChangedFieldsViewModel
    /// </summary>
    [DataContract(Name = "WorkItemChangedFieldsViewModel")]
    public partial class WorkItemChangedFieldsViewModel : IEquatable<WorkItemChangedFieldsViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemChangedFieldsViewModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="isAutomated">isAutomated.</param>
        /// <param name="sectionId">sectionId.</param>
        /// <param name="description">description.</param>
        /// <param name="state">state.</param>
        /// <param name="priority">priority.</param>
        /// <param name="duration">duration.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="steps">steps.</param>
        /// <param name="preconditionSteps">preconditionSteps.</param>
        /// <param name="postconditionSteps">postconditionSteps.</param>
        /// <param name="autoTests">autoTests.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="tags">tags.</param>
        /// <param name="links">links.</param>
        /// <param name="globalId">globalId.</param>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="entityTypeName">entityTypeName.</param>
        public WorkItemChangedFieldsViewModel(StringChangedFieldWithDiffsViewModel name = default(StringChangedFieldWithDiffsViewModel), BooleanChangedFieldViewModel isDeleted = default(BooleanChangedFieldViewModel), GuidChangedFieldViewModel projectId = default(GuidChangedFieldViewModel), BooleanChangedFieldViewModel isAutomated = default(BooleanChangedFieldViewModel), GuidChangedFieldViewModel sectionId = default(GuidChangedFieldViewModel), StringChangedFieldWithDiffsViewModel description = default(StringChangedFieldWithDiffsViewModel), StringChangedFieldViewModel state = default(StringChangedFieldViewModel), StringChangedFieldViewModel priority = default(StringChangedFieldViewModel), Int32ChangedFieldViewModel duration = default(Int32ChangedFieldViewModel), Dictionary<string, WorkItemChangedAttributeViewModel> attributes = default(Dictionary<string, WorkItemChangedAttributeViewModel>), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel steps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel preconditionSteps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel postconditionSteps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), AutoTestChangeViewModelArrayChangedFieldViewModel autoTests = default(AutoTestChangeViewModelArrayChangedFieldViewModel), AttachmentChangeViewModelArrayChangedFieldViewModel attachments = default(AttachmentChangeViewModelArrayChangedFieldViewModel), StringArrayChangedFieldViewModel tags = default(StringArrayChangedFieldViewModel), WorkItemLinkChangeViewModelArrayChangedFieldViewModel links = default(WorkItemLinkChangeViewModelArrayChangedFieldViewModel), Int64ChangedFieldViewModel globalId = default(Int64ChangedFieldViewModel), Int32ChangedFieldViewModel versionNumber = default(Int32ChangedFieldViewModel), StringChangedFieldViewModel entityTypeName = default(StringChangedFieldViewModel))
        {
            this.Name = name;
            this.IsDeleted = isDeleted;
            this.ProjectId = projectId;
            this.IsAutomated = isAutomated;
            this.SectionId = sectionId;
            this.Description = description;
            this.State = state;
            this.Priority = priority;
            this.Duration = duration;
            this.Attributes = attributes;
            this.Steps = steps;
            this.PreconditionSteps = preconditionSteps;
            this.PostconditionSteps = postconditionSteps;
            this.AutoTests = autoTests;
            this.Attachments = attachments;
            this.Tags = tags;
            this.Links = links;
            this.GlobalId = globalId;
            this.VersionNumber = versionNumber;
            this.EntityTypeName = entityTypeName;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public StringChangedFieldWithDiffsViewModel Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public BooleanChangedFieldViewModel IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = true)]
        public GuidChangedFieldViewModel ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name = "isAutomated", EmitDefaultValue = true)]
        public BooleanChangedFieldViewModel IsAutomated { get; set; }

        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [DataMember(Name = "sectionId", EmitDefaultValue = true)]
        public GuidChangedFieldViewModel SectionId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public StringChangedFieldWithDiffsViewModel Description { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public StringChangedFieldViewModel State { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = true)]
        public StringChangedFieldViewModel Priority { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public Int32ChangedFieldViewModel Duration { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public Dictionary<string, WorkItemChangedAttributeViewModel> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel Steps { get; set; }

        /// <summary>
        /// Gets or Sets PreconditionSteps
        /// </summary>
        [DataMember(Name = "preconditionSteps", EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel PreconditionSteps { get; set; }

        /// <summary>
        /// Gets or Sets PostconditionSteps
        /// </summary>
        [DataMember(Name = "postconditionSteps", EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel PostconditionSteps { get; set; }

        /// <summary>
        /// Gets or Sets AutoTests
        /// </summary>
        [DataMember(Name = "autoTests", EmitDefaultValue = true)]
        public AutoTestChangeViewModelArrayChangedFieldViewModel AutoTests { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public AttachmentChangeViewModelArrayChangedFieldViewModel Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public StringArrayChangedFieldViewModel Tags { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public WorkItemLinkChangeViewModelArrayChangedFieldViewModel Links { get; set; }

        /// <summary>
        /// Gets or Sets GlobalId
        /// </summary>
        [DataMember(Name = "globalId", EmitDefaultValue = true)]
        public Int64ChangedFieldViewModel GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "versionNumber", EmitDefaultValue = true)]
        public Int32ChangedFieldViewModel VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets EntityTypeName
        /// </summary>
        [DataMember(Name = "entityTypeName", EmitDefaultValue = true)]
        public StringChangedFieldViewModel EntityTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemChangedFieldsViewModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  PreconditionSteps: ").Append(PreconditionSteps).Append("\n");
            sb.Append("  PostconditionSteps: ").Append(PostconditionSteps).Append("\n");
            sb.Append("  AutoTests: ").Append(AutoTests).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  EntityTypeName: ").Append(EntityTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkItemChangedFieldsViewModel);
        }

        /// <summary>
        /// Returns true if WorkItemChangedFieldsViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkItemChangedFieldsViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkItemChangedFieldsViewModel input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) &&
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) &&
                (
                    this.IsAutomated == input.IsAutomated ||
                    (this.IsAutomated != null &&
                    this.IsAutomated.Equals(input.IsAutomated))
                ) &&
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) &&
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) &&
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) &&
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) &&
                (
                    this.Steps == input.Steps ||
                    (this.Steps != null &&
                    this.Steps.Equals(input.Steps))
                ) &&
                (
                    this.PreconditionSteps == input.PreconditionSteps ||
                    (this.PreconditionSteps != null &&
                    this.PreconditionSteps.Equals(input.PreconditionSteps))
                ) &&
                (
                    this.PostconditionSteps == input.PostconditionSteps ||
                    (this.PostconditionSteps != null &&
                    this.PostconditionSteps.Equals(input.PostconditionSteps))
                ) &&
                (
                    this.AutoTests == input.AutoTests ||
                    (this.AutoTests != null &&
                    this.AutoTests.Equals(input.AutoTests))
                ) &&
                (
                    this.Attachments == input.Attachments ||
                    (this.Attachments != null &&
                    this.Attachments.Equals(input.Attachments))
                ) &&
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) &&
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) &&
                (
                    this.GlobalId == input.GlobalId ||
                    (this.GlobalId != null &&
                    this.GlobalId.Equals(input.GlobalId))
                ) &&
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) &&
                (
                    this.EntityTypeName == input.EntityTypeName ||
                    (this.EntityTypeName != null &&
                    this.EntityTypeName.Equals(input.EntityTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IsDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.IsAutomated != null)
                {
                    hashCode = (hashCode * 59) + this.IsAutomated.GetHashCode();
                }
                if (this.SectionId != null)
                {
                    hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                if (this.PreconditionSteps != null)
                {
                    hashCode = (hashCode * 59) + this.PreconditionSteps.GetHashCode();
                }
                if (this.PostconditionSteps != null)
                {
                    hashCode = (hashCode * 59) + this.PostconditionSteps.GetHashCode();
                }
                if (this.AutoTests != null)
                {
                    hashCode = (hashCode * 59) + this.AutoTests.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.GlobalId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalId.GetHashCode();
                }
                if (this.VersionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VersionNumber.GetHashCode();
                }
                if (this.EntityTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypeName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
