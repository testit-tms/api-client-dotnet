/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WorkItemChangedFieldsViewModel
    /// </summary>
    [DataContract(Name = "WorkItemChangedFieldsViewModel")]
    public partial class WorkItemChangedFieldsViewModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemChangedFieldsViewModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkItemChangedFieldsViewModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemChangedFieldsViewModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="isDeleted">isDeleted (required).</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="isAutomated">isAutomated (required).</param>
        /// <param name="sectionId">sectionId (required).</param>
        /// <param name="description">description.</param>
        /// <param name="state">state (required).</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="duration">duration (required).</param>
        /// <param name="attributes">attributes (required).</param>
        /// <param name="steps">steps (required).</param>
        /// <param name="preconditionSteps">preconditionSteps (required).</param>
        /// <param name="postconditionSteps">postconditionSteps (required).</param>
        /// <param name="autoTests">autoTests (required).</param>
        /// <param name="attachments">attachments (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="links">links (required).</param>
        /// <param name="globalId">globalId (required).</param>
        /// <param name="versionNumber">versionNumber (required).</param>
        /// <param name="entityTypeName">entityTypeName (required).</param>
        public WorkItemChangedFieldsViewModel(StringChangedFieldWithDiffsViewModel name = default(StringChangedFieldWithDiffsViewModel), BooleanChangedFieldViewModel isDeleted = default(BooleanChangedFieldViewModel), GuidChangedFieldViewModel projectId = default(GuidChangedFieldViewModel), BooleanChangedFieldViewModel isAutomated = default(BooleanChangedFieldViewModel), GuidChangedFieldViewModel sectionId = default(GuidChangedFieldViewModel), StringChangedFieldWithDiffsViewModel description = default(StringChangedFieldWithDiffsViewModel), StringChangedFieldViewModel state = default(StringChangedFieldViewModel), StringChangedFieldViewModel priority = default(StringChangedFieldViewModel), Int32ChangedFieldViewModel duration = default(Int32ChangedFieldViewModel), Dictionary<string, WorkItemChangedAttributeViewModel> attributes = default(Dictionary<string, WorkItemChangedAttributeViewModel>), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel steps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel preconditionSteps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel postconditionSteps = default(WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel), AutoTestChangeViewModelArrayChangedFieldViewModel autoTests = default(AutoTestChangeViewModelArrayChangedFieldViewModel), AttachmentChangeViewModelArrayChangedFieldViewModel attachments = default(AttachmentChangeViewModelArrayChangedFieldViewModel), StringArrayChangedFieldViewModel tags = default(StringArrayChangedFieldViewModel), WorkItemLinkChangeViewModelArrayChangedFieldViewModel links = default(WorkItemLinkChangeViewModelArrayChangedFieldViewModel), Int64ChangedFieldViewModel globalId = default(Int64ChangedFieldViewModel), Int32ChangedFieldViewModel versionNumber = default(Int32ChangedFieldViewModel), StringChangedFieldViewModel entityTypeName = default(StringChangedFieldViewModel))
        {
            // to ensure "isDeleted" is required (not null)
            if (isDeleted == null)
            {
                throw new ArgumentNullException("isDeleted is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.IsDeleted = isDeleted;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "isAutomated" is required (not null)
            if (isAutomated == null)
            {
                throw new ArgumentNullException("isAutomated is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.IsAutomated = isAutomated;
            // to ensure "sectionId" is required (not null)
            if (sectionId == null)
            {
                throw new ArgumentNullException("sectionId is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.SectionId = sectionId;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.State = state;
            // to ensure "priority" is required (not null)
            if (priority == null)
            {
                throw new ArgumentNullException("priority is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Priority = priority;
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new ArgumentNullException("duration is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Duration = duration;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Attributes = attributes;
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new ArgumentNullException("steps is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Steps = steps;
            // to ensure "preconditionSteps" is required (not null)
            if (preconditionSteps == null)
            {
                throw new ArgumentNullException("preconditionSteps is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.PreconditionSteps = preconditionSteps;
            // to ensure "postconditionSteps" is required (not null)
            if (postconditionSteps == null)
            {
                throw new ArgumentNullException("postconditionSteps is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.PostconditionSteps = postconditionSteps;
            // to ensure "autoTests" is required (not null)
            if (autoTests == null)
            {
                throw new ArgumentNullException("autoTests is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.AutoTests = autoTests;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Attachments = attachments;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Tags = tags;
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new ArgumentNullException("links is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.Links = links;
            // to ensure "globalId" is required (not null)
            if (globalId == null)
            {
                throw new ArgumentNullException("globalId is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.GlobalId = globalId;
            // to ensure "versionNumber" is required (not null)
            if (versionNumber == null)
            {
                throw new ArgumentNullException("versionNumber is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.VersionNumber = versionNumber;
            // to ensure "entityTypeName" is required (not null)
            if (entityTypeName == null)
            {
                throw new ArgumentNullException("entityTypeName is a required property for WorkItemChangedFieldsViewModel and cannot be null");
            }
            this.EntityTypeName = entityTypeName;
            this.Name = name;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public StringChangedFieldWithDiffsViewModel Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public BooleanChangedFieldViewModel IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public GuidChangedFieldViewModel ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name = "isAutomated", IsRequired = true, EmitDefaultValue = true)]
        public BooleanChangedFieldViewModel IsAutomated { get; set; }

        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [DataMember(Name = "sectionId", IsRequired = true, EmitDefaultValue = true)]
        public GuidChangedFieldViewModel SectionId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public StringChangedFieldWithDiffsViewModel Description { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StringChangedFieldViewModel State { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public StringChangedFieldViewModel Priority { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public Int32ChangedFieldViewModel Duration { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, WorkItemChangedAttributeViewModel> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel Steps { get; set; }

        /// <summary>
        /// Gets or Sets PreconditionSteps
        /// </summary>
        [DataMember(Name = "preconditionSteps", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel PreconditionSteps { get; set; }

        /// <summary>
        /// Gets or Sets PostconditionSteps
        /// </summary>
        [DataMember(Name = "postconditionSteps", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel PostconditionSteps { get; set; }

        /// <summary>
        /// Gets or Sets AutoTests
        /// </summary>
        [DataMember(Name = "autoTests", IsRequired = true, EmitDefaultValue = true)]
        public AutoTestChangeViewModelArrayChangedFieldViewModel AutoTests { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public AttachmentChangeViewModelArrayChangedFieldViewModel Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public StringArrayChangedFieldViewModel Tags { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = true)]
        public WorkItemLinkChangeViewModelArrayChangedFieldViewModel Links { get; set; }

        /// <summary>
        /// Gets or Sets GlobalId
        /// </summary>
        [DataMember(Name = "globalId", IsRequired = true, EmitDefaultValue = true)]
        public Int64ChangedFieldViewModel GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "versionNumber", IsRequired = true, EmitDefaultValue = true)]
        public Int32ChangedFieldViewModel VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets EntityTypeName
        /// </summary>
        [DataMember(Name = "entityTypeName", IsRequired = true, EmitDefaultValue = true)]
        public StringChangedFieldViewModel EntityTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemChangedFieldsViewModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  PreconditionSteps: ").Append(PreconditionSteps).Append("\n");
            sb.Append("  PostconditionSteps: ").Append(PostconditionSteps).Append("\n");
            sb.Append("  AutoTests: ").Append(AutoTests).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  EntityTypeName: ").Append(EntityTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
