/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WebhookLogApiResult
    /// </summary>
    [DataContract(Name = "WebhookLogApiResult")]
    public partial class WebhookLogApiResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = true)]
        public WebHookEventType EventType { get; set; }

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name = "requestType", IsRequired = true, EmitDefaultValue = true)]
        public RequestType RequestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookLogApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookLogApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookLogApiResult" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="isDeleted">isDeleted (required).</param>
        /// <param name="webHookName">webHookName (required).</param>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="webHookId">webHookId (required).</param>
        /// <param name="requestBody">requestBody.</param>
        /// <param name="requestMeta">requestMeta.</param>
        /// <param name="responseStatusCode">responseStatusCode (required).</param>
        /// <param name="responseBody">responseBody.</param>
        /// <param name="responseMeta">responseMeta.</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="requestType">requestType (required).</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="createdById">createdById (required).</param>
        /// <param name="modifiedById">modifiedById.</param>
        public WebhookLogApiResult(Guid id = default(Guid), bool isDeleted = default(bool), string webHookName = default(string), WebHookEventType eventType = default(WebHookEventType), Guid webHookId = default(Guid), string requestBody = default(string), string requestMeta = default(string), int responseStatusCode = default(int), string responseBody = default(string), string responseMeta = default(string), Guid projectId = default(Guid), string url = default(string), RequestType requestType = default(RequestType), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            // to ensure "webHookName" is required (not null)
            if (webHookName == null)
            {
                throw new ArgumentNullException("webHookName is a required property for WebhookLogApiResult and cannot be null");
            }
            this.WebHookName = webHookName;
            this.EventType = eventType;
            this.WebHookId = webHookId;
            this.ResponseStatusCode = responseStatusCode;
            this.ProjectId = projectId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for WebhookLogApiResult and cannot be null");
            }
            this.Url = url;
            this.RequestType = requestType;
            this.CreatedById = createdById;
            this.RequestBody = requestBody;
            this.RequestMeta = requestMeta;
            this.ResponseBody = responseBody;
            this.ResponseMeta = responseMeta;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.ModifiedById = modifiedById;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets WebHookName
        /// </summary>
        [DataMember(Name = "webHookName", IsRequired = true, EmitDefaultValue = true)]
        public string WebHookName { get; set; }

        /// <summary>
        /// Gets or Sets WebHookId
        /// </summary>
        [DataMember(Name = "webHookId", IsRequired = true, EmitDefaultValue = true)]
        public Guid WebHookId { get; set; }

        /// <summary>
        /// Gets or Sets RequestBody
        /// </summary>
        [DataMember(Name = "requestBody", EmitDefaultValue = true)]
        public string RequestBody { get; set; }

        /// <summary>
        /// Gets or Sets RequestMeta
        /// </summary>
        [DataMember(Name = "requestMeta", EmitDefaultValue = true)]
        public string RequestMeta { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        [DataMember(Name = "responseStatusCode", IsRequired = true, EmitDefaultValue = true)]
        public int ResponseStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBody
        /// </summary>
        [DataMember(Name = "responseBody", EmitDefaultValue = true)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMeta
        /// </summary>
        [DataMember(Name = "responseMeta", EmitDefaultValue = true)]
        public string ResponseMeta { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedById
        /// </summary>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookLogApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  WebHookName: ").Append(WebHookName).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  WebHookId: ").Append(WebHookId).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  RequestMeta: ").Append(RequestMeta).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseMeta: ").Append(ResponseMeta).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
