/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIt.ApiClient.Client.OpenAPIDateConverter;

namespace TestIt.ApiClient.Model
{
    /// <summary>
    /// TestResultUpdateModel
    /// </summary>
    [DataContract(Name = "TestResultUpdateModel")]
    public partial class TestResultUpdateModel : IEquatable<TestResultUpdateModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = true)]
        public TestResultOutcome? Outcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultUpdateModel" /> class.
        /// </summary>
        /// <param name="failureClassIds">failureClassIds.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="comment">comment.</param>
        /// <param name="links">links.</param>
        /// <param name="stepResults">stepResults.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="durationInMs">durationInMs.</param>
        /// <param name="duration">duration.</param>
        /// <param name="stepComments">stepComments.</param>
        /// <param name="setupResults">setupResults.</param>
        /// <param name="teardownResults">teardownResults.</param>
        /// <param name="message">message.</param>
        /// <param name="trace">trace.</param>
        public TestResultUpdateModel(List<Guid> failureClassIds = default(List<Guid>), TestResultOutcome? outcome = default(TestResultOutcome?), string comment = default(string), List<LinkModel> links = default(List<LinkModel>), List<StepResultModel> stepResults = default(List<StepResultModel>), List<AttachmentPutModel> attachments = default(List<AttachmentPutModel>), long? durationInMs = default(long?), long? duration = default(long?), List<TestResultStepCommentPutModel> stepComments = default(List<TestResultStepCommentPutModel>), List<AttachmentPutModelAutoTestStepResultsModel> setupResults = default(List<AttachmentPutModelAutoTestStepResultsModel>), List<AttachmentPutModelAutoTestStepResultsModel> teardownResults = default(List<AttachmentPutModelAutoTestStepResultsModel>), string message = default(string), string trace = default(string))
        {
            this.FailureClassIds = failureClassIds;
            this.Outcome = outcome;
            this.Comment = comment;
            this.Links = links;
            this.StepResults = stepResults;
            this.Attachments = attachments;
            this.DurationInMs = durationInMs;
            this.Duration = duration;
            this.StepComments = stepComments;
            this.SetupResults = setupResults;
            this.TeardownResults = teardownResults;
            this.Message = message;
            this.Trace = trace;
        }

        /// <summary>
        /// Gets or Sets FailureClassIds
        /// </summary>
        [DataMember(Name = "failureClassIds", EmitDefaultValue = true)]
        public List<Guid> FailureClassIds { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<LinkModel> Links { get; set; }

        /// <summary>
        /// Gets or Sets StepResults
        /// </summary>
        [DataMember(Name = "stepResults", EmitDefaultValue = true)]
        public List<StepResultModel> StepResults { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<AttachmentPutModel> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets DurationInMs
        /// </summary>
        [DataMember(Name = "durationInMs", EmitDefaultValue = true)]
        [Obsolete]
        public long? DurationInMs { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public long? Duration { get; set; }

        /// <summary>
        /// Gets or Sets StepComments
        /// </summary>
        [DataMember(Name = "stepComments", EmitDefaultValue = true)]
        public List<TestResultStepCommentPutModel> StepComments { get; set; }

        /// <summary>
        /// Gets or Sets SetupResults
        /// </summary>
        [DataMember(Name = "setupResults", EmitDefaultValue = true)]
        public List<AttachmentPutModelAutoTestStepResultsModel> SetupResults { get; set; }

        /// <summary>
        /// Gets or Sets TeardownResults
        /// </summary>
        [DataMember(Name = "teardownResults", EmitDefaultValue = true)]
        public List<AttachmentPutModelAutoTestStepResultsModel> TeardownResults { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Trace
        /// </summary>
        [DataMember(Name = "trace", EmitDefaultValue = true)]
        public string Trace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultUpdateModel {\n");
            sb.Append("  FailureClassIds: ").Append(FailureClassIds).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  StepResults: ").Append(StepResults).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  DurationInMs: ").Append(DurationInMs).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StepComments: ").Append(StepComments).Append("\n");
            sb.Append("  SetupResults: ").Append(SetupResults).Append("\n");
            sb.Append("  TeardownResults: ").Append(TeardownResults).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestResultUpdateModel);
        }

        /// <summary>
        /// Returns true if TestResultUpdateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TestResultUpdateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultUpdateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FailureClassIds == input.FailureClassIds ||
                    this.FailureClassIds != null &&
                    input.FailureClassIds != null &&
                    this.FailureClassIds.SequenceEqual(input.FailureClassIds)
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    this.Outcome.Equals(input.Outcome)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.StepResults == input.StepResults ||
                    this.StepResults != null &&
                    input.StepResults != null &&
                    this.StepResults.SequenceEqual(input.StepResults)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.DurationInMs == input.DurationInMs ||
                    (this.DurationInMs != null &&
                    this.DurationInMs.Equals(input.DurationInMs))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.StepComments == input.StepComments ||
                    this.StepComments != null &&
                    input.StepComments != null &&
                    this.StepComments.SequenceEqual(input.StepComments)
                ) && 
                (
                    this.SetupResults == input.SetupResults ||
                    this.SetupResults != null &&
                    input.SetupResults != null &&
                    this.SetupResults.SequenceEqual(input.SetupResults)
                ) && 
                (
                    this.TeardownResults == input.TeardownResults ||
                    this.TeardownResults != null &&
                    input.TeardownResults != null &&
                    this.TeardownResults.SequenceEqual(input.TeardownResults)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Trace == input.Trace ||
                    (this.Trace != null &&
                    this.Trace.Equals(input.Trace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FailureClassIds != null)
                {
                    hashCode = (hashCode * 59) + this.FailureClassIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.StepResults != null)
                {
                    hashCode = (hashCode * 59) + this.StepResults.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.DurationInMs != null)
                {
                    hashCode = (hashCode * 59) + this.DurationInMs.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.StepComments != null)
                {
                    hashCode = (hashCode * 59) + this.StepComments.GetHashCode();
                }
                if (this.SetupResults != null)
                {
                    hashCode = (hashCode * 59) + this.SetupResults.GetHashCode();
                }
                if (this.TeardownResults != null)
                {
                    hashCode = (hashCode * 59) + this.TeardownResults.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Trace != null)
                {
                    hashCode = (hashCode * 59) + this.Trace.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DurationInMs (long?) minimum
            if (this.DurationInMs < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DurationInMs, must be a value greater than or equal to 0.", new [] { "DurationInMs" });
            }

            // Duration (long?) minimum
            if (this.Duration < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            yield break;
        }
    }

}
