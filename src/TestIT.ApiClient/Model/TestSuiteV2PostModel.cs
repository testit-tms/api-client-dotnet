/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestSuiteV2PostModel
    /// </summary>
    [DataContract(Name = "TestSuiteV2PostModel")]
    public partial class TestSuiteV2PostModel : IEquatable<TestSuiteV2PostModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TestSuiteType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteV2PostModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestSuiteV2PostModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteV2PostModel" /> class.
        /// </summary>
        /// <param name="parentId">Unique ID of the parent test suite in hierarchy.</param>
        /// <param name="testPlanId">Unique ID of test plan to which the test suite belongs (required).</param>
        /// <param name="name">Name of the test suite (required).</param>
        /// <param name="type">type.</param>
        /// <param name="saveStructure">Indicates if the test suite retains section tree structure.</param>
        /// <param name="autoRefresh">Indicates if scheduled auto refresh is enabled for the test suite.</param>
        public TestSuiteV2PostModel(Guid? parentId = default(Guid?), Guid testPlanId = default(Guid), string name = default(string), TestSuiteType? type = default(TestSuiteType?), bool? saveStructure = default(bool?), bool? autoRefresh = default(bool?))
        {
            this.TestPlanId = testPlanId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TestSuiteV2PostModel and cannot be null");
            }
            this.Name = name;
            this.ParentId = parentId;
            this.Type = type;
            this.SaveStructure = saveStructure;
            this.AutoRefresh = autoRefresh;
        }

        /// <summary>
        /// Unique ID of the parent test suite in hierarchy
        /// </summary>
        /// <value>Unique ID of the parent test suite in hierarchy</value>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public Guid? ParentId { get; set; }

        /// <summary>
        /// Unique ID of test plan to which the test suite belongs
        /// </summary>
        /// <value>Unique ID of test plan to which the test suite belongs</value>
        [DataMember(Name = "testPlanId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TestPlanId { get; set; }

        /// <summary>
        /// Name of the test suite
        /// </summary>
        /// <value>Name of the test suite</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the test suite retains section tree structure
        /// </summary>
        /// <value>Indicates if the test suite retains section tree structure</value>
        [DataMember(Name = "saveStructure", EmitDefaultValue = true)]
        public bool? SaveStructure { get; set; }

        /// <summary>
        /// Indicates if scheduled auto refresh is enabled for the test suite
        /// </summary>
        /// <value>Indicates if scheduled auto refresh is enabled for the test suite</value>
        [DataMember(Name = "autoRefresh", EmitDefaultValue = true)]
        public bool? AutoRefresh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestSuiteV2PostModel {\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SaveStructure: ").Append(SaveStructure).Append("\n");
            sb.Append("  AutoRefresh: ").Append(AutoRefresh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestSuiteV2PostModel);
        }

        /// <summary>
        /// Returns true if TestSuiteV2PostModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TestSuiteV2PostModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestSuiteV2PostModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.TestPlanId == input.TestPlanId ||
                    (this.TestPlanId != null &&
                    this.TestPlanId.Equals(input.TestPlanId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.SaveStructure == input.SaveStructure ||
                    (this.SaveStructure != null &&
                    this.SaveStructure.Equals(input.SaveStructure))
                ) && 
                (
                    this.AutoRefresh == input.AutoRefresh ||
                    (this.AutoRefresh != null &&
                    this.AutoRefresh.Equals(input.AutoRefresh))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.TestPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.SaveStructure != null)
                {
                    hashCode = (hashCode * 59) + this.SaveStructure.GetHashCode();
                }
                if (this.AutoRefresh != null)
                {
                    hashCode = (hashCode * 59) + this.AutoRefresh.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
