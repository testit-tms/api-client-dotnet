/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPlanLink
    /// </summary>
    [DataContract(Name = "TestPlanLink")]
    public partial class TestPlanLink : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanLink" /> class.
        /// </summary>
        /// <param name="bugLink">bugLink.</param>
        /// <param name="workItemGlobalId">workItemGlobalId.</param>
        /// <param name="workItemName">workItemName.</param>
        /// <param name="configurationName">configurationName.</param>
        /// <param name="createdById">createdById.</param>
        /// <param name="comment">comment.</param>
        /// <param name="info">info.</param>
        public TestPlanLink(LinkModel bugLink = default(LinkModel), long? workItemGlobalId = default(long?), string workItemName = default(string), string configurationName = default(string), Guid? createdById = default(Guid?), string comment = default(string), ExternalLinkModel info = default(ExternalLinkModel))
        {
            this.BugLink = bugLink;
            this.WorkItemGlobalId = workItemGlobalId;
            this.WorkItemName = workItemName;
            this.ConfigurationName = configurationName;
            this.CreatedById = createdById;
            this.Comment = comment;
            this.Info = info;
        }

        /// <summary>
        /// Gets or Sets BugLink
        /// </summary>
        [DataMember(Name = "bugLink", EmitDefaultValue = true)]
        public LinkModel BugLink { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemGlobalId
        /// </summary>
        [DataMember(Name = "workItemGlobalId", EmitDefaultValue = true)]
        public long? WorkItemGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemName
        /// </summary>
        [DataMember(Name = "workItemName", EmitDefaultValue = true)]
        public string WorkItemName { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationName
        /// </summary>
        [DataMember(Name = "configurationName", EmitDefaultValue = true)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", EmitDefaultValue = true)]
        public Guid? CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name = "info", EmitDefaultValue = true)]
        public ExternalLinkModel Info { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPlanLink {\n");
            sb.Append("  BugLink: ").Append(BugLink).Append("\n");
            sb.Append("  WorkItemGlobalId: ").Append(WorkItemGlobalId).Append("\n");
            sb.Append("  WorkItemName: ").Append(WorkItemName).Append("\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
