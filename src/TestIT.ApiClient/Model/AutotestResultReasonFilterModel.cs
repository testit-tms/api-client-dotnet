/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// AutotestResultReasonFilterModel
    /// </summary>
    [DataContract(Name = "AutotestResultReasonFilterModel")]
    public partial class AutotestResultReasonFilterModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutotestResultReasonFilterModel" /> class.
        /// </summary>
        /// <param name="failureCategories">failureCategories.</param>
        /// <param name="name">name.</param>
        /// <param name="regexCount">regexCount.</param>
        /// <param name="isDeleted">isDeleted.</param>
        public AutotestResultReasonFilterModel(List<AvailableFailureCategory> failureCategories = default(List<AvailableFailureCategory>), string name = default(string), Int32RangeSelectorModel regexCount = default(Int32RangeSelectorModel), bool? isDeleted = default(bool?))
        {
            this.FailureCategories = failureCategories;
            this.Name = name;
            this.RegexCount = regexCount;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or Sets FailureCategories
        /// </summary>
        [DataMember(Name = "failureCategories", EmitDefaultValue = true)]
        public List<AvailableFailureCategory> FailureCategories { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegexCount
        /// </summary>
        [DataMember(Name = "regexCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel RegexCount { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutotestResultReasonFilterModel {\n");
            sb.Append("  FailureCategories: ").Append(FailureCategories).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegexCount: ").Append(RegexCount).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
