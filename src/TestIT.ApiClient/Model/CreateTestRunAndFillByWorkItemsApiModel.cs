/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// CreateTestRunAndFillByWorkItemsApiModel
    /// </summary>
    [DataContract(Name = "CreateTestRunAndFillByWorkItemsApiModel")]
    public partial class CreateTestRunAndFillByWorkItemsApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTestRunAndFillByWorkItemsApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTestRunAndFillByWorkItemsApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTestRunAndFillByWorkItemsApiModel" /> class.
        /// </summary>
        /// <param name="projectId">Specifies the GUID of the project, in which a test run will be created. (required).</param>
        /// <param name="testPlanId">Specifies the GUID of the test plan, within which the test run will be created. (required).</param>
        /// <param name="name">Specifies the name of the test run..</param>
        /// <param name="description">Specifies the test run description..</param>
        /// <param name="launchSource">Specifies the test run launch source..</param>
        /// <param name="attachments">Collection of attachment ids to relate to the test run.</param>
        /// <param name="links">Collection of links to relate to the test run.</param>
        /// <param name="configurationIds">Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs. (required).</param>
        /// <param name="workItemIds">Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs. (required).</param>
        public CreateTestRunAndFillByWorkItemsApiModel(Guid projectId = default(Guid), Guid testPlanId = default(Guid), string name = default(string), string description = default(string), string launchSource = default(string), List<AssignAttachmentApiModel> attachments = default(List<AssignAttachmentApiModel>), List<CreateLinkApiModel> links = default(List<CreateLinkApiModel>), List<Guid> configurationIds = default(List<Guid>), List<Guid> workItemIds = default(List<Guid>))
        {
            this.ProjectId = projectId;
            this.TestPlanId = testPlanId;
            // to ensure "configurationIds" is required (not null)
            if (configurationIds == null)
            {
                throw new ArgumentNullException("configurationIds is a required property for CreateTestRunAndFillByWorkItemsApiModel and cannot be null");
            }
            this.ConfigurationIds = configurationIds;
            // to ensure "workItemIds" is required (not null)
            if (workItemIds == null)
            {
                throw new ArgumentNullException("workItemIds is a required property for CreateTestRunAndFillByWorkItemsApiModel and cannot be null");
            }
            this.WorkItemIds = workItemIds;
            this.Name = name;
            this.Description = description;
            this.LaunchSource = launchSource;
            this.Attachments = attachments;
            this.Links = links;
        }

        /// <summary>
        /// Specifies the GUID of the project, in which a test run will be created.
        /// </summary>
        /// <value>Specifies the GUID of the project, in which a test run will be created.</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Specifies the GUID of the test plan, within which the test run will be created.
        /// </summary>
        /// <value>Specifies the GUID of the test plan, within which the test run will be created.</value>
        [DataMember(Name = "testPlanId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TestPlanId { get; set; }

        /// <summary>
        /// Specifies the name of the test run.
        /// </summary>
        /// <value>Specifies the name of the test run.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the test run description.
        /// </summary>
        /// <value>Specifies the test run description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies the test run launch source.
        /// </summary>
        /// <value>Specifies the test run launch source.</value>
        [DataMember(Name = "launchSource", EmitDefaultValue = true)]
        public string LaunchSource { get; set; }

        /// <summary>
        /// Collection of attachment ids to relate to the test run
        /// </summary>
        /// <value>Collection of attachment ids to relate to the test run</value>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<AssignAttachmentApiModel> Attachments { get; set; }

        /// <summary>
        /// Collection of links to relate to the test run
        /// </summary>
        /// <value>Collection of links to relate to the test run</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<CreateLinkApiModel> Links { get; set; }

        /// <summary>
        /// Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.
        /// </summary>
        /// <value>Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.</value>
        [DataMember(Name = "configurationIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> ConfigurationIds { get; set; }

        /// <summary>
        /// Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.
        /// </summary>
        /// <value>Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.</value>
        [DataMember(Name = "workItemIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> WorkItemIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTestRunAndFillByWorkItemsApiModel {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LaunchSource: ").Append(LaunchSource).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ConfigurationIds: ").Append(ConfigurationIds).Append("\n");
            sb.Append("  WorkItemIds: ").Append(WorkItemIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
