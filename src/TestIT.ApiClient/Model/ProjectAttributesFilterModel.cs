/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// ProjectAttributesFilterModel
    /// </summary>
    [DataContract(Name = "ProjectAttributesFilterModel")]
    public partial class ProjectAttributesFilterModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesFilterModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectAttributesFilterModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAttributesFilterModel" /> class.
        /// </summary>
        /// <param name="name">Specifies an attribute name to search for (required).</param>
        /// <param name="isRequired">Specifies an attribute mandatory status to search for.</param>
        /// <param name="isGlobal">Specifies an attribute global status to search for.</param>
        /// <param name="types">Specifies an attribute types to search for (required).</param>
        /// <param name="isEnabled">Specifies an attribute enabled status to search for.</param>
        public ProjectAttributesFilterModel(string name = default(string), bool? isRequired = default(bool?), bool? isGlobal = default(bool?), List<CustomAttributeTypesEnum> types = default(List<CustomAttributeTypesEnum>), bool? isEnabled = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectAttributesFilterModel and cannot be null");
            }
            this.Name = name;
            // to ensure "types" is required (not null)
            if (types == null)
            {
                throw new ArgumentNullException("types is a required property for ProjectAttributesFilterModel and cannot be null");
            }
            this.Types = types;
            this.IsRequired = isRequired;
            this.IsGlobal = isGlobal;
            this.IsEnabled = isEnabled;
        }

        /// <summary>
        /// Specifies an attribute name to search for
        /// </summary>
        /// <value>Specifies an attribute name to search for</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies an attribute mandatory status to search for
        /// </summary>
        /// <value>Specifies an attribute mandatory status to search for</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Specifies an attribute global status to search for
        /// </summary>
        /// <value>Specifies an attribute global status to search for</value>
        [DataMember(Name = "isGlobal", EmitDefaultValue = true)]
        public bool? IsGlobal { get; set; }

        /// <summary>
        /// Specifies an attribute types to search for
        /// </summary>
        /// <value>Specifies an attribute types to search for</value>
        [DataMember(Name = "types", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomAttributeTypesEnum> Types { get; set; }

        /// <summary>
        /// Specifies an attribute enabled status to search for
        /// </summary>
        /// <value>Specifies an attribute enabled status to search for</value>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectAttributesFilterModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
