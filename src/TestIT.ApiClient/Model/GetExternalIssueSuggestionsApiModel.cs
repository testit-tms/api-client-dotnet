/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// GetExternalIssueSuggestionsApiModel
    /// </summary>
    [DataContract(Name = "GetExternalIssueSuggestionsApiModel")]
    public partial class GetExternalIssueSuggestionsApiModel : IValidatableObject
    {

        /// <summary>
        /// Field of external issue metadata to get
        /// </summary>
        /// <value>Field of external issue metadata to get</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public ExternalIssueApiField Field { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExternalIssueSuggestionsApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetExternalIssueSuggestionsApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExternalIssueSuggestionsApiModel" /> class.
        /// </summary>
        /// <param name="field">Field of external issue metadata to get (required).</param>
        /// <param name="projectIds">List of project identifiers where external issue is available.</param>
        /// <param name="inquiry">Inquiry.</param>
        public GetExternalIssueSuggestionsApiModel(ExternalIssueApiField field = default(ExternalIssueApiField), List<Guid> projectIds = default(List<Guid>), Inquiry inquiry = default(Inquiry))
        {
            this.Field = field;
            this.ProjectIds = projectIds;
            this.Inquiry = inquiry;
        }

        /// <summary>
        /// List of project identifiers where external issue is available
        /// </summary>
        /// <value>List of project identifiers where external issue is available</value>
        [DataMember(Name = "projectIds", EmitDefaultValue = true)]
        public List<Guid> ProjectIds { get; set; }

        /// <summary>
        /// Inquiry
        /// </summary>
        /// <value>Inquiry</value>
        [DataMember(Name = "inquiry", EmitDefaultValue = true)]
        public Inquiry Inquiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExternalIssueSuggestionsApiModel {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  Inquiry: ").Append(Inquiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
