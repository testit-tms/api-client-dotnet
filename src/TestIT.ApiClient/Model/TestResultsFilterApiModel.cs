/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultsFilterApiModel
    /// </summary>
    [DataContract(Name = "TestResultsFilterApiModel")]
    public partial class TestResultsFilterApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsFilterApiModel" /> class.
        /// </summary>
        /// <param name="configurationIds">Specifies a test result configuration IDs to search for.</param>
        /// <param name="outcomes">Specifies a test result outcomes to search for.</param>
        /// <param name="statusCodes">Specifies a test result status codes to search for.</param>
        /// <param name="failureCategories">Specifies a test result failure categories to search for.</param>
        /// <param name="varNamespace">Specifies a test result namespace to search for.</param>
        /// <param name="className">Specifies a test result class name to search for.</param>
        /// <param name="autoTestGlobalIds">Specifies an autotest global IDs to search results for.</param>
        /// <param name="name">Specifies an autotest name to search results for.</param>
        /// <param name="createdDate">Specifies a test result creation date and time range to search for.</param>
        /// <param name="modifiedDate">Specifies a test result modified date and time range to search for.</param>
        /// <param name="startedOn">Specifies a test result started on date and time range to search for.</param>
        /// <param name="completedOn">Specifies a test result completed on date and time range to search for.</param>
        /// <param name="duration">Specifies a test result duration range to search for.</param>
        /// <param name="resultReasons">Specifies result reasons for searching test results.</param>
        /// <param name="testRunIds">Specifies a test result test run IDs to search for.</param>
        public TestResultsFilterApiModel(List<Guid> configurationIds = default(List<Guid>), List<TestResultOutcome> outcomes = default(List<TestResultOutcome>), List<string> statusCodes = default(List<string>), List<FailureCategoryModel> failureCategories = default(List<FailureCategoryModel>), string varNamespace = default(string), string className = default(string), List<long> autoTestGlobalIds = default(List<long>), string name = default(string), DateTimeRangeSelectorModel createdDate = default(DateTimeRangeSelectorModel), DateTimeRangeSelectorModel modifiedDate = default(DateTimeRangeSelectorModel), DateTimeRangeSelectorModel startedOn = default(DateTimeRangeSelectorModel), DateTimeRangeSelectorModel completedOn = default(DateTimeRangeSelectorModel), Int64RangeSelectorModel duration = default(Int64RangeSelectorModel), List<string> resultReasons = default(List<string>), List<Guid> testRunIds = default(List<Guid>))
        {
            this.ConfigurationIds = configurationIds;
            this.Outcomes = outcomes;
            this.StatusCodes = statusCodes;
            this.FailureCategories = failureCategories;
            this.Namespace = varNamespace;
            this.ClassName = className;
            this.AutoTestGlobalIds = autoTestGlobalIds;
            this.Name = name;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.StartedOn = startedOn;
            this.CompletedOn = completedOn;
            this.Duration = duration;
            this.ResultReasons = resultReasons;
            this.TestRunIds = testRunIds;
        }

        /// <summary>
        /// Specifies a test result configuration IDs to search for
        /// </summary>
        /// <value>Specifies a test result configuration IDs to search for</value>
        [DataMember(Name = "configurationIds", EmitDefaultValue = true)]
        public List<Guid> ConfigurationIds { get; set; }

        /// <summary>
        /// Specifies a test result outcomes to search for
        /// </summary>
        /// <value>Specifies a test result outcomes to search for</value>
        [DataMember(Name = "outcomes", EmitDefaultValue = true)]
        [Obsolete]
        public List<TestResultOutcome> Outcomes { get; set; }

        /// <summary>
        /// Specifies a test result status codes to search for
        /// </summary>
        /// <value>Specifies a test result status codes to search for</value>
        [DataMember(Name = "statusCodes", EmitDefaultValue = true)]
        public List<string> StatusCodes { get; set; }

        /// <summary>
        /// Specifies a test result failure categories to search for
        /// </summary>
        /// <value>Specifies a test result failure categories to search for</value>
        [DataMember(Name = "failureCategories", EmitDefaultValue = true)]
        public List<FailureCategoryModel> FailureCategories { get; set; }

        /// <summary>
        /// Specifies a test result namespace to search for
        /// </summary>
        /// <value>Specifies a test result namespace to search for</value>
        [DataMember(Name = "namespace", EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Specifies a test result class name to search for
        /// </summary>
        /// <value>Specifies a test result class name to search for</value>
        [DataMember(Name = "className", EmitDefaultValue = true)]
        public string ClassName { get; set; }

        /// <summary>
        /// Specifies an autotest global IDs to search results for
        /// </summary>
        /// <value>Specifies an autotest global IDs to search results for</value>
        [DataMember(Name = "autoTestGlobalIds", EmitDefaultValue = true)]
        public List<long> AutoTestGlobalIds { get; set; }

        /// <summary>
        /// Specifies an autotest name to search results for
        /// </summary>
        /// <value>Specifies an autotest name to search results for</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies a test result creation date and time range to search for
        /// </summary>
        /// <value>Specifies a test result creation date and time range to search for</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CreatedDate { get; set; }

        /// <summary>
        /// Specifies a test result modified date and time range to search for
        /// </summary>
        /// <value>Specifies a test result modified date and time range to search for</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel ModifiedDate { get; set; }

        /// <summary>
        /// Specifies a test result started on date and time range to search for
        /// </summary>
        /// <value>Specifies a test result started on date and time range to search for</value>
        [DataMember(Name = "startedOn", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel StartedOn { get; set; }

        /// <summary>
        /// Specifies a test result completed on date and time range to search for
        /// </summary>
        /// <value>Specifies a test result completed on date and time range to search for</value>
        [DataMember(Name = "completedOn", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CompletedOn { get; set; }

        /// <summary>
        /// Specifies a test result duration range to search for
        /// </summary>
        /// <value>Specifies a test result duration range to search for</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public Int64RangeSelectorModel Duration { get; set; }

        /// <summary>
        /// Specifies result reasons for searching test results
        /// </summary>
        /// <value>Specifies result reasons for searching test results</value>
        [DataMember(Name = "resultReasons", EmitDefaultValue = true)]
        public List<string> ResultReasons { get; set; }

        /// <summary>
        /// Specifies a test result test run IDs to search for
        /// </summary>
        /// <value>Specifies a test result test run IDs to search for</value>
        [DataMember(Name = "testRunIds", EmitDefaultValue = true)]
        public List<Guid> TestRunIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultsFilterApiModel {\n");
            sb.Append("  ConfigurationIds: ").Append(ConfigurationIds).Append("\n");
            sb.Append("  Outcomes: ").Append(Outcomes).Append("\n");
            sb.Append("  StatusCodes: ").Append(StatusCodes).Append("\n");
            sb.Append("  FailureCategories: ").Append(FailureCategories).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  AutoTestGlobalIds: ").Append(AutoTestGlobalIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ResultReasons: ").Append(ResultReasons).Append("\n");
            sb.Append("  TestRunIds: ").Append(TestRunIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 0.", new [] { "Namespace" });
            }

            // ClassName (string) maxLength
            if (this.ClassName != null && this.ClassName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ClassName, length must be less than 255.", new [] { "ClassName" });
            }

            // ClassName (string) minLength
            if (this.ClassName != null && this.ClassName.Length < 0)
            {
                yield return new ValidationResult("Invalid value for ClassName, length must be greater than 0.", new [] { "ClassName" });
            }

            yield break;
        }
    }

}
