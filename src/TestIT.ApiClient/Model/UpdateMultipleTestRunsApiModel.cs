/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// UpdateMultipleTestRunsApiModel
    /// </summary>
    [DataContract(Name = "UpdateMultipleTestRunsApiModel")]
    public partial class UpdateMultipleTestRunsApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMultipleTestRunsApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateMultipleTestRunsApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMultipleTestRunsApiModel" /> class.
        /// </summary>
        /// <param name="selectModel">Test run selection model (required).</param>
        /// <param name="description">Test run description.</param>
        /// <param name="attachmentUpdateScheme">Set of attachment ids.</param>
        /// <param name="linkUpdateScheme">Set of links.</param>
        public UpdateMultipleTestRunsApiModel(TestRunSelectApiModel selectModel = default(TestRunSelectApiModel), string description = default(string), UpdateMultipleAttachmentsApiModel attachmentUpdateScheme = default(UpdateMultipleAttachmentsApiModel), UpdateMultipleLinksApiModel linkUpdateScheme = default(UpdateMultipleLinksApiModel))
        {
            // to ensure "selectModel" is required (not null)
            if (selectModel == null)
            {
                throw new ArgumentNullException("selectModel is a required property for UpdateMultipleTestRunsApiModel and cannot be null");
            }
            this.SelectModel = selectModel;
            this.Description = description;
            this.AttachmentUpdateScheme = attachmentUpdateScheme;
            this.LinkUpdateScheme = linkUpdateScheme;
        }

        /// <summary>
        /// Test run selection model
        /// </summary>
        /// <value>Test run selection model</value>
        [DataMember(Name = "selectModel", IsRequired = true, EmitDefaultValue = true)]
        public TestRunSelectApiModel SelectModel { get; set; }

        /// <summary>
        /// Test run description
        /// </summary>
        /// <value>Test run description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Set of attachment ids
        /// </summary>
        /// <value>Set of attachment ids</value>
        [DataMember(Name = "attachmentUpdateScheme", EmitDefaultValue = true)]
        public UpdateMultipleAttachmentsApiModel AttachmentUpdateScheme { get; set; }

        /// <summary>
        /// Set of links
        /// </summary>
        /// <value>Set of links</value>
        [DataMember(Name = "linkUpdateScheme", EmitDefaultValue = true)]
        public UpdateMultipleLinksApiModel LinkUpdateScheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateMultipleTestRunsApiModel {\n");
            sb.Append("  SelectModel: ").Append(SelectModel).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AttachmentUpdateScheme: ").Append(AttachmentUpdateScheme).Append("\n");
            sb.Append("  LinkUpdateScheme: ").Append(LinkUpdateScheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
