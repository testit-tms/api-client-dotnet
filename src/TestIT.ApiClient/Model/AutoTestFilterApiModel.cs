/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// AutoTestFilterApiModel
    /// </summary>
    [DataContract(Name = "AutoTestFilterApiModel")]
    public partial class AutoTestFilterApiModel : IValidatableObject
    {

        /// <summary>
        /// Specifies an autotest outcome of the last test result to search for
        /// </summary>
        /// <value>Specifies an autotest outcome of the last test result to search for</value>
        [DataMember(Name = "lastTestResultOutcome", EmitDefaultValue = true)]
        public AutotestResultOutcome? LastTestResultOutcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestFilterApiModel" /> class.
        /// </summary>
        /// <param name="projectIds">Specifies an autotest projects IDs to search for.</param>
        /// <param name="externalIds">Specifies an autotest external IDs to search for.</param>
        /// <param name="globalIds">Specifies an autotest global IDs to search for.</param>
        /// <param name="name">Specifies an autotest name to search for.</param>
        /// <param name="isFlaky">Specifies an autotest flaky status to search for.</param>
        /// <param name="mustBeApproved">Specifies an autotest unapproved changes status to search for.</param>
        /// <param name="stabilityPercentage">Specifies an autotest range of stability percentage to search for.</param>
        /// <param name="createdDate">Specifies an autotest range of creation date to search for.</param>
        /// <param name="createdByIds">Specifies an autotest creator IDs to search for.</param>
        /// <param name="modifiedDate">Specifies an autotest range of last modification date to search for.</param>
        /// <param name="modifiedByIds">Specifies an autotest last editor IDs to search for.</param>
        /// <param name="isDeleted">Specifies an autotest deleted status to search for.</param>
        /// <param name="varNamespace">Specifies an autotest namespace to search for.</param>
        /// <param name="isEmptyNamespace">Specifies an autotest namespace name presence status to search for.</param>
        /// <param name="className">Specifies an autotest class name to search for.</param>
        /// <param name="isEmptyClassName">Specifies an autotest class name presence status to search for.</param>
        /// <param name="lastTestResultOutcome">Specifies an autotest outcome of the last test result to search for.</param>
        /// <param name="lastTestResultStatusCodes">Specifies an autotest status codes of the last test result to search for.</param>
        /// <param name="externalKey">Specifies an autotest external key to search for.</param>
        /// <param name="lastTestResultConfigurationIds">Specifies an autotest configuration IDs of the last test result to search for.</param>
        public AutoTestFilterApiModel(List<Guid> projectIds = default(List<Guid>), List<string> externalIds = default(List<string>), List<long> globalIds = default(List<long>), string name = default(string), bool? isFlaky = default(bool?), bool? mustBeApproved = default(bool?), Int64RangeSelectorModel stabilityPercentage = default(Int64RangeSelectorModel), DateTimeRangeSelectorModel createdDate = default(DateTimeRangeSelectorModel), List<Guid> createdByIds = default(List<Guid>), DateTimeRangeSelectorModel modifiedDate = default(DateTimeRangeSelectorModel), List<Guid> modifiedByIds = default(List<Guid>), bool? isDeleted = default(bool?), string varNamespace = default(string), bool? isEmptyNamespace = default(bool?), string className = default(string), bool? isEmptyClassName = default(bool?), AutotestResultOutcome? lastTestResultOutcome = default(AutotestResultOutcome?), List<string> lastTestResultStatusCodes = default(List<string>), string externalKey = default(string), List<Guid> lastTestResultConfigurationIds = default(List<Guid>))
        {
            this.ProjectIds = projectIds;
            this.ExternalIds = externalIds;
            this.GlobalIds = globalIds;
            this.Name = name;
            this.IsFlaky = isFlaky;
            this.MustBeApproved = mustBeApproved;
            this.StabilityPercentage = stabilityPercentage;
            this.CreatedDate = createdDate;
            this.CreatedByIds = createdByIds;
            this.ModifiedDate = modifiedDate;
            this.ModifiedByIds = modifiedByIds;
            this.IsDeleted = isDeleted;
            this.Namespace = varNamespace;
            this.IsEmptyNamespace = isEmptyNamespace;
            this.ClassName = className;
            this.IsEmptyClassName = isEmptyClassName;
            this.LastTestResultOutcome = lastTestResultOutcome;
            this.LastTestResultStatusCodes = lastTestResultStatusCodes;
            this.ExternalKey = externalKey;
            this.LastTestResultConfigurationIds = lastTestResultConfigurationIds;
        }

        /// <summary>
        /// Specifies an autotest projects IDs to search for
        /// </summary>
        /// <value>Specifies an autotest projects IDs to search for</value>
        [DataMember(Name = "projectIds", EmitDefaultValue = true)]
        public List<Guid> ProjectIds { get; set; }

        /// <summary>
        /// Specifies an autotest external IDs to search for
        /// </summary>
        /// <value>Specifies an autotest external IDs to search for</value>
        [DataMember(Name = "externalIds", EmitDefaultValue = true)]
        public List<string> ExternalIds { get; set; }

        /// <summary>
        /// Specifies an autotest global IDs to search for
        /// </summary>
        /// <value>Specifies an autotest global IDs to search for</value>
        [DataMember(Name = "globalIds", EmitDefaultValue = true)]
        public List<long> GlobalIds { get; set; }

        /// <summary>
        /// Specifies an autotest name to search for
        /// </summary>
        /// <value>Specifies an autotest name to search for</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies an autotest flaky status to search for
        /// </summary>
        /// <value>Specifies an autotest flaky status to search for</value>
        [DataMember(Name = "isFlaky", EmitDefaultValue = true)]
        public bool? IsFlaky { get; set; }

        /// <summary>
        /// Specifies an autotest unapproved changes status to search for
        /// </summary>
        /// <value>Specifies an autotest unapproved changes status to search for</value>
        [DataMember(Name = "mustBeApproved", EmitDefaultValue = true)]
        public bool? MustBeApproved { get; set; }

        /// <summary>
        /// Specifies an autotest range of stability percentage to search for
        /// </summary>
        /// <value>Specifies an autotest range of stability percentage to search for</value>
        [DataMember(Name = "stabilityPercentage", EmitDefaultValue = true)]
        public Int64RangeSelectorModel StabilityPercentage { get; set; }

        /// <summary>
        /// Specifies an autotest range of creation date to search for
        /// </summary>
        /// <value>Specifies an autotest range of creation date to search for</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CreatedDate { get; set; }

        /// <summary>
        /// Specifies an autotest creator IDs to search for
        /// </summary>
        /// <value>Specifies an autotest creator IDs to search for</value>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Specifies an autotest range of last modification date to search for
        /// </summary>
        /// <value>Specifies an autotest range of last modification date to search for</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel ModifiedDate { get; set; }

        /// <summary>
        /// Specifies an autotest last editor IDs to search for
        /// </summary>
        /// <value>Specifies an autotest last editor IDs to search for</value>
        [DataMember(Name = "modifiedByIds", EmitDefaultValue = true)]
        public List<Guid> ModifiedByIds { get; set; }

        /// <summary>
        /// Specifies an autotest deleted status to search for
        /// </summary>
        /// <value>Specifies an autotest deleted status to search for</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Specifies an autotest namespace to search for
        /// </summary>
        /// <value>Specifies an autotest namespace to search for</value>
        [DataMember(Name = "namespace", EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Specifies an autotest namespace name presence status to search for
        /// </summary>
        /// <value>Specifies an autotest namespace name presence status to search for</value>
        [DataMember(Name = "isEmptyNamespace", EmitDefaultValue = true)]
        public bool? IsEmptyNamespace { get; set; }

        /// <summary>
        /// Specifies an autotest class name to search for
        /// </summary>
        /// <value>Specifies an autotest class name to search for</value>
        [DataMember(Name = "className", EmitDefaultValue = true)]
        public string ClassName { get; set; }

        /// <summary>
        /// Specifies an autotest class name presence status to search for
        /// </summary>
        /// <value>Specifies an autotest class name presence status to search for</value>
        [DataMember(Name = "isEmptyClassName", EmitDefaultValue = true)]
        public bool? IsEmptyClassName { get; set; }

        /// <summary>
        /// Specifies an autotest status codes of the last test result to search for
        /// </summary>
        /// <value>Specifies an autotest status codes of the last test result to search for</value>
        [DataMember(Name = "lastTestResultStatusCodes", EmitDefaultValue = true)]
        public List<string> LastTestResultStatusCodes { get; set; }

        /// <summary>
        /// Specifies an autotest external key to search for
        /// </summary>
        /// <value>Specifies an autotest external key to search for</value>
        [DataMember(Name = "externalKey", EmitDefaultValue = true)]
        public string ExternalKey { get; set; }

        /// <summary>
        /// Specifies an autotest configuration IDs of the last test result to search for
        /// </summary>
        /// <value>Specifies an autotest configuration IDs of the last test result to search for</value>
        [DataMember(Name = "lastTestResultConfigurationIds", EmitDefaultValue = true)]
        public List<Guid> LastTestResultConfigurationIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoTestFilterApiModel {\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  ExternalIds: ").Append(ExternalIds).Append("\n");
            sb.Append("  GlobalIds: ").Append(GlobalIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsFlaky: ").Append(IsFlaky).Append("\n");
            sb.Append("  MustBeApproved: ").Append(MustBeApproved).Append("\n");
            sb.Append("  StabilityPercentage: ").Append(StabilityPercentage).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedByIds: ").Append(ModifiedByIds).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  IsEmptyNamespace: ").Append(IsEmptyNamespace).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  IsEmptyClassName: ").Append(IsEmptyClassName).Append("\n");
            sb.Append("  LastTestResultOutcome: ").Append(LastTestResultOutcome).Append("\n");
            sb.Append("  LastTestResultStatusCodes: ").Append(LastTestResultStatusCodes).Append("\n");
            sb.Append("  ExternalKey: ").Append(ExternalKey).Append("\n");
            sb.Append("  LastTestResultConfigurationIds: ").Append(LastTestResultConfigurationIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
