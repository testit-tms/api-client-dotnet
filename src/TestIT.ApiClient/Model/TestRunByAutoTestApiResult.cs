/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunByAutoTestApiResult
    /// </summary>
    [DataContract(Name = "TestRunByAutoTestApiResult")]
    public partial class TestRunByAutoTestApiResult : IValidatableObject
    {

        /// <summary>
        /// Test run state
        /// </summary>
        /// <value>Test run state</value>
        [DataMember(Name = "stateName", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public TestRunState StateName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunByAutoTestApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestRunByAutoTestApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunByAutoTestApiResult" /> class.
        /// </summary>
        /// <param name="id">Unique ID of the entity (required).</param>
        /// <param name="isDeleted">Indicates if the entity is deleted (required).</param>
        /// <param name="stateName">Test run state (required).</param>
        /// <param name="status">Test run status (required).</param>
        /// <param name="projectId">Project internal identifier (required).</param>
        /// <param name="testPlanId">Test plan internal identifier.</param>
        /// <param name="name">Test run name.</param>
        /// <param name="description">Test run description.</param>
        public TestRunByAutoTestApiResult(Guid id = default(Guid), bool isDeleted = default(bool), TestRunState stateName = default(TestRunState), TestStatusApiResult status = default(TestStatusApiResult), Guid projectId = default(Guid), Guid? testPlanId = default(Guid?), string name = default(string), string description = default(string))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            this.StateName = stateName;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TestRunByAutoTestApiResult and cannot be null");
            }
            this.Status = status;
            this.ProjectId = projectId;
            this.TestPlanId = testPlanId;
            this.Name = name;
            this.Description = description;
        }

        /// <summary>
        /// Unique ID of the entity
        /// </summary>
        /// <value>Unique ID of the entity</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Indicates if the entity is deleted
        /// </summary>
        /// <value>Indicates if the entity is deleted</value>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Test run status
        /// </summary>
        /// <value>Test run status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusApiResult Status { get; set; }

        /// <summary>
        /// Project internal identifier
        /// </summary>
        /// <value>Project internal identifier</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Test plan internal identifier
        /// </summary>
        /// <value>Test plan internal identifier</value>
        [DataMember(Name = "testPlanId", EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Test run name
        /// </summary>
        /// <value>Test run name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Test run description
        /// </summary>
        /// <value>Test run description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunByAutoTestApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
