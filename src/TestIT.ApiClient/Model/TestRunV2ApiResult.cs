/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunV2ApiResult
    /// </summary>
    [DataContract(Name = "TestRunV2ApiResult")]
    public partial class TestRunV2ApiResult : IEquatable<TestRunV2ApiResult>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StateName
        /// </summary>
        [DataMember(Name = "stateName", IsRequired = true, EmitDefaultValue = true)]
        public TestRunState StateName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunV2ApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestRunV2ApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunV2ApiResult" /> class.
        /// </summary>
        /// <param name="id">Test run unique identifier (required).</param>
        /// <param name="name">Test run name (required).</param>
        /// <param name="description">Test run description.</param>
        /// <param name="launchSource">Test run launch source                Once launch source is specified it cannot be updated..</param>
        /// <param name="startedOn">Date and time of test run start.</param>
        /// <param name="completedOn">Date and time of test run end.</param>
        /// <param name="stateName">stateName (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="projectId">Project unique identifier                This property is used to link test run with project. (required).</param>
        /// <param name="testPlanId">Test plan unique identifier                This property is used to link test run with test plan..</param>
        /// <param name="testResults">Enumeration of test results related to test run.</param>
        /// <param name="createdDate">Date and time of test run creation (required).</param>
        /// <param name="modifiedDate">Date and time of last test run  modification.</param>
        /// <param name="createdById">Unique identifier of user who created test run (required).</param>
        /// <param name="modifiedById">Unique identifier of user who applied last test run  modification.</param>
        /// <param name="createdByUserName">Username of user who created test run.</param>
        /// <param name="attachments">Collection of attachments related to the test run (required).</param>
        /// <param name="links">Collection of links related to the test run (required).</param>
        /// <param name="customParameters">Customers test run parameters.</param>
        /// <param name="webhooks">Enabled webhooks (required).</param>
        /// <param name="runCount">Run count (required).</param>
        public TestRunV2ApiResult(Guid id = default(Guid), string name = default(string), string description = default(string), string launchSource = default(string), DateTime? startedOn = default(DateTime?), DateTime? completedOn = default(DateTime?), TestRunState stateName = default(TestRunState), TestRunV2ApiResultStatus status = default(TestRunV2ApiResultStatus), Guid projectId = default(Guid), Guid? testPlanId = default(Guid?), List<TestResultV2GetModel> testResults = default(List<TestResultV2GetModel>), DateTime createdDate = default(DateTime), DateTime? modifiedDate = default(DateTime?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?), string createdByUserName = default(string), List<AttachmentApiResult> attachments = default(List<AttachmentApiResult>), List<LinkApiResult> links = default(List<LinkApiResult>), Dictionary<string, string> customParameters = default(Dictionary<string, string>), List<NamedEntityApiModel> webhooks = default(List<NamedEntityApiModel>), int runCount = default(int))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TestRunV2ApiResult and cannot be null");
            }
            this.Name = name;
            this.StateName = stateName;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TestRunV2ApiResult and cannot be null");
            }
            this.Status = status;
            this.ProjectId = projectId;
            this.CreatedDate = createdDate;
            this.CreatedById = createdById;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for TestRunV2ApiResult and cannot be null");
            }
            this.Attachments = attachments;
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new ArgumentNullException("links is a required property for TestRunV2ApiResult and cannot be null");
            }
            this.Links = links;
            // to ensure "webhooks" is required (not null)
            if (webhooks == null)
            {
                throw new ArgumentNullException("webhooks is a required property for TestRunV2ApiResult and cannot be null");
            }
            this.Webhooks = webhooks;
            this.RunCount = runCount;
            this.Description = description;
            this.LaunchSource = launchSource;
            this.StartedOn = startedOn;
            this.CompletedOn = completedOn;
            this.TestPlanId = testPlanId;
            this.TestResults = testResults;
            this.ModifiedDate = modifiedDate;
            this.ModifiedById = modifiedById;
            this.CreatedByUserName = createdByUserName;
            this.CustomParameters = customParameters;
        }

        /// <summary>
        /// Test run unique identifier
        /// </summary>
        /// <value>Test run unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Test run name
        /// </summary>
        /// <value>Test run name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Test run description
        /// </summary>
        /// <value>Test run description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Test run launch source                Once launch source is specified it cannot be updated.
        /// </summary>
        /// <value>Test run launch source                Once launch source is specified it cannot be updated.</value>
        [DataMember(Name = "launchSource", EmitDefaultValue = true)]
        public string LaunchSource { get; set; }

        /// <summary>
        /// Date and time of test run start
        /// </summary>
        /// <value>Date and time of test run start</value>
        [DataMember(Name = "startedOn", EmitDefaultValue = true)]
        public DateTime? StartedOn { get; set; }

        /// <summary>
        /// Date and time of test run end
        /// </summary>
        /// <value>Date and time of test run end</value>
        [DataMember(Name = "completedOn", EmitDefaultValue = true)]
        public DateTime? CompletedOn { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TestRunV2ApiResultStatus Status { get; set; }

        /// <summary>
        /// Project unique identifier                This property is used to link test run with project.
        /// </summary>
        /// <value>Project unique identifier                This property is used to link test run with project.</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Test plan unique identifier                This property is used to link test run with test plan.
        /// </summary>
        /// <value>Test plan unique identifier                This property is used to link test run with test plan.</value>
        [DataMember(Name = "testPlanId", EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Enumeration of test results related to test run
        /// </summary>
        /// <value>Enumeration of test results related to test run</value>
        [DataMember(Name = "testResults", EmitDefaultValue = true)]
        public List<TestResultV2GetModel> TestResults { get; set; }

        /// <summary>
        /// Date and time of test run creation
        /// </summary>
        /// <value>Date and time of test run creation</value>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Date and time of last test run  modification
        /// </summary>
        /// <value>Date and time of last test run  modification</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Unique identifier of user who created test run
        /// </summary>
        /// <value>Unique identifier of user who created test run</value>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Unique identifier of user who applied last test run  modification
        /// </summary>
        /// <value>Unique identifier of user who applied last test run  modification</value>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Username of user who created test run
        /// </summary>
        /// <value>Username of user who created test run</value>
        [DataMember(Name = "createdByUserName", EmitDefaultValue = true)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Collection of attachments related to the test run
        /// </summary>
        /// <value>Collection of attachments related to the test run</value>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public List<AttachmentApiResult> Attachments { get; set; }

        /// <summary>
        /// Collection of links related to the test run
        /// </summary>
        /// <value>Collection of links related to the test run</value>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = true)]
        public List<LinkApiResult> Links { get; set; }

        /// <summary>
        /// Customers test run parameters
        /// </summary>
        /// <value>Customers test run parameters</value>
        [DataMember(Name = "customParameters", EmitDefaultValue = true)]
        public Dictionary<string, string> CustomParameters { get; set; }

        /// <summary>
        /// Enabled webhooks
        /// </summary>
        /// <value>Enabled webhooks</value>
        [DataMember(Name = "webhooks", IsRequired = true, EmitDefaultValue = true)]
        public List<NamedEntityApiModel> Webhooks { get; set; }

        /// <summary>
        /// Run count
        /// </summary>
        /// <value>Run count</value>
        [DataMember(Name = "runCount", IsRequired = true, EmitDefaultValue = true)]
        public int RunCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunV2ApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LaunchSource: ").Append(LaunchSource).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  CustomParameters: ").Append(CustomParameters).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("  RunCount: ").Append(RunCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestRunV2ApiResult);
        }

        /// <summary>
        /// Returns true if TestRunV2ApiResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TestRunV2ApiResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestRunV2ApiResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LaunchSource == input.LaunchSource ||
                    (this.LaunchSource != null &&
                    this.LaunchSource.Equals(input.LaunchSource))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.CompletedOn == input.CompletedOn ||
                    (this.CompletedOn != null &&
                    this.CompletedOn.Equals(input.CompletedOn))
                ) && 
                (
                    this.StateName == input.StateName ||
                    this.StateName.Equals(input.StateName)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.TestPlanId == input.TestPlanId ||
                    (this.TestPlanId != null &&
                    this.TestPlanId.Equals(input.TestPlanId))
                ) && 
                (
                    this.TestResults == input.TestResults ||
                    this.TestResults != null &&
                    input.TestResults != null &&
                    this.TestResults.SequenceEqual(input.TestResults)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    (this.CreatedById != null &&
                    this.CreatedById.Equals(input.CreatedById))
                ) && 
                (
                    this.ModifiedById == input.ModifiedById ||
                    (this.ModifiedById != null &&
                    this.ModifiedById.Equals(input.ModifiedById))
                ) && 
                (
                    this.CreatedByUserName == input.CreatedByUserName ||
                    (this.CreatedByUserName != null &&
                    this.CreatedByUserName.Equals(input.CreatedByUserName))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.CustomParameters == input.CustomParameters ||
                    this.CustomParameters != null &&
                    input.CustomParameters != null &&
                    this.CustomParameters.SequenceEqual(input.CustomParameters)
                ) && 
                (
                    this.Webhooks == input.Webhooks ||
                    this.Webhooks != null &&
                    input.Webhooks != null &&
                    this.Webhooks.SequenceEqual(input.Webhooks)
                ) && 
                (
                    this.RunCount == input.RunCount ||
                    this.RunCount.Equals(input.RunCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LaunchSource != null)
                {
                    hashCode = (hashCode * 59) + this.LaunchSource.GetHashCode();
                }
                if (this.StartedOn != null)
                {
                    hashCode = (hashCode * 59) + this.StartedOn.GetHashCode();
                }
                if (this.CompletedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.TestPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanId.GetHashCode();
                }
                if (this.TestResults != null)
                {
                    hashCode = (hashCode * 59) + this.TestResults.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                if (this.CreatedById != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                }
                if (this.ModifiedById != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedById.GetHashCode();
                }
                if (this.CreatedByUserName != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUserName.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.CustomParameters != null)
                {
                    hashCode = (hashCode * 59) + this.CustomParameters.GetHashCode();
                }
                if (this.Webhooks != null)
                {
                    hashCode = (hashCode * 59) + this.Webhooks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
