/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPlanTestPointsTesterAndStatusTypeGroupApiResult
    /// </summary>
    [DataContract(Name = "TestPlanTestPointsTesterAndStatusTypeGroupApiResult")]
    public partial class TestPlanTestPointsTesterAndStatusTypeGroupApiResult : IValidatableObject
    {

        /// <summary>
        /// Collection of possible status types
        /// </summary>
        /// <value>Collection of possible status types</value>
        [DataMember(Name = "statusType", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusApiType StatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsTesterAndStatusTypeGroupApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPlanTestPointsTesterAndStatusTypeGroupApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsTesterAndStatusTypeGroupApiResult" /> class.
        /// </summary>
        /// <param name="userId">userId (required).</param>
        /// <param name="statusType">Collection of possible status types (required).</param>
        /// <param name="value">value (required).</param>
        public TestPlanTestPointsTesterAndStatusTypeGroupApiResult(Guid? userId = default(Guid?), TestStatusApiType statusType = default(TestStatusApiType), long value = default(long))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for TestPlanTestPointsTesterAndStatusTypeGroupApiResult and cannot be null");
            }
            this.UserId = userId;
            this.StatusType = statusType;
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public long Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPlanTestPointsTesterAndStatusTypeGroupApiResult {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
