/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunApiResult
    /// </summary>
    [DataContract(Name = "TestRunApiResult")]
    public partial class TestRunApiResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StateName
        /// </summary>
        [DataMember(Name = "stateName", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public TestRunState StateName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestRunApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunApiResult" /> class.
        /// </summary>
        /// <param name="id">Unique ID of the entity (required).</param>
        /// <param name="isDeleted">Indicates if the entity is deleted (required).</param>
        /// <param name="startedDate">startedDate.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="build">build (required).</param>
        /// <param name="description">description.</param>
        /// <param name="stateName">stateName (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="testPlanId">testPlanId.</param>
        /// <param name="runByUserId">runByUserId.</param>
        /// <param name="stoppedByUserId">stoppedByUserId.</param>
        /// <param name="name">name.</param>
        /// <param name="launchSource">launchSource.</param>
        /// <param name="autoTests">autoTests (required).</param>
        /// <param name="autoTestsCount">autoTestsCount (required).</param>
        /// <param name="testSuiteIds">testSuiteIds (required).</param>
        /// <param name="isAutomated">isAutomated (required).</param>
        /// <param name="analytic">analytic (required).</param>
        /// <param name="testResults">testResults (required).</param>
        /// <param name="testPlan">testPlan.</param>
        /// <param name="createdDate">createdDate (required).</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="createdById">createdById (required).</param>
        /// <param name="modifiedById">modifiedById.</param>
        /// <param name="createdByUserName">createdByUserName.</param>
        public TestRunApiResult(Guid id = default(Guid), bool isDeleted = default(bool), DateTime? startedDate = default(DateTime?), DateTime? completedDate = default(DateTime?), string build = default(string), string description = default(string), TestRunState stateName = default(TestRunState), TestStatusApiResult status = default(TestStatusApiResult), Guid projectId = default(Guid), Guid? testPlanId = default(Guid?), Guid? runByUserId = default(Guid?), Guid? stoppedByUserId = default(Guid?), string name = default(string), string launchSource = default(string), List<AutoTestApiResult> autoTests = default(List<AutoTestApiResult>), int autoTestsCount = default(int), List<Guid> testSuiteIds = default(List<Guid>), bool isAutomated = default(bool), TestRunAnalyticApiResult analytic = default(TestRunAnalyticApiResult), List<TestResultApiResult> testResults = default(List<TestResultApiResult>), TestPlanApiResult testPlan = default(TestPlanApiResult), DateTime createdDate = default(DateTime), DateTime? modifiedDate = default(DateTime?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?), string createdByUserName = default(string))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            // to ensure "build" is required (not null)
            if (build == null)
            {
                throw new ArgumentNullException("build is a required property for TestRunApiResult and cannot be null");
            }
            this.Build = build;
            this.StateName = stateName;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TestRunApiResult and cannot be null");
            }
            this.Status = status;
            this.ProjectId = projectId;
            // to ensure "autoTests" is required (not null)
            if (autoTests == null)
            {
                throw new ArgumentNullException("autoTests is a required property for TestRunApiResult and cannot be null");
            }
            this.AutoTests = autoTests;
            this.AutoTestsCount = autoTestsCount;
            // to ensure "testSuiteIds" is required (not null)
            if (testSuiteIds == null)
            {
                throw new ArgumentNullException("testSuiteIds is a required property for TestRunApiResult and cannot be null");
            }
            this.TestSuiteIds = testSuiteIds;
            this.IsAutomated = isAutomated;
            // to ensure "analytic" is required (not null)
            if (analytic == null)
            {
                throw new ArgumentNullException("analytic is a required property for TestRunApiResult and cannot be null");
            }
            this.Analytic = analytic;
            // to ensure "testResults" is required (not null)
            if (testResults == null)
            {
                throw new ArgumentNullException("testResults is a required property for TestRunApiResult and cannot be null");
            }
            this.TestResults = testResults;
            this.CreatedDate = createdDate;
            this.CreatedById = createdById;
            this.StartedDate = startedDate;
            this.CompletedDate = completedDate;
            this.Description = description;
            this.TestPlanId = testPlanId;
            this.RunByUserId = runByUserId;
            this.StoppedByUserId = stoppedByUserId;
            this.Name = name;
            this.LaunchSource = launchSource;
            this.TestPlan = testPlan;
            this.ModifiedDate = modifiedDate;
            this.ModifiedById = modifiedById;
            this.CreatedByUserName = createdByUserName;
        }

        /// <summary>
        /// Unique ID of the entity
        /// </summary>
        /// <value>Unique ID of the entity</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Indicates if the entity is deleted
        /// </summary>
        /// <value>Indicates if the entity is deleted</value>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets StartedDate
        /// </summary>
        [DataMember(Name = "startedDate", EmitDefaultValue = true)]
        public DateTime? StartedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "completedDate", EmitDefaultValue = true)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name = "build", IsRequired = true, EmitDefaultValue = true)]
        public string Build { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusApiResult Status { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanId
        /// </summary>
        [DataMember(Name = "testPlanId", EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Gets or Sets RunByUserId
        /// </summary>
        [DataMember(Name = "runByUserId", EmitDefaultValue = true)]
        public Guid? RunByUserId { get; set; }

        /// <summary>
        /// Gets or Sets StoppedByUserId
        /// </summary>
        [DataMember(Name = "stoppedByUserId", EmitDefaultValue = true)]
        public Guid? StoppedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LaunchSource
        /// </summary>
        [DataMember(Name = "launchSource", EmitDefaultValue = true)]
        public string LaunchSource { get; set; }

        /// <summary>
        /// Gets or Sets AutoTests
        /// </summary>
        [DataMember(Name = "autoTests", IsRequired = true, EmitDefaultValue = true)]
        public List<AutoTestApiResult> AutoTests { get; set; }

        /// <summary>
        /// Gets or Sets AutoTestsCount
        /// </summary>
        [DataMember(Name = "autoTestsCount", IsRequired = true, EmitDefaultValue = true)]
        public int AutoTestsCount { get; set; }

        /// <summary>
        /// Gets or Sets TestSuiteIds
        /// </summary>
        [DataMember(Name = "testSuiteIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> TestSuiteIds { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name = "isAutomated", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAutomated { get; set; }

        /// <summary>
        /// Gets or Sets Analytic
        /// </summary>
        [DataMember(Name = "analytic", IsRequired = true, EmitDefaultValue = true)]
        public TestRunAnalyticApiResult Analytic { get; set; }

        /// <summary>
        /// Gets or Sets TestResults
        /// </summary>
        [DataMember(Name = "testResults", IsRequired = true, EmitDefaultValue = true)]
        public List<TestResultApiResult> TestResults { get; set; }

        /// <summary>
        /// Gets or Sets TestPlan
        /// </summary>
        [DataMember(Name = "testPlan", EmitDefaultValue = true)]
        public TestPlanApiResult TestPlan { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedById
        /// </summary>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserName
        /// </summary>
        [DataMember(Name = "createdByUserName", EmitDefaultValue = true)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  StartedDate: ").Append(StartedDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  RunByUserId: ").Append(RunByUserId).Append("\n");
            sb.Append("  StoppedByUserId: ").Append(StoppedByUserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LaunchSource: ").Append(LaunchSource).Append("\n");
            sb.Append("  AutoTests: ").Append(AutoTests).Append("\n");
            sb.Append("  AutoTestsCount: ").Append(AutoTestsCount).Append("\n");
            sb.Append("  TestSuiteIds: ").Append(TestSuiteIds).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  Analytic: ").Append(Analytic).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("  TestPlan: ").Append(TestPlan).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
