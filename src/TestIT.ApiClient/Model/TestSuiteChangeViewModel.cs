/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestSuiteChangeViewModel
    /// </summary>
    [DataContract(Name = "TestSuiteChangeViewModel")]
    public partial class TestSuiteChangeViewModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteChangeViewModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestSuiteChangeViewModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteChangeViewModel" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="configurations">configurations.</param>
        /// <param name="workItemCount">workItemCount (required).</param>
        public TestSuiteChangeViewModel(Guid id = default(Guid), string name = default(string), List<ShortConfiguration> configurations = default(List<ShortConfiguration>), long workItemCount = default(long))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TestSuiteChangeViewModel and cannot be null");
            }
            this.Name = name;
            this.WorkItemCount = workItemCount;
            this.Configurations = configurations;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Configurations
        /// </summary>
        [DataMember(Name = "configurations", EmitDefaultValue = true)]
        public List<ShortConfiguration> Configurations { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemCount
        /// </summary>
        [DataMember(Name = "workItemCount", IsRequired = true, EmitDefaultValue = true)]
        public long WorkItemCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestSuiteChangeViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Configurations: ").Append(Configurations).Append("\n");
            sb.Append("  WorkItemCount: ").Append(WorkItemCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
