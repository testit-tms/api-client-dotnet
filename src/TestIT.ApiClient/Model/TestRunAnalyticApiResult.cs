/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunAnalyticApiResult
    /// </summary>
    [DataContract(Name = "TestRunAnalyticApiResult")]
    public partial class TestRunAnalyticApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunAnalyticApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestRunAnalyticApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunAnalyticApiResult" /> class.
        /// </summary>
        /// <param name="countGroupByStatus">countGroupByStatus (required).</param>
        /// <param name="countGroupByStatusType">countGroupByStatusType (required).</param>
        /// <param name="countGroupByFailureClass">countGroupByFailureClass (required).</param>
        public TestRunAnalyticApiResult(List<TestRunGroupByStatusApiResult> countGroupByStatus = default(List<TestRunGroupByStatusApiResult>), List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType = default(List<TestRunGroupByStatusTypeApiResult>), List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass = default(List<TestRunGroupByFailureClassApiResult>))
        {
            // to ensure "countGroupByStatus" is required (not null)
            if (countGroupByStatus == null)
            {
                throw new ArgumentNullException("countGroupByStatus is a required property for TestRunAnalyticApiResult and cannot be null");
            }
            this.CountGroupByStatus = countGroupByStatus;
            // to ensure "countGroupByStatusType" is required (not null)
            if (countGroupByStatusType == null)
            {
                throw new ArgumentNullException("countGroupByStatusType is a required property for TestRunAnalyticApiResult and cannot be null");
            }
            this.CountGroupByStatusType = countGroupByStatusType;
            // to ensure "countGroupByFailureClass" is required (not null)
            if (countGroupByFailureClass == null)
            {
                throw new ArgumentNullException("countGroupByFailureClass is a required property for TestRunAnalyticApiResult and cannot be null");
            }
            this.CountGroupByFailureClass = countGroupByFailureClass;
        }

        /// <summary>
        /// Gets or Sets CountGroupByStatus
        /// </summary>
        [DataMember(Name = "countGroupByStatus", IsRequired = true, EmitDefaultValue = true)]
        public List<TestRunGroupByStatusApiResult> CountGroupByStatus { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByStatusType
        /// </summary>
        [DataMember(Name = "countGroupByStatusType", IsRequired = true, EmitDefaultValue = true)]
        public List<TestRunGroupByStatusTypeApiResult> CountGroupByStatusType { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByFailureClass
        /// </summary>
        [DataMember(Name = "countGroupByFailureClass", IsRequired = true, EmitDefaultValue = true)]
        public List<TestRunGroupByFailureClassApiResult> CountGroupByFailureClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunAnalyticApiResult {\n");
            sb.Append("  CountGroupByStatus: ").Append(CountGroupByStatus).Append("\n");
            sb.Append("  CountGroupByStatusType: ").Append(CountGroupByStatusType).Append("\n");
            sb.Append("  CountGroupByFailureClass: ").Append(CountGroupByFailureClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
