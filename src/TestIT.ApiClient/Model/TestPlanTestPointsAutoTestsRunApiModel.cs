/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPlanTestPointsAutoTestsRunApiModel
    /// </summary>
    [DataContract(Name = "TestPlanTestPointsAutoTestsRunApiModel")]
    public partial class TestPlanTestPointsAutoTestsRunApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsAutoTestsRunApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPlanTestPointsAutoTestsRunApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPlanTestPointsAutoTestsRunApiModel" /> class.
        /// </summary>
        /// <param name="filter">Test points filters..</param>
        /// <param name="extractionModel">Test points extraction model..</param>
        /// <param name="webhookIds">Webhook ids to run. (required).</param>
        /// <param name="build">Specifies the test run build..</param>
        /// <param name="resetNotActualAutomatedTestPoints">Reset test point status when actual work item does not automated. (required).</param>
        public TestPlanTestPointsAutoTestsRunApiModel(TestPlanTestPointsSearchApiModel filter = default(TestPlanTestPointsSearchApiModel), TestPlanTestPointsExtractionApiModel extractionModel = default(TestPlanTestPointsExtractionApiModel), List<Guid> webhookIds = default(List<Guid>), string build = default(string), bool resetNotActualAutomatedTestPoints = default(bool))
        {
            // to ensure "webhookIds" is required (not null)
            if (webhookIds == null)
            {
                throw new ArgumentNullException("webhookIds is a required property for TestPlanTestPointsAutoTestsRunApiModel and cannot be null");
            }
            this.WebhookIds = webhookIds;
            this.ResetNotActualAutomatedTestPoints = resetNotActualAutomatedTestPoints;
            this.Filter = filter;
            this.ExtractionModel = extractionModel;
            this.Build = build;
        }

        /// <summary>
        /// Test points filters.
        /// </summary>
        /// <value>Test points filters.</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public TestPlanTestPointsSearchApiModel Filter { get; set; }

        /// <summary>
        /// Test points extraction model.
        /// </summary>
        /// <value>Test points extraction model.</value>
        [DataMember(Name = "extractionModel", EmitDefaultValue = true)]
        public TestPlanTestPointsExtractionApiModel ExtractionModel { get; set; }

        /// <summary>
        /// Webhook ids to run.
        /// </summary>
        /// <value>Webhook ids to run.</value>
        [DataMember(Name = "webhookIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> WebhookIds { get; set; }

        /// <summary>
        /// Specifies the test run build.
        /// </summary>
        /// <value>Specifies the test run build.</value>
        [DataMember(Name = "build", EmitDefaultValue = true)]
        public string Build { get; set; }

        /// <summary>
        /// Reset test point status when actual work item does not automated.
        /// </summary>
        /// <value>Reset test point status when actual work item does not automated.</value>
        [DataMember(Name = "resetNotActualAutomatedTestPoints", IsRequired = true, EmitDefaultValue = true)]
        public bool ResetNotActualAutomatedTestPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPlanTestPointsAutoTestsRunApiModel {\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  ExtractionModel: ").Append(ExtractionModel).Append("\n");
            sb.Append("  WebhookIds: ").Append(WebhookIds).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  ResetNotActualAutomatedTestPoints: ").Append(ResetNotActualAutomatedTestPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
