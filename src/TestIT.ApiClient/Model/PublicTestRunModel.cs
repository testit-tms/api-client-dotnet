/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// PublicTestRunModel
    /// </summary>
    [DataContract(Name = "PublicTestRunModel")]
    public partial class PublicTestRunModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicTestRunModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicTestRunModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicTestRunModel" /> class.
        /// </summary>
        /// <param name="testRunId">testRunId (required).</param>
        /// <param name="testPlanId">testPlanId.</param>
        /// <param name="testPlanGlobalId">testPlanGlobalId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="productName">productName.</param>
        /// <param name="build">build.</param>
        /// <param name="configurations">configurations (required).</param>
        /// <param name="autoTests">autoTests (required).</param>
        /// <param name="testPoints">testPoints (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="statusModel">statusModel (required).</param>
        /// <param name="customParameters">customParameters.</param>
        /// <param name="testRunDescription">testRunDescription.</param>
        public PublicTestRunModel(Guid testRunId = default(Guid), Guid? testPlanId = default(Guid?), long testPlanGlobalId = default(long), string name = default(string), string productName = default(string), string build = default(string), List<ConfigurationModel> configurations = default(List<ConfigurationModel>), List<AutoTestModel> autoTests = default(List<AutoTestModel>), List<PublicTestPointModel> testPoints = default(List<PublicTestPointModel>), string status = default(string), TestStatusModel statusModel = default(TestStatusModel), Dictionary<string, string> customParameters = default(Dictionary<string, string>), string testRunDescription = default(string))
        {
            this.TestRunId = testRunId;
            this.TestPlanGlobalId = testPlanGlobalId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PublicTestRunModel and cannot be null");
            }
            this.Name = name;
            // to ensure "configurations" is required (not null)
            if (configurations == null)
            {
                throw new ArgumentNullException("configurations is a required property for PublicTestRunModel and cannot be null");
            }
            this.Configurations = configurations;
            // to ensure "autoTests" is required (not null)
            if (autoTests == null)
            {
                throw new ArgumentNullException("autoTests is a required property for PublicTestRunModel and cannot be null");
            }
            this.AutoTests = autoTests;
            // to ensure "testPoints" is required (not null)
            if (testPoints == null)
            {
                throw new ArgumentNullException("testPoints is a required property for PublicTestRunModel and cannot be null");
            }
            this.TestPoints = testPoints;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for PublicTestRunModel and cannot be null");
            }
            this.Status = status;
            // to ensure "statusModel" is required (not null)
            if (statusModel == null)
            {
                throw new ArgumentNullException("statusModel is a required property for PublicTestRunModel and cannot be null");
            }
            this.StatusModel = statusModel;
            this.TestPlanId = testPlanId;
            this.ProductName = productName;
            this.Build = build;
            this.CustomParameters = customParameters;
            this.TestRunDescription = testRunDescription;
        }

        /// <summary>
        /// Gets or Sets TestRunId
        /// </summary>
        [DataMember(Name = "testRunId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TestRunId { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanId
        /// </summary>
        [DataMember(Name = "testPlanId", EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Gets or Sets TestPlanGlobalId
        /// </summary>
        [DataMember(Name = "testPlanGlobalId", IsRequired = true, EmitDefaultValue = true)]
        public long TestPlanGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "productName", EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name = "build", EmitDefaultValue = true)]
        public string Build { get; set; }

        /// <summary>
        /// Gets or Sets Configurations
        /// </summary>
        [DataMember(Name = "configurations", IsRequired = true, EmitDefaultValue = true)]
        public List<ConfigurationModel> Configurations { get; set; }

        /// <summary>
        /// Gets or Sets AutoTests
        /// </summary>
        [DataMember(Name = "autoTests", IsRequired = true, EmitDefaultValue = true)]
        public List<AutoTestModel> AutoTests { get; set; }

        /// <summary>
        /// Gets or Sets TestPoints
        /// </summary>
        [DataMember(Name = "testPoints", IsRequired = true, EmitDefaultValue = true)]
        public List<PublicTestPointModel> TestPoints { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusModel
        /// </summary>
        [DataMember(Name = "statusModel", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusModel StatusModel { get; set; }

        /// <summary>
        /// Gets or Sets CustomParameters
        /// </summary>
        [DataMember(Name = "customParameters", EmitDefaultValue = true)]
        public Dictionary<string, string> CustomParameters { get; set; }

        /// <summary>
        /// Gets or Sets TestRunDescription
        /// </summary>
        [DataMember(Name = "testRunDescription", EmitDefaultValue = true)]
        public string TestRunDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicTestRunModel {\n");
            sb.Append("  TestRunId: ").Append(TestRunId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  TestPlanGlobalId: ").Append(TestPlanGlobalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Configurations: ").Append(Configurations).Append("\n");
            sb.Append("  AutoTests: ").Append(AutoTests).Append("\n");
            sb.Append("  TestPoints: ").Append(TestPoints).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusModel: ").Append(StatusModel).Append("\n");
            sb.Append("  CustomParameters: ").Append(CustomParameters).Append("\n");
            sb.Append("  TestRunDescription: ").Append(TestRunDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
