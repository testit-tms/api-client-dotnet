/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// AttachmentApiResult
    /// </summary>
    [DataContract(Name = "AttachmentApiResult")]
    public partial class AttachmentApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachmentApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApiResult" /> class.
        /// </summary>
        /// <param name="id">Unique ID of the attachment (required).</param>
        /// <param name="fileId">Unique ID of the attachment file (required).</param>
        /// <param name="type">MIME type of the attachment (required).</param>
        /// <param name="size">Size in bytes of the attachment file (required).</param>
        /// <param name="createdDate">Creation date of the attachment (required).</param>
        /// <param name="modifiedDate">Last modification date of the attachment.</param>
        /// <param name="createdById">Unique ID of the attachment creator (required).</param>
        /// <param name="modifiedById">Unique ID of the attachment last editor.</param>
        /// <param name="name">Name of the attachment file (required).</param>
        public AttachmentApiResult(Guid id = default(Guid), string fileId = default(string), string type = default(string), float size = default(float), DateTime createdDate = default(DateTime), DateTime? modifiedDate = default(DateTime?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?), string name = default(string))
        {
            this.Id = id;
            // to ensure "fileId" is required (not null)
            if (fileId == null)
            {
                throw new ArgumentNullException("fileId is a required property for AttachmentApiResult and cannot be null");
            }
            this.FileId = fileId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AttachmentApiResult and cannot be null");
            }
            this.Type = type;
            this.Size = size;
            this.CreatedDate = createdDate;
            this.CreatedById = createdById;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AttachmentApiResult and cannot be null");
            }
            this.Name = name;
            this.ModifiedDate = modifiedDate;
            this.ModifiedById = modifiedById;
        }

        /// <summary>
        /// Unique ID of the attachment
        /// </summary>
        /// <value>Unique ID of the attachment</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Unique ID of the attachment file
        /// </summary>
        /// <value>Unique ID of the attachment file</value>
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = true)]
        public string FileId { get; set; }

        /// <summary>
        /// MIME type of the attachment
        /// </summary>
        /// <value>MIME type of the attachment</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Size in bytes of the attachment file
        /// </summary>
        /// <value>Size in bytes of the attachment file</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public float Size { get; set; }

        /// <summary>
        /// Creation date of the attachment
        /// </summary>
        /// <value>Creation date of the attachment</value>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Last modification date of the attachment
        /// </summary>
        /// <value>Last modification date of the attachment</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Unique ID of the attachment creator
        /// </summary>
        /// <value>Unique ID of the attachment creator</value>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Unique ID of the attachment last editor
        /// </summary>
        /// <value>Unique ID of the attachment last editor</value>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Name of the attachment file
        /// </summary>
        /// <value>Name of the attachment file</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
