/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WebhookResponse
    /// </summary>
    [DataContract(Name = "WebhookResponse")]
    public partial class WebhookResponse : IEquatable<WebhookResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponse" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="requestBody">requestBody.</param>
        /// <param name="requestMeta">requestMeta (required).</param>
        /// <param name="responseBody">responseBody (required).</param>
        /// <param name="responseMeta">responseMeta (required).</param>
        public WebhookResponse(string uri = default(string), int statusCode = default(int), string requestBody = default(string), string requestMeta = default(string), string responseBody = default(string), string responseMeta = default(string))
        {
            this.StatusCode = statusCode;
            // to ensure "requestMeta" is required (not null)
            if (requestMeta == null)
            {
                throw new ArgumentNullException("requestMeta is a required property for WebhookResponse and cannot be null");
            }
            this.RequestMeta = requestMeta;
            // to ensure "responseBody" is required (not null)
            if (responseBody == null)
            {
                throw new ArgumentNullException("responseBody is a required property for WebhookResponse and cannot be null");
            }
            this.ResponseBody = responseBody;
            // to ensure "responseMeta" is required (not null)
            if (responseMeta == null)
            {
                throw new ArgumentNullException("responseMeta is a required property for WebhookResponse and cannot be null");
            }
            this.ResponseMeta = responseMeta;
            this.Uri = uri;
            this.RequestBody = requestBody;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = true)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets RequestBody
        /// </summary>
        [DataMember(Name = "requestBody", EmitDefaultValue = true)]
        public string RequestBody { get; set; }

        /// <summary>
        /// Gets or Sets RequestMeta
        /// </summary>
        [DataMember(Name = "requestMeta", IsRequired = true, EmitDefaultValue = true)]
        public string RequestMeta { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBody
        /// </summary>
        [DataMember(Name = "responseBody", IsRequired = true, EmitDefaultValue = true)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMeta
        /// </summary>
        [DataMember(Name = "responseMeta", IsRequired = true, EmitDefaultValue = true)]
        public string ResponseMeta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookResponse {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  RequestMeta: ").Append(RequestMeta).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseMeta: ").Append(ResponseMeta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookResponse);
        }

        /// <summary>
        /// Returns true if WebhookResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.RequestBody == input.RequestBody ||
                    (this.RequestBody != null &&
                    this.RequestBody.Equals(input.RequestBody))
                ) && 
                (
                    this.RequestMeta == input.RequestMeta ||
                    (this.RequestMeta != null &&
                    this.RequestMeta.Equals(input.RequestMeta))
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                ) && 
                (
                    this.ResponseMeta == input.ResponseMeta ||
                    (this.ResponseMeta != null &&
                    this.ResponseMeta.Equals(input.ResponseMeta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                if (this.RequestBody != null)
                {
                    hashCode = (hashCode * 59) + this.RequestBody.GetHashCode();
                }
                if (this.RequestMeta != null)
                {
                    hashCode = (hashCode * 59) + this.RequestMeta.GetHashCode();
                }
                if (this.ResponseBody != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseBody.GetHashCode();
                }
                if (this.ResponseMeta != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseMeta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
