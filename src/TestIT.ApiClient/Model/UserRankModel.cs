/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// UserRankModel
    /// </summary>
    [DataContract(Name = "UserRankModel")]
    public partial class UserRankModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRankModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRankModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRankModel" /> class.
        /// </summary>
        /// <param name="score">score (required).</param>
        /// <param name="workItemsCreated">workItemsCreated (required).</param>
        /// <param name="passedTestPoints">passedTestPoints (required).</param>
        /// <param name="failedTestPoints">failedTestPoints (required).</param>
        /// <param name="skippedTestPoints">skippedTestPoints (required).</param>
        /// <param name="blockedTestPoints">blockedTestPoints (required).</param>
        /// <param name="levelAvatarEnabled">levelAvatarEnabled (required).</param>
        /// <param name="succeededTestPoints">succeededTestPoints (required).</param>
        /// <param name="incompleteTestPoints">incompleteTestPoints (required).</param>
        public UserRankModel(int score = default(int), int workItemsCreated = default(int), int passedTestPoints = default(int), int failedTestPoints = default(int), int skippedTestPoints = default(int), int blockedTestPoints = default(int), bool levelAvatarEnabled = default(bool), int succeededTestPoints = default(int), int incompleteTestPoints = default(int))
        {
            this.Score = score;
            this.WorkItemsCreated = workItemsCreated;
            this.PassedTestPoints = passedTestPoints;
            this.FailedTestPoints = failedTestPoints;
            this.SkippedTestPoints = skippedTestPoints;
            this.BlockedTestPoints = blockedTestPoints;
            this.LevelAvatarEnabled = levelAvatarEnabled;
            this.SucceededTestPoints = succeededTestPoints;
            this.IncompleteTestPoints = incompleteTestPoints;
        }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", IsRequired = true, EmitDefaultValue = true)]
        public int Score { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemsCreated
        /// </summary>
        [DataMember(Name = "workItemsCreated", IsRequired = true, EmitDefaultValue = true)]
        public int WorkItemsCreated { get; set; }

        /// <summary>
        /// Gets or Sets PassedTestPoints
        /// </summary>
        [DataMember(Name = "passedTestPoints", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int PassedTestPoints { get; set; }

        /// <summary>
        /// Gets or Sets FailedTestPoints
        /// </summary>
        [DataMember(Name = "failedTestPoints", IsRequired = true, EmitDefaultValue = true)]
        public int FailedTestPoints { get; set; }

        /// <summary>
        /// Gets or Sets SkippedTestPoints
        /// </summary>
        [DataMember(Name = "skippedTestPoints", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int SkippedTestPoints { get; set; }

        /// <summary>
        /// Gets or Sets BlockedTestPoints
        /// </summary>
        [DataMember(Name = "blockedTestPoints", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int BlockedTestPoints { get; set; }

        /// <summary>
        /// Gets or Sets LevelAvatarEnabled
        /// </summary>
        [DataMember(Name = "levelAvatarEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool LevelAvatarEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SucceededTestPoints
        /// </summary>
        [DataMember(Name = "succeededTestPoints", IsRequired = true, EmitDefaultValue = true)]
        public int SucceededTestPoints { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteTestPoints
        /// </summary>
        [DataMember(Name = "incompleteTestPoints", IsRequired = true, EmitDefaultValue = true)]
        public int IncompleteTestPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserRankModel {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  WorkItemsCreated: ").Append(WorkItemsCreated).Append("\n");
            sb.Append("  PassedTestPoints: ").Append(PassedTestPoints).Append("\n");
            sb.Append("  FailedTestPoints: ").Append(FailedTestPoints).Append("\n");
            sb.Append("  SkippedTestPoints: ").Append(SkippedTestPoints).Append("\n");
            sb.Append("  BlockedTestPoints: ").Append(BlockedTestPoints).Append("\n");
            sb.Append("  LevelAvatarEnabled: ").Append(LevelAvatarEnabled).Append("\n");
            sb.Append("  SucceededTestPoints: ").Append(SucceededTestPoints).Append("\n");
            sb.Append("  IncompleteTestPoints: ").Append(IncompleteTestPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
