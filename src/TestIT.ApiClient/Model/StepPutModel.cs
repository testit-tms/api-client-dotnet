/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// StepPutModel
    /// </summary>
    [DataContract(Name = "StepPutModel")]
    public partial class StepPutModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepPutModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StepPutModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StepPutModel" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="action">action.</param>
        /// <param name="expected">expected.</param>
        /// <param name="testData">testData.</param>
        /// <param name="comments">comments.</param>
        /// <param name="workItemId">workItemId.</param>
        public StepPutModel(Guid id = default(Guid), string action = default(string), string expected = default(string), string testData = default(string), string comments = default(string), Guid? workItemId = default(Guid?))
        {
            this.Id = id;
            this.Action = action;
            this.Expected = expected;
            this.TestData = testData;
            this.Comments = comments;
            this.WorkItemId = workItemId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /*
        <example>ec70e9ad-f280-4a70-be0c-3d9ee96fc70f</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        /*
        <example>User press the button</example>
        */
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Expected
        /// </summary>
        /*
        <example>System makes a beeeep sound</example>
        */
        [DataMember(Name = "expected", EmitDefaultValue = true)]
        public string Expected { get; set; }

        /// <summary>
        /// Gets or Sets TestData
        /// </summary>
        /*
        <example>Some variables values</example>
        */
        [DataMember(Name = "testData", EmitDefaultValue = true)]
        public string TestData { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        /*
        <example>Comment on what to look for</example>
        */
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemId
        /// </summary>
        /*
        <example>ec70e9ad-f280-4a70-be0c-3d9ee96fc70f</example>
        */
        [DataMember(Name = "workItemId", EmitDefaultValue = true)]
        public Guid? WorkItemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StepPutModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Expected: ").Append(Expected).Append("\n");
            sb.Append("  TestData: ").Append(TestData).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  WorkItemId: ").Append(WorkItemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
