/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// AutoTestProjectSettingsPostModel
    /// </summary>
    [DataContract(Name = "AutoTestProjectSettingsPostModel")]
    public partial class AutoTestProjectSettingsPostModel : IEquatable<AutoTestProjectSettingsPostModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestProjectSettingsPostModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutoTestProjectSettingsPostModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestProjectSettingsPostModel" /> class.
        /// </summary>
        /// <param name="isFlakyAuto">Indicates if the status \&quot;Flaky/Stable\&quot; sets automatically (default to false).</param>
        /// <param name="flakyStabilityPercentage">Stability percentage for autotest flaky computing (default to 100).</param>
        /// <param name="flakyTestRunCount">Last test run count for autotest flaky computing (default to 100).</param>
        /// <param name="rerunEnabled">Auto rerun enabled (required).</param>
        /// <param name="rerunAttemptsCount">Auto rerun attempt count (required).</param>
        public AutoTestProjectSettingsPostModel(bool isFlakyAuto = false, int flakyStabilityPercentage = 100, int flakyTestRunCount = 100, bool rerunEnabled = default(bool), int rerunAttemptsCount = default(int))
        {
            this.RerunEnabled = rerunEnabled;
            this.RerunAttemptsCount = rerunAttemptsCount;
            this.IsFlakyAuto = isFlakyAuto;
            this.FlakyStabilityPercentage = flakyStabilityPercentage;
            this.FlakyTestRunCount = flakyTestRunCount;
        }

        /// <summary>
        /// Indicates if the status \&quot;Flaky/Stable\&quot; sets automatically
        /// </summary>
        /// <value>Indicates if the status \&quot;Flaky/Stable\&quot; sets automatically</value>
        [DataMember(Name = "isFlakyAuto", EmitDefaultValue = true)]
        public bool IsFlakyAuto { get; set; }

        /// <summary>
        /// Stability percentage for autotest flaky computing
        /// </summary>
        /// <value>Stability percentage for autotest flaky computing</value>
        [DataMember(Name = "flakyStabilityPercentage", EmitDefaultValue = false)]
        public int FlakyStabilityPercentage { get; set; }

        /// <summary>
        /// Last test run count for autotest flaky computing
        /// </summary>
        /// <value>Last test run count for autotest flaky computing</value>
        [DataMember(Name = "flakyTestRunCount", EmitDefaultValue = false)]
        public int FlakyTestRunCount { get; set; }

        /// <summary>
        /// Auto rerun enabled
        /// </summary>
        /// <value>Auto rerun enabled</value>
        [DataMember(Name = "rerunEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool RerunEnabled { get; set; }

        /// <summary>
        /// Auto rerun attempt count
        /// </summary>
        /// <value>Auto rerun attempt count</value>
        [DataMember(Name = "rerunAttemptsCount", IsRequired = true, EmitDefaultValue = true)]
        public int RerunAttemptsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoTestProjectSettingsPostModel {\n");
            sb.Append("  IsFlakyAuto: ").Append(IsFlakyAuto).Append("\n");
            sb.Append("  FlakyStabilityPercentage: ").Append(FlakyStabilityPercentage).Append("\n");
            sb.Append("  FlakyTestRunCount: ").Append(FlakyTestRunCount).Append("\n");
            sb.Append("  RerunEnabled: ").Append(RerunEnabled).Append("\n");
            sb.Append("  RerunAttemptsCount: ").Append(RerunAttemptsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoTestProjectSettingsPostModel);
        }

        /// <summary>
        /// Returns true if AutoTestProjectSettingsPostModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoTestProjectSettingsPostModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoTestProjectSettingsPostModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsFlakyAuto == input.IsFlakyAuto ||
                    this.IsFlakyAuto.Equals(input.IsFlakyAuto)
                ) && 
                (
                    this.FlakyStabilityPercentage == input.FlakyStabilityPercentage ||
                    this.FlakyStabilityPercentage.Equals(input.FlakyStabilityPercentage)
                ) && 
                (
                    this.FlakyTestRunCount == input.FlakyTestRunCount ||
                    this.FlakyTestRunCount.Equals(input.FlakyTestRunCount)
                ) && 
                (
                    this.RerunEnabled == input.RerunEnabled ||
                    this.RerunEnabled.Equals(input.RerunEnabled)
                ) && 
                (
                    this.RerunAttemptsCount == input.RerunAttemptsCount ||
                    this.RerunAttemptsCount.Equals(input.RerunAttemptsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsFlakyAuto.GetHashCode();
                hashCode = (hashCode * 59) + this.FlakyStabilityPercentage.GetHashCode();
                hashCode = (hashCode * 59) + this.FlakyTestRunCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RerunEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.RerunAttemptsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FlakyStabilityPercentage (int) maximum
            if (this.FlakyStabilityPercentage > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlakyStabilityPercentage, must be a value less than or equal to 100.", new [] { "FlakyStabilityPercentage" });
            }

            // FlakyStabilityPercentage (int) minimum
            if (this.FlakyStabilityPercentage < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlakyStabilityPercentage, must be a value greater than or equal to 0.", new [] { "FlakyStabilityPercentage" });
            }

            // FlakyTestRunCount (int) maximum
            if (this.FlakyTestRunCount > (int)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlakyTestRunCount, must be a value less than or equal to 1000.", new [] { "FlakyTestRunCount" });
            }

            // FlakyTestRunCount (int) minimum
            if (this.FlakyTestRunCount < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlakyTestRunCount, must be a value greater than or equal to 1.", new [] { "FlakyTestRunCount" });
            }

            // RerunAttemptsCount (int) maximum
            if (this.RerunAttemptsCount > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RerunAttemptsCount, must be a value less than or equal to 10.", new [] { "RerunAttemptsCount" });
            }

            // RerunAttemptsCount (int) minimum
            if (this.RerunAttemptsCount < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RerunAttemptsCount, must be a value greater than or equal to 1.", new [] { "RerunAttemptsCount" });
            }

            yield break;
        }
    }

}
