/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// WebHookPostModel
    /// </summary>
    [DataContract(Name = "WebHookPostModel")]
    public partial class WebHookPostModel : IValidatableObject
    {

        /// <summary>
        /// Type of event which triggers the webhook
        /// </summary>
        /// <value>Type of event which triggers the webhook</value>
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = true)]
        public WebHookEventTypeModel EventType { get; set; }

        /// <summary>
        /// Request method of the webhook
        /// </summary>
        /// <value>Request method of the webhook</value>
        [DataMember(Name = "requestType", IsRequired = true, EmitDefaultValue = true)]
        public RequestTypeModel RequestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookPostModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebHookPostModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookPostModel" /> class.
        /// </summary>
        /// <param name="projectId">Unique ID of the webhook project (required).</param>
        /// <param name="eventType">Type of event which triggers the webhook (required).</param>
        /// <param name="description">Description of the webhook.</param>
        /// <param name="url">Request URL of the webhook (required).</param>
        /// <param name="requestType">Request method of the webhook (required).</param>
        /// <param name="shouldSendBody">Indicates if the webhook sends body (required).</param>
        /// <param name="headers">Collection of the webhook headers (required).</param>
        /// <param name="queryParameters">Collection of the webhook query parameters (required).</param>
        /// <param name="isEnabled">Indicates if the webhook is active (required).</param>
        /// <param name="shouldSendCustomBody">Indicates if the webhook sends custom body (required).</param>
        /// <param name="customBody">Custom body of the webhook.</param>
        /// <param name="shouldReplaceParameters">Indicates if the webhook injects parameters (required).</param>
        /// <param name="shouldEscapeParameters">Indicates if the webhook escapes invalid characters in parameters (required).</param>
        /// <param name="name">Name of the webhook (required).</param>
        public WebHookPostModel(Guid projectId = default(Guid), WebHookEventTypeModel eventType = default(WebHookEventTypeModel), string description = default(string), string url = default(string), RequestTypeModel requestType = default(RequestTypeModel), bool shouldSendBody = default(bool), Dictionary<string, string> headers = default(Dictionary<string, string>), Dictionary<string, string> queryParameters = default(Dictionary<string, string>), bool isEnabled = default(bool), bool shouldSendCustomBody = default(bool), string customBody = default(string), bool shouldReplaceParameters = default(bool), bool shouldEscapeParameters = default(bool), string name = default(string))
        {
            this.ProjectId = projectId;
            this.EventType = eventType;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for WebHookPostModel and cannot be null");
            }
            this.Url = url;
            this.RequestType = requestType;
            this.ShouldSendBody = shouldSendBody;
            // to ensure "headers" is required (not null)
            if (headers == null)
            {
                throw new ArgumentNullException("headers is a required property for WebHookPostModel and cannot be null");
            }
            this.Headers = headers;
            // to ensure "queryParameters" is required (not null)
            if (queryParameters == null)
            {
                throw new ArgumentNullException("queryParameters is a required property for WebHookPostModel and cannot be null");
            }
            this.QueryParameters = queryParameters;
            this.IsEnabled = isEnabled;
            this.ShouldSendCustomBody = shouldSendCustomBody;
            this.ShouldReplaceParameters = shouldReplaceParameters;
            this.ShouldEscapeParameters = shouldEscapeParameters;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WebHookPostModel and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.CustomBody = customBody;
        }

        /// <summary>
        /// Unique ID of the webhook project
        /// </summary>
        /// <value>Unique ID of the webhook project</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Description of the webhook
        /// </summary>
        /// <value>Description of the webhook</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Request URL of the webhook
        /// </summary>
        /// <value>Request URL of the webhook</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Indicates if the webhook sends body
        /// </summary>
        /// <value>Indicates if the webhook sends body</value>
        [DataMember(Name = "shouldSendBody", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldSendBody { get; set; }

        /// <summary>
        /// Collection of the webhook headers
        /// </summary>
        /// <value>Collection of the webhook headers</value>
        [DataMember(Name = "headers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Collection of the webhook query parameters
        /// </summary>
        /// <value>Collection of the webhook query parameters</value>
        [DataMember(Name = "queryParameters", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> QueryParameters { get; set; }

        /// <summary>
        /// Indicates if the webhook is active
        /// </summary>
        /// <value>Indicates if the webhook is active</value>
        [DataMember(Name = "isEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Indicates if the webhook sends custom body
        /// </summary>
        /// <value>Indicates if the webhook sends custom body</value>
        [DataMember(Name = "shouldSendCustomBody", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldSendCustomBody { get; set; }

        /// <summary>
        /// Custom body of the webhook
        /// </summary>
        /// <value>Custom body of the webhook</value>
        [DataMember(Name = "customBody", EmitDefaultValue = true)]
        public string CustomBody { get; set; }

        /// <summary>
        /// Indicates if the webhook injects parameters
        /// </summary>
        /// <value>Indicates if the webhook injects parameters</value>
        [DataMember(Name = "shouldReplaceParameters", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldReplaceParameters { get; set; }

        /// <summary>
        /// Indicates if the webhook escapes invalid characters in parameters
        /// </summary>
        /// <value>Indicates if the webhook escapes invalid characters in parameters</value>
        [DataMember(Name = "shouldEscapeParameters", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldEscapeParameters { get; set; }

        /// <summary>
        /// Name of the webhook
        /// </summary>
        /// <value>Name of the webhook</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebHookPostModel {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  ShouldSendBody: ").Append(ShouldSendBody).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ShouldSendCustomBody: ").Append(ShouldSendCustomBody).Append("\n");
            sb.Append("  CustomBody: ").Append(CustomBody).Append("\n");
            sb.Append("  ShouldReplaceParameters: ").Append(ShouldReplaceParameters).Append("\n");
            sb.Append("  ShouldEscapeParameters: ").Append(ShouldEscapeParameters).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
