/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultsStatisticsStatusesApiResult
    /// </summary>
    [DataContract(Name = "TestResultsStatisticsStatusesApiResult")]
    public partial class TestResultsStatisticsStatusesApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsStatisticsStatusesApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestResultsStatisticsStatusesApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsStatisticsStatusesApiResult" /> class.
        /// </summary>
        /// <param name="inProgress">Number of test results which is running currently (required).</param>
        /// <param name="passed">Number of test results which successfully passed (required).</param>
        /// <param name="succeeded">Number of successful test results (required).</param>
        /// <param name="failed">Number of test results which failed with an error (required).</param>
        /// <param name="skipped">Number of test results which did not run and were skipped (required).</param>
        /// <param name="blocked">Number of test results which cannot be launched (required).</param>
        /// <param name="incomplete">Number of test results which are incomplete (required).</param>
        public TestResultsStatisticsStatusesApiResult(int inProgress = default(int), int passed = default(int), int succeeded = default(int), int failed = default(int), int skipped = default(int), int blocked = default(int), int incomplete = default(int))
        {
            this.InProgress = inProgress;
            this.Passed = passed;
            this.Succeeded = succeeded;
            this.Failed = failed;
            this.Skipped = skipped;
            this.Blocked = blocked;
            this.Incomplete = incomplete;
        }

        /// <summary>
        /// Number of test results which is running currently
        /// </summary>
        /// <value>Number of test results which is running currently</value>
        [DataMember(Name = "inProgress", IsRequired = true, EmitDefaultValue = true)]
        public int InProgress { get; set; }

        /// <summary>
        /// Number of test results which successfully passed
        /// </summary>
        /// <value>Number of test results which successfully passed</value>
        [DataMember(Name = "passed", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int Passed { get; set; }

        /// <summary>
        /// Number of successful test results
        /// </summary>
        /// <value>Number of successful test results</value>
        [DataMember(Name = "succeeded", IsRequired = true, EmitDefaultValue = true)]
        public int Succeeded { get; set; }

        /// <summary>
        /// Number of test results which failed with an error
        /// </summary>
        /// <value>Number of test results which failed with an error</value>
        [DataMember(Name = "failed", IsRequired = true, EmitDefaultValue = true)]
        public int Failed { get; set; }

        /// <summary>
        /// Number of test results which did not run and were skipped
        /// </summary>
        /// <value>Number of test results which did not run and were skipped</value>
        [DataMember(Name = "skipped", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int Skipped { get; set; }

        /// <summary>
        /// Number of test results which cannot be launched
        /// </summary>
        /// <value>Number of test results which cannot be launched</value>
        [DataMember(Name = "blocked", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public int Blocked { get; set; }

        /// <summary>
        /// Number of test results which are incomplete
        /// </summary>
        /// <value>Number of test results which are incomplete</value>
        [DataMember(Name = "incomplete", IsRequired = true, EmitDefaultValue = true)]
        public int Incomplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultsStatisticsStatusesApiResult {\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Incomplete: ").Append(Incomplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
