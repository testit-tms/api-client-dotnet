/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// AutoTestStepApiResult
    /// </summary>
    [DataContract(Name = "AutoTestStepApiResult")]
    public partial class AutoTestStepApiResult : IEquatable<AutoTestStepApiResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestStepApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutoTestStepApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTestStepApiResult" /> class.
        /// </summary>
        /// <param name="title">Step name. (required).</param>
        /// <param name="description">Detailed step description. It appears when the step is unfolded..</param>
        /// <param name="steps">Includes a nested step inside another step. The maximum nesting level is 15..</param>
        public AutoTestStepApiResult(string title = default(string), string description = default(string), List<AutoTestStepApiResult> steps = default(List<AutoTestStepApiResult>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for AutoTestStepApiResult and cannot be null");
            }
            this.Title = title;
            this.Description = description;
            this.Steps = steps;
        }

        /// <summary>
        /// Step name.
        /// </summary>
        /// <value>Step name.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Detailed step description. It appears when the step is unfolded.
        /// </summary>
        /// <value>Detailed step description. It appears when the step is unfolded.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Includes a nested step inside another step. The maximum nesting level is 15.
        /// </summary>
        /// <value>Includes a nested step inside another step. The maximum nesting level is 15.</value>
        [DataMember(Name = "steps", EmitDefaultValue = true)]
        public List<AutoTestStepApiResult> Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoTestStepApiResult {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoTestStepApiResult);
        }

        /// <summary>
        /// Returns true if AutoTestStepApiResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoTestStepApiResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoTestStepApiResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
