/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultShortApiResult
    /// </summary>
    [DataContract(Name = "TestResultShortApiResult")]
    public partial class TestResultShortApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultShortApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestResultShortApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultShortApiResult" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="outcome">outcome (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="traces">traces.</param>
        /// <param name="failureType">failureType.</param>
        /// <param name="message">message.</param>
        /// <param name="testPoint">testPoint.</param>
        /// <param name="createdDate">createdDate (required).</param>
        /// <param name="autoTest">autoTest.</param>
        /// <param name="attachments">attachments (required).</param>
        public TestResultShortApiResult(Guid id = default(Guid), string outcome = default(string), TestStatusApiResult status = default(TestStatusApiResult), string traces = default(string), string failureType = default(string), string message = default(string), TestPointShortApiResult testPoint = default(TestPointShortApiResult), DateTime createdDate = default(DateTime), AutoTestShortApiResult autoTest = default(AutoTestShortApiResult), List<AttachmentApiResult> attachments = default(List<AttachmentApiResult>))
        {
            this.Id = id;
            // to ensure "outcome" is required (not null)
            if (outcome == null)
            {
                throw new ArgumentNullException("outcome is a required property for TestResultShortApiResult and cannot be null");
            }
            this.Outcome = outcome;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TestResultShortApiResult and cannot be null");
            }
            this.Status = status;
            this.CreatedDate = createdDate;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for TestResultShortApiResult and cannot be null");
            }
            this.Attachments = attachments;
            this.Traces = traces;
            this.FailureType = failureType;
            this.Message = message;
            this.TestPoint = testPoint;
            this.AutoTest = autoTest;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", IsRequired = true, EmitDefaultValue = true)]
        public string Outcome { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TestStatusApiResult Status { get; set; }

        /// <summary>
        /// Gets or Sets Traces
        /// </summary>
        [DataMember(Name = "traces", EmitDefaultValue = true)]
        public string Traces { get; set; }

        /// <summary>
        /// Gets or Sets FailureType
        /// </summary>
        [DataMember(Name = "failureType", EmitDefaultValue = true)]
        public string FailureType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets TestPoint
        /// </summary>
        [DataMember(Name = "testPoint", EmitDefaultValue = true)]
        public TestPointShortApiResult TestPoint { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets AutoTest
        /// </summary>
        [DataMember(Name = "autoTest", EmitDefaultValue = true)]
        public AutoTestShortApiResult AutoTest { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public List<AttachmentApiResult> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultShortApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Traces: ").Append(Traces).Append("\n");
            sb.Append("  FailureType: ").Append(FailureType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  TestPoint: ").Append(TestPoint).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  AutoTest: ").Append(AutoTest).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
