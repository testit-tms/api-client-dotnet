/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPointResultApiResult
    /// </summary>
    [DataContract(Name = "TestPointResultApiResult")]
    public partial class TestPointResultApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointResultApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestPointResultApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointResultApiResult" /> class.
        /// </summary>
        /// <param name="testPointId">testPointId.</param>
        /// <param name="aggregatedOutcome">aggregatedOutcome.</param>
        /// <param name="aggregatedStatus">aggregatedStatus.</param>
        /// <param name="workItemGlobalId">workItemGlobalId.</param>
        /// <param name="workItemName">workItemName.</param>
        /// <param name="configurationName">configurationName.</param>
        /// <param name="testResults">testResults (required).</param>
        public TestPointResultApiResult(Guid? testPointId = default(Guid?), string aggregatedOutcome = default(string), TestStatusApiResult aggregatedStatus = default(TestStatusApiResult), long? workItemGlobalId = default(long?), string workItemName = default(string), string configurationName = default(string), List<TestResultShortApiResult> testResults = default(List<TestResultShortApiResult>))
        {
            // to ensure "testResults" is required (not null)
            if (testResults == null)
            {
                throw new ArgumentNullException("testResults is a required property for TestPointResultApiResult and cannot be null");
            }
            this.TestResults = testResults;
            this.TestPointId = testPointId;
            this.AggregatedOutcome = aggregatedOutcome;
            this.AggregatedStatus = aggregatedStatus;
            this.WorkItemGlobalId = workItemGlobalId;
            this.WorkItemName = workItemName;
            this.ConfigurationName = configurationName;
        }

        /// <summary>
        /// Gets or Sets TestPointId
        /// </summary>
        [DataMember(Name = "testPointId", EmitDefaultValue = true)]
        public Guid? TestPointId { get; set; }

        /// <summary>
        /// Gets or Sets AggregatedOutcome
        /// </summary>
        [DataMember(Name = "aggregatedOutcome", EmitDefaultValue = true)]
        [Obsolete]
        public string AggregatedOutcome { get; set; }

        /// <summary>
        /// Gets or Sets AggregatedStatus
        /// </summary>
        [DataMember(Name = "aggregatedStatus", EmitDefaultValue = true)]
        public TestStatusApiResult AggregatedStatus { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemGlobalId
        /// </summary>
        [DataMember(Name = "workItemGlobalId", EmitDefaultValue = true)]
        public long? WorkItemGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets WorkItemName
        /// </summary>
        [DataMember(Name = "workItemName", EmitDefaultValue = true)]
        public string WorkItemName { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationName
        /// </summary>
        [DataMember(Name = "configurationName", EmitDefaultValue = true)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Gets or Sets TestResults
        /// </summary>
        [DataMember(Name = "testResults", IsRequired = true, EmitDefaultValue = true)]
        public List<TestResultShortApiResult> TestResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPointResultApiResult {\n");
            sb.Append("  TestPointId: ").Append(TestPointId).Append("\n");
            sb.Append("  AggregatedOutcome: ").Append(AggregatedOutcome).Append("\n");
            sb.Append("  AggregatedStatus: ").Append(AggregatedStatus).Append("\n");
            sb.Append("  WorkItemGlobalId: ").Append(WorkItemGlobalId).Append("\n");
            sb.Append("  WorkItemName: ").Append(WorkItemName).Append("\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
