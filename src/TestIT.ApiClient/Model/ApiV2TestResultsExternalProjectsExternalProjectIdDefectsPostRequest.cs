/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest
    /// </summary>
    [DataContract(Name = "_api_v2_testResults_external_projects__externalProjectId__defects_post_request")]
    public partial class ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest : IEquatable<ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest" /> class.
        /// </summary>
        /// <param name="testResultIds">Linked test result IDs (required).</param>
        /// <param name="form">form (required).</param>
        public ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest(List<Guid> testResultIds = default(List<Guid>), CreateDefectApiModelForm form = default(CreateDefectApiModelForm))
        {
            // to ensure "testResultIds" is required (not null)
            if (testResultIds == null)
            {
                throw new ArgumentNullException("testResultIds is a required property for ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest and cannot be null");
            }
            this.TestResultIds = testResultIds;
            // to ensure "form" is required (not null)
            if (form == null)
            {
                throw new ArgumentNullException("form is a required property for ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest and cannot be null");
            }
            this.Form = form;
        }

        /// <summary>
        /// Linked test result IDs
        /// </summary>
        /// <value>Linked test result IDs</value>
        [DataMember(Name = "testResultIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> TestResultIds { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", IsRequired = true, EmitDefaultValue = true)]
        public CreateDefectApiModelForm Form { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest {\n");
            sb.Append("  TestResultIds: ").Append(TestResultIds).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest);
        }

        /// <summary>
        /// Returns true if ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV2TestResultsExternalProjectsExternalProjectIdDefectsPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TestResultIds == input.TestResultIds ||
                    this.TestResultIds != null &&
                    input.TestResultIds != null &&
                    this.TestResultIds.SequenceEqual(input.TestResultIds)
                ) && 
                (
                    this.Form == input.Form ||
                    (this.Form != null &&
                    this.Form.Equals(input.Form))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TestResultIds != null)
                {
                    hashCode = (hashCode * 59) + this.TestResultIds.GetHashCode();
                }
                if (this.Form != null)
                {
                    hashCode = (hashCode * 59) + this.Form.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
