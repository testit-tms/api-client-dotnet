/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// FailureCategoryApiResult
    /// </summary>
    [DataContract(Name = "FailureCategoryApiResult")]
    public partial class FailureCategoryApiResult : IValidatableObject
    {

        /// <summary>
        /// Category type
        /// </summary>
        /// <value>Category type</value>
        [DataMember(Name = "failureCategory", IsRequired = true, EmitDefaultValue = true)]
        public FailureCategory FailureCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FailureCategoryApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FailureCategoryApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FailureCategoryApiResult" /> class.
        /// </summary>
        /// <param name="id">Failure category identifier (required).</param>
        /// <param name="name">Failure category name.</param>
        /// <param name="isDeleted">Indicates if the entity is deleted (required).</param>
        /// <param name="failureCategory">Category type (required).</param>
        /// <param name="createdDate">Failure category creation date (required).</param>
        /// <param name="createdById">Failure category creator identifier (required).</param>
        /// <param name="modifiedDate">Failure category last modification date.</param>
        /// <param name="modifiedById">Failure category last modifier identifier.</param>
        /// <param name="projects">Projects names (required).</param>
        /// <param name="failureClassRegexes">Failure category regexes (required).</param>
        public FailureCategoryApiResult(Guid id = default(Guid), string name = default(string), bool isDeleted = default(bool), FailureCategory failureCategory = default(FailureCategory), DateTime createdDate = default(DateTime), Guid createdById = default(Guid), DateTime? modifiedDate = default(DateTime?), Guid? modifiedById = default(Guid?), List<ProjectNameApiResult> projects = default(List<ProjectNameApiResult>), List<FailureClassRegexApiResult> failureClassRegexes = default(List<FailureClassRegexApiResult>))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            this.FailureCategory = failureCategory;
            this.CreatedDate = createdDate;
            this.CreatedById = createdById;
            // to ensure "projects" is required (not null)
            if (projects == null)
            {
                throw new ArgumentNullException("projects is a required property for FailureCategoryApiResult and cannot be null");
            }
            this.Projects = projects;
            // to ensure "failureClassRegexes" is required (not null)
            if (failureClassRegexes == null)
            {
                throw new ArgumentNullException("failureClassRegexes is a required property for FailureCategoryApiResult and cannot be null");
            }
            this.FailureClassRegexes = failureClassRegexes;
            this.Name = name;
            this.ModifiedDate = modifiedDate;
            this.ModifiedById = modifiedById;
        }

        /// <summary>
        /// Failure category identifier
        /// </summary>
        /// <value>Failure category identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Failure category name
        /// </summary>
        /// <value>Failure category name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the entity is deleted
        /// </summary>
        /// <value>Indicates if the entity is deleted</value>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Failure category creation date
        /// </summary>
        /// <value>Failure category creation date</value>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Failure category creator identifier
        /// </summary>
        /// <value>Failure category creator identifier</value>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Failure category last modification date
        /// </summary>
        /// <value>Failure category last modification date</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Failure category last modifier identifier
        /// </summary>
        /// <value>Failure category last modifier identifier</value>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Projects names
        /// </summary>
        /// <value>Projects names</value>
        [DataMember(Name = "projects", IsRequired = true, EmitDefaultValue = true)]
        public List<ProjectNameApiResult> Projects { get; set; }

        /// <summary>
        /// Failure category regexes
        /// </summary>
        /// <value>Failure category regexes</value>
        [DataMember(Name = "failureClassRegexes", IsRequired = true, EmitDefaultValue = true)]
        public List<FailureClassRegexApiResult> FailureClassRegexes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FailureCategoryApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  FailureCategory: ").Append(FailureCategory).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  FailureClassRegexes: ").Append(FailureClassRegexes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
