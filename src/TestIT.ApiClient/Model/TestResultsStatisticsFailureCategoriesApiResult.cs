/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultsStatisticsFailureCategoriesApiResult
    /// </summary>
    [DataContract(Name = "TestResultsStatisticsFailureCategoriesApiResult")]
    public partial class TestResultsStatisticsFailureCategoriesApiResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsStatisticsFailureCategoriesApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestResultsStatisticsFailureCategoriesApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsStatisticsFailureCategoriesApiResult" /> class.
        /// </summary>
        /// <param name="infrastructureDefect">Number of test results which outcomes were caused by some infrastructure defect (required).</param>
        /// <param name="productDefect">Number of test results which outcomes were caused by some tested product defect (required).</param>
        /// <param name="testDefect">Number of test results which outcomes were caused by test itself (required).</param>
        public TestResultsStatisticsFailureCategoriesApiResult(int infrastructureDefect = default(int), int productDefect = default(int), int testDefect = default(int))
        {
            this.InfrastructureDefect = infrastructureDefect;
            this.ProductDefect = productDefect;
            this.TestDefect = testDefect;
        }

        /// <summary>
        /// Number of test results which outcomes were caused by some infrastructure defect
        /// </summary>
        /// <value>Number of test results which outcomes were caused by some infrastructure defect</value>
        [DataMember(Name = "infrastructureDefect", IsRequired = true, EmitDefaultValue = true)]
        public int InfrastructureDefect { get; set; }

        /// <summary>
        /// Number of test results which outcomes were caused by some tested product defect
        /// </summary>
        /// <value>Number of test results which outcomes were caused by some tested product defect</value>
        [DataMember(Name = "productDefect", IsRequired = true, EmitDefaultValue = true)]
        public int ProductDefect { get; set; }

        /// <summary>
        /// Number of test results which outcomes were caused by test itself
        /// </summary>
        /// <value>Number of test results which outcomes were caused by test itself</value>
        [DataMember(Name = "testDefect", IsRequired = true, EmitDefaultValue = true)]
        public int TestDefect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultsStatisticsFailureCategoriesApiResult {\n");
            sb.Append("  InfrastructureDefect: ").Append(InfrastructureDefect).Append("\n");
            sb.Append("  ProductDefect: ").Append(ProductDefect).Append("\n");
            sb.Append("  TestDefect: ").Append(TestDefect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
