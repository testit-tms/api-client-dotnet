/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultStepCommentUpdateRequest
    /// </summary>
    [DataContract(Name = "TestResultStepCommentUpdateRequest")]
    public partial class TestResultStepCommentUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultStepCommentUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestResultStepCommentUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultStepCommentUpdateRequest" /> class.
        /// </summary>
        /// <param name="id">Entity unique identifier (required).</param>
        /// <param name="text">text (required).</param>
        /// <param name="stepId">stepId (required).</param>
        /// <param name="parentStepId">parentStepId.</param>
        /// <param name="attachments">attachments (required).</param>
        public TestResultStepCommentUpdateRequest(Guid id = default(Guid), string text = default(string), Guid stepId = default(Guid), Guid? parentStepId = default(Guid?), List<AttachmentUpdateRequest> attachments = default(List<AttachmentUpdateRequest>))
        {
            this.Id = id;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for TestResultStepCommentUpdateRequest and cannot be null");
            }
            this.Text = text;
            this.StepId = stepId;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for TestResultStepCommentUpdateRequest and cannot be null");
            }
            this.Attachments = attachments;
            this.ParentStepId = parentStepId;
        }

        /// <summary>
        /// Entity unique identifier
        /// </summary>
        /// <value>Entity unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name = "stepId", IsRequired = true, EmitDefaultValue = true)]
        public Guid StepId { get; set; }

        /// <summary>
        /// Gets or Sets ParentStepId
        /// </summary>
        [DataMember(Name = "parentStepId", EmitDefaultValue = true)]
        public Guid? ParentStepId { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public List<AttachmentUpdateRequest> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultStepCommentUpdateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  ParentStepId: ").Append(ParentStepId).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
