/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestSuiteApiResult
    /// </summary>
    [DataContract(Name = "TestSuiteApiResult")]
    public partial class TestSuiteApiResult : IValidatableObject
    {

        /// <summary>
        /// Type of the test suite
        /// </summary>
        /// <value>Type of the test suite</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TestSuiteTypeApiResult Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteApiResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestSuiteApiResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSuiteApiResult" /> class.
        /// </summary>
        /// <param name="id">Unique ID of the test suite (required).</param>
        /// <param name="name">Name of the test suite (required).</param>
        /// <param name="type">Type of the test suite (required).</param>
        /// <param name="saveStructure">Flag indicating whether the structure of the test suite should be saved (required).</param>
        /// <param name="autoRefresh">Flag indicating whether auto-refresh functionality is enabled for the test suite (required).</param>
        /// <param name="refreshDate">The last time the test suite&#39;s results were refreshed (required).</param>
        /// <param name="parentId">Unique ID of the parent test suite, if any (required).</param>
        /// <param name="testPlanId">Unique ID of the associated test plan (required).</param>
        public TestSuiteApiResult(Guid id = default(Guid), string name = default(string), TestSuiteTypeApiResult type = default(TestSuiteTypeApiResult), bool? saveStructure = default(bool?), bool? autoRefresh = default(bool?), DateTime? refreshDate = default(DateTime?), Guid? parentId = default(Guid?), Guid? testPlanId = default(Guid?))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TestSuiteApiResult and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "saveStructure" is required (not null)
            if (saveStructure == null)
            {
                throw new ArgumentNullException("saveStructure is a required property for TestSuiteApiResult and cannot be null");
            }
            this.SaveStructure = saveStructure;
            // to ensure "autoRefresh" is required (not null)
            if (autoRefresh == null)
            {
                throw new ArgumentNullException("autoRefresh is a required property for TestSuiteApiResult and cannot be null");
            }
            this.AutoRefresh = autoRefresh;
            // to ensure "refreshDate" is required (not null)
            if (refreshDate == null)
            {
                throw new ArgumentNullException("refreshDate is a required property for TestSuiteApiResult and cannot be null");
            }
            this.RefreshDate = refreshDate;
            // to ensure "parentId" is required (not null)
            if (parentId == null)
            {
                throw new ArgumentNullException("parentId is a required property for TestSuiteApiResult and cannot be null");
            }
            this.ParentId = parentId;
            // to ensure "testPlanId" is required (not null)
            if (testPlanId == null)
            {
                throw new ArgumentNullException("testPlanId is a required property for TestSuiteApiResult and cannot be null");
            }
            this.TestPlanId = testPlanId;
        }

        /// <summary>
        /// Unique ID of the test suite
        /// </summary>
        /// <value>Unique ID of the test suite</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Name of the test suite
        /// </summary>
        /// <value>Name of the test suite</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Flag indicating whether the structure of the test suite should be saved
        /// </summary>
        /// <value>Flag indicating whether the structure of the test suite should be saved</value>
        [DataMember(Name = "saveStructure", IsRequired = true, EmitDefaultValue = true)]
        public bool? SaveStructure { get; set; }

        /// <summary>
        /// Flag indicating whether auto-refresh functionality is enabled for the test suite
        /// </summary>
        /// <value>Flag indicating whether auto-refresh functionality is enabled for the test suite</value>
        [DataMember(Name = "autoRefresh", IsRequired = true, EmitDefaultValue = true)]
        public bool? AutoRefresh { get; set; }

        /// <summary>
        /// The last time the test suite&#39;s results were refreshed
        /// </summary>
        /// <value>The last time the test suite&#39;s results were refreshed</value>
        [DataMember(Name = "refreshDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? RefreshDate { get; set; }

        /// <summary>
        /// Unique ID of the parent test suite, if any
        /// </summary>
        /// <value>Unique ID of the parent test suite, if any</value>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? ParentId { get; set; }

        /// <summary>
        /// Unique ID of the associated test plan
        /// </summary>
        /// <value>Unique ID of the associated test plan</value>
        [DataMember(Name = "testPlanId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestSuiteApiResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SaveStructure: ").Append(SaveStructure).Append("\n");
            sb.Append("  AutoRefresh: ").Append(AutoRefresh).Append("\n");
            sb.Append("  RefreshDate: ").Append(RefreshDate).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
