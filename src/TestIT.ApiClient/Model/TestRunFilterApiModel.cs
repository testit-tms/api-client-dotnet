/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunFilterApiModel
    /// </summary>
    [DataContract(Name = "TestRunFilterApiModel")]
    public partial class TestRunFilterApiModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunFilterApiModel" /> class.
        /// </summary>
        /// <param name="projectIds">Specifies a test run project IDs to search for.</param>
        /// <param name="name">Specifies test run name.</param>
        /// <param name="states">Specifies a test run states to search for.</param>
        /// <param name="statusCodes">Specifies a test run status codes to search for.</param>
        /// <param name="createdDate">Specifies a test run range of created date to search for.</param>
        /// <param name="startedDate">Specifies a test run range of started date to search for.</param>
        /// <param name="createdByIds">Specifies a test run creator IDs to search for.</param>
        /// <param name="modifiedByIds">Specifies a test run last editor IDs to search for.</param>
        /// <param name="isDeleted">Specifies a test run deleted status to search for.</param>
        /// <param name="autoTestsCount">Number of autoTests run in the test run.</param>
        /// <param name="testResultsOutcome">Specifies test results outcomes.</param>
        /// <param name="testResultsStatusCodes">Specifies test results status codes.</param>
        /// <param name="failureCategory">Specifies failure categories.</param>
        /// <param name="completedDate">Specifies a test run range of completed date to search for.</param>
        /// <param name="testResultsConfigurationIds">Specifies a test result configuration IDs to search for.</param>
        public TestRunFilterApiModel(List<Guid> projectIds = default(List<Guid>), string name = default(string), List<TestRunState> states = default(List<TestRunState>), List<string> statusCodes = default(List<string>), DateTimeRangeSelectorModel createdDate = default(DateTimeRangeSelectorModel), DateTimeRangeSelectorModel startedDate = default(DateTimeRangeSelectorModel), List<Guid> createdByIds = default(List<Guid>), List<Guid> modifiedByIds = default(List<Guid>), bool? isDeleted = default(bool?), Int32RangeSelectorModel autoTestsCount = default(Int32RangeSelectorModel), List<TestResultOutcome> testResultsOutcome = default(List<TestResultOutcome>), List<string> testResultsStatusCodes = default(List<string>), List<FailureCategory> failureCategory = default(List<FailureCategory>), DateTimeRangeSelectorModel completedDate = default(DateTimeRangeSelectorModel), List<Guid> testResultsConfigurationIds = default(List<Guid>))
        {
            this.ProjectIds = projectIds;
            this.Name = name;
            this.States = states;
            this.StatusCodes = statusCodes;
            this.CreatedDate = createdDate;
            this.StartedDate = startedDate;
            this.CreatedByIds = createdByIds;
            this.ModifiedByIds = modifiedByIds;
            this.IsDeleted = isDeleted;
            this.AutoTestsCount = autoTestsCount;
            this.TestResultsOutcome = testResultsOutcome;
            this.TestResultsStatusCodes = testResultsStatusCodes;
            this.FailureCategory = failureCategory;
            this.CompletedDate = completedDate;
            this.TestResultsConfigurationIds = testResultsConfigurationIds;
        }

        /// <summary>
        /// Specifies a test run project IDs to search for
        /// </summary>
        /// <value>Specifies a test run project IDs to search for</value>
        [DataMember(Name = "projectIds", EmitDefaultValue = true)]
        public List<Guid> ProjectIds { get; set; }

        /// <summary>
        /// Specifies test run name
        /// </summary>
        /// <value>Specifies test run name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies a test run states to search for
        /// </summary>
        /// <value>Specifies a test run states to search for</value>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        [Obsolete]
        public List<TestRunState> States { get; set; }

        /// <summary>
        /// Specifies a test run status codes to search for
        /// </summary>
        /// <value>Specifies a test run status codes to search for</value>
        [DataMember(Name = "statusCodes", EmitDefaultValue = true)]
        public List<string> StatusCodes { get; set; }

        /// <summary>
        /// Specifies a test run range of created date to search for
        /// </summary>
        /// <value>Specifies a test run range of created date to search for</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CreatedDate { get; set; }

        /// <summary>
        /// Specifies a test run range of started date to search for
        /// </summary>
        /// <value>Specifies a test run range of started date to search for</value>
        [DataMember(Name = "startedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel StartedDate { get; set; }

        /// <summary>
        /// Specifies a test run creator IDs to search for
        /// </summary>
        /// <value>Specifies a test run creator IDs to search for</value>
        [DataMember(Name = "createdByIds", EmitDefaultValue = true)]
        public List<Guid> CreatedByIds { get; set; }

        /// <summary>
        /// Specifies a test run last editor IDs to search for
        /// </summary>
        /// <value>Specifies a test run last editor IDs to search for</value>
        [DataMember(Name = "modifiedByIds", EmitDefaultValue = true)]
        public List<Guid> ModifiedByIds { get; set; }

        /// <summary>
        /// Specifies a test run deleted status to search for
        /// </summary>
        /// <value>Specifies a test run deleted status to search for</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Number of autoTests run in the test run
        /// </summary>
        /// <value>Number of autoTests run in the test run</value>
        [DataMember(Name = "autoTestsCount", EmitDefaultValue = true)]
        public Int32RangeSelectorModel AutoTestsCount { get; set; }

        /// <summary>
        /// Specifies test results outcomes
        /// </summary>
        /// <value>Specifies test results outcomes</value>
        [DataMember(Name = "testResultsOutcome", EmitDefaultValue = true)]
        [Obsolete]
        public List<TestResultOutcome> TestResultsOutcome { get; set; }

        /// <summary>
        /// Specifies test results status codes
        /// </summary>
        /// <value>Specifies test results status codes</value>
        [DataMember(Name = "testResultsStatusCodes", EmitDefaultValue = true)]
        public List<string> TestResultsStatusCodes { get; set; }

        /// <summary>
        /// Specifies failure categories
        /// </summary>
        /// <value>Specifies failure categories</value>
        [DataMember(Name = "failureCategory", EmitDefaultValue = true)]
        public List<FailureCategory> FailureCategory { get; set; }

        /// <summary>
        /// Specifies a test run range of completed date to search for
        /// </summary>
        /// <value>Specifies a test run range of completed date to search for</value>
        [DataMember(Name = "completedDate", EmitDefaultValue = true)]
        public DateTimeRangeSelectorModel CompletedDate { get; set; }

        /// <summary>
        /// Specifies a test result configuration IDs to search for
        /// </summary>
        /// <value>Specifies a test result configuration IDs to search for</value>
        [DataMember(Name = "testResultsConfigurationIds", EmitDefaultValue = true)]
        public List<Guid> TestResultsConfigurationIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunFilterApiModel {\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  StatusCodes: ").Append(StatusCodes).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  StartedDate: ").Append(StartedDate).Append("\n");
            sb.Append("  CreatedByIds: ").Append(CreatedByIds).Append("\n");
            sb.Append("  ModifiedByIds: ").Append(ModifiedByIds).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  AutoTestsCount: ").Append(AutoTestsCount).Append("\n");
            sb.Append("  TestResultsOutcome: ").Append(TestResultsOutcome).Append("\n");
            sb.Append("  TestResultsStatusCodes: ").Append(TestResultsStatusCodes).Append("\n");
            sb.Append("  FailureCategory: ").Append(FailureCategory).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  TestResultsConfigurationIds: ").Append(TestResultsConfigurationIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
