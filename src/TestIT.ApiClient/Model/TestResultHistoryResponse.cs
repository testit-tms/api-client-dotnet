/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestResultHistoryResponse
    /// </summary>
    [DataContract(Name = "TestResultHistoryResponse")]
    public partial class TestResultHistoryResponse : IEquatable<TestResultHistoryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultHistoryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestResultHistoryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultHistoryResponse" /> class.
        /// </summary>
        /// <param name="id">Internal test result identifier (required).</param>
        /// <param name="createdDate">Test result creation date (required).</param>
        /// <param name="modifiedDate">Test result last modification date (required).</param>
        /// <param name="userId">Internal identifier of user who stopped test run related to the test result or user who created the test result                If test run was stopped, this property equals identifier of user who stopped it.  Otherwise, the property equals identifier of user who created the test result (required).</param>
        /// <param name="testRunId">Identifier of test run related to the test result.</param>
        /// <param name="testRunName">Name of test run related to the test result.</param>
        /// <param name="createdByUserName">Username of user who created test run.</param>
        /// <param name="testPlanId">Internal identifier of test plan related to the test result&#39;s test run.</param>
        /// <param name="testPlanGlobalId">Global identifier of test plan related to the test result&#39;s test run.</param>
        /// <param name="testPlanName">Name of test plan related to the test result&#39;s test run.</param>
        /// <param name="configurationName">Configuration name of test point related to the test result or from test result itself                If test point related to the test result has configuration, this property will be equal to the test point configuration name.  Otherwise, this property will be equal to the test result configuration name.</param>
        /// <param name="isAutomated">Boolean flag defines if test point related to the test result is automated or not (required).</param>
        /// <param name="outcome">Outcome from test result with max modified date or from first created test result                Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.                If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the  worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the  test run..</param>
        /// <param name="comment">Test result comment                If any test result related to the test run is linked with autotest, comment will have default value.  Otherwise, the comment equals to the comment of first created test result in the test run.</param>
        /// <param name="links">Test result links                If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.  Otherwise, the links equals to the links of first created test result in the test run..</param>
        /// <param name="startedOn">Start date time from test result or from test run (if test run new state is Running or Completed state).</param>
        /// <param name="completedOn">End date time from test result or from test run (if test run new state is In progress, Stopped or Completed).</param>
        /// <param name="duration">Duration of first created test result in the test run.</param>
        /// <param name="createdById">Unique identifier of user who created first test result in the test run (required).</param>
        /// <param name="modifiedById">Unique identifier of user who applied last modification of first test result in the test run.</param>
        /// <param name="attachments">Attachments related to the test result                If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified  test result. Otherwise, the attachments equals to the attachments of first created test result in the test run..</param>
        /// <param name="workItemVersionId">Unique identifier of workitem version related to the first test result in the test run.</param>
        /// <param name="workItemVersionNumber">Number of workitem version related to the first test result in the test run.</param>
        /// <param name="launchSource">launchSource.</param>
        /// <param name="failureClassIds">Unique identifier of failure classes related to the first test result in the test run (required).</param>
        /// <param name="parameters">Parameters of test result.</param>
        public TestResultHistoryResponse(Guid id = default(Guid), DateTime createdDate = default(DateTime), DateTime modifiedDate = default(DateTime), Guid userId = default(Guid), Guid? testRunId = default(Guid?), string testRunName = default(string), string createdByUserName = default(string), Guid? testPlanId = default(Guid?), long? testPlanGlobalId = default(long?), string testPlanName = default(string), string configurationName = default(string), bool isAutomated = default(bool), string outcome = default(string), string comment = default(string), List<LinkModel> links = default(List<LinkModel>), DateTime? startedOn = default(DateTime?), DateTime? completedOn = default(DateTime?), long? duration = default(long?), Guid createdById = default(Guid), Guid? modifiedById = default(Guid?), List<AttachmentModel> attachments = default(List<AttachmentModel>), Guid? workItemVersionId = default(Guid?), int? workItemVersionNumber = default(int?), string launchSource = default(string), List<Guid> failureClassIds = default(List<Guid>), Dictionary<string, string> parameters = default(Dictionary<string, string>))
        {
            this.Id = id;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.UserId = userId;
            this.IsAutomated = isAutomated;
            this.CreatedById = createdById;
            // to ensure "failureClassIds" is required (not null)
            if (failureClassIds == null)
            {
                throw new ArgumentNullException("failureClassIds is a required property for TestResultHistoryResponse and cannot be null");
            }
            this.FailureClassIds = failureClassIds;
            this.TestRunId = testRunId;
            this.TestRunName = testRunName;
            this.CreatedByUserName = createdByUserName;
            this.TestPlanId = testPlanId;
            this.TestPlanGlobalId = testPlanGlobalId;
            this.TestPlanName = testPlanName;
            this.ConfigurationName = configurationName;
            this.Outcome = outcome;
            this.Comment = comment;
            this.Links = links;
            this.StartedOn = startedOn;
            this.CompletedOn = completedOn;
            this.Duration = duration;
            this.ModifiedById = modifiedById;
            this.Attachments = attachments;
            this.WorkItemVersionId = workItemVersionId;
            this.WorkItemVersionNumber = workItemVersionNumber;
            this.LaunchSource = launchSource;
            this.Parameters = parameters;
        }

        /// <summary>
        /// Internal test result identifier
        /// </summary>
        /// <value>Internal test result identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Test result creation date
        /// </summary>
        /// <value>Test result creation date</value>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Test result last modification date
        /// </summary>
        /// <value>Test result last modification date</value>
        [DataMember(Name = "modifiedDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Internal identifier of user who stopped test run related to the test result or user who created the test result                If test run was stopped, this property equals identifier of user who stopped it.  Otherwise, the property equals identifier of user who created the test result
        /// </summary>
        /// <value>Internal identifier of user who stopped test run related to the test result or user who created the test result                If test run was stopped, this property equals identifier of user who stopped it.  Otherwise, the property equals identifier of user who created the test result</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Identifier of test run related to the test result
        /// </summary>
        /// <value>Identifier of test run related to the test result</value>
        [DataMember(Name = "testRunId", EmitDefaultValue = true)]
        public Guid? TestRunId { get; set; }

        /// <summary>
        /// Name of test run related to the test result
        /// </summary>
        /// <value>Name of test run related to the test result</value>
        [DataMember(Name = "testRunName", EmitDefaultValue = true)]
        public string TestRunName { get; set; }

        /// <summary>
        /// Username of user who created test run
        /// </summary>
        /// <value>Username of user who created test run</value>
        [DataMember(Name = "createdByUserName", EmitDefaultValue = true)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Internal identifier of test plan related to the test result&#39;s test run
        /// </summary>
        /// <value>Internal identifier of test plan related to the test result&#39;s test run</value>
        [DataMember(Name = "testPlanId", EmitDefaultValue = true)]
        public Guid? TestPlanId { get; set; }

        /// <summary>
        /// Global identifier of test plan related to the test result&#39;s test run
        /// </summary>
        /// <value>Global identifier of test plan related to the test result&#39;s test run</value>
        [DataMember(Name = "testPlanGlobalId", EmitDefaultValue = true)]
        public long? TestPlanGlobalId { get; set; }

        /// <summary>
        /// Name of test plan related to the test result&#39;s test run
        /// </summary>
        /// <value>Name of test plan related to the test result&#39;s test run</value>
        [DataMember(Name = "testPlanName", EmitDefaultValue = true)]
        public string TestPlanName { get; set; }

        /// <summary>
        /// Configuration name of test point related to the test result or from test result itself                If test point related to the test result has configuration, this property will be equal to the test point configuration name.  Otherwise, this property will be equal to the test result configuration name
        /// </summary>
        /// <value>Configuration name of test point related to the test result or from test result itself                If test point related to the test result has configuration, this property will be equal to the test point configuration name.  Otherwise, this property will be equal to the test result configuration name</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = true)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Boolean flag defines if test point related to the test result is automated or not
        /// </summary>
        /// <value>Boolean flag defines if test point related to the test result is automated or not</value>
        [DataMember(Name = "isAutomated", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAutomated { get; set; }

        /// <summary>
        /// Outcome from test result with max modified date or from first created test result                Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.                If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the  worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the  test run.
        /// </summary>
        /// <value>Outcome from test result with max modified date or from first created test result                Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.                If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the  worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the  test run.</value>
        [DataMember(Name = "outcome", EmitDefaultValue = true)]
        public string Outcome { get; set; }

        /// <summary>
        /// Test result comment                If any test result related to the test run is linked with autotest, comment will have default value.  Otherwise, the comment equals to the comment of first created test result in the test run
        /// </summary>
        /// <value>Test result comment                If any test result related to the test run is linked with autotest, comment will have default value.  Otherwise, the comment equals to the comment of first created test result in the test run</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Test result links                If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.  Otherwise, the links equals to the links of first created test result in the test run.
        /// </summary>
        /// <value>Test result links                If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.  Otherwise, the links equals to the links of first created test result in the test run.</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<LinkModel> Links { get; set; }

        /// <summary>
        /// Start date time from test result or from test run (if test run new state is Running or Completed state)
        /// </summary>
        /// <value>Start date time from test result or from test run (if test run new state is Running or Completed state)</value>
        [DataMember(Name = "startedOn", EmitDefaultValue = true)]
        public DateTime? StartedOn { get; set; }

        /// <summary>
        /// End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)
        /// </summary>
        /// <value>End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)</value>
        [DataMember(Name = "completedOn", EmitDefaultValue = true)]
        public DateTime? CompletedOn { get; set; }

        /// <summary>
        /// Duration of first created test result in the test run
        /// </summary>
        /// <value>Duration of first created test result in the test run</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public long? Duration { get; set; }

        /// <summary>
        /// Unique identifier of user who created first test result in the test run
        /// </summary>
        /// <value>Unique identifier of user who created first test result in the test run</value>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedById { get; set; }

        /// <summary>
        /// Unique identifier of user who applied last modification of first test result in the test run
        /// </summary>
        /// <value>Unique identifier of user who applied last modification of first test result in the test run</value>
        [DataMember(Name = "modifiedById", EmitDefaultValue = true)]
        public Guid? ModifiedById { get; set; }

        /// <summary>
        /// Attachments related to the test result                If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified  test result. Otherwise, the attachments equals to the attachments of first created test result in the test run.
        /// </summary>
        /// <value>Attachments related to the test result                If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified  test result. Otherwise, the attachments equals to the attachments of first created test result in the test run.</value>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<AttachmentModel> Attachments { get; set; }

        /// <summary>
        /// Unique identifier of workitem version related to the first test result in the test run
        /// </summary>
        /// <value>Unique identifier of workitem version related to the first test result in the test run</value>
        [DataMember(Name = "workItemVersionId", EmitDefaultValue = true)]
        public Guid? WorkItemVersionId { get; set; }

        /// <summary>
        /// Number of workitem version related to the first test result in the test run
        /// </summary>
        /// <value>Number of workitem version related to the first test result in the test run</value>
        [DataMember(Name = "workItemVersionNumber", EmitDefaultValue = true)]
        public int? WorkItemVersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets LaunchSource
        /// </summary>
        [DataMember(Name = "launchSource", EmitDefaultValue = true)]
        public string LaunchSource { get; set; }

        /// <summary>
        /// Unique identifier of failure classes related to the first test result in the test run
        /// </summary>
        /// <value>Unique identifier of failure classes related to the first test result in the test run</value>
        [DataMember(Name = "failureClassIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> FailureClassIds { get; set; }

        /// <summary>
        /// Parameters of test result
        /// </summary>
        /// <value>Parameters of test result</value>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultHistoryResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TestRunId: ").Append(TestRunId).Append("\n");
            sb.Append("  TestRunName: ").Append(TestRunName).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  TestPlanId: ").Append(TestPlanId).Append("\n");
            sb.Append("  TestPlanGlobalId: ").Append(TestPlanGlobalId).Append("\n");
            sb.Append("  TestPlanName: ").Append(TestPlanName).Append("\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  WorkItemVersionId: ").Append(WorkItemVersionId).Append("\n");
            sb.Append("  WorkItemVersionNumber: ").Append(WorkItemVersionNumber).Append("\n");
            sb.Append("  LaunchSource: ").Append(LaunchSource).Append("\n");
            sb.Append("  FailureClassIds: ").Append(FailureClassIds).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestResultHistoryResponse);
        }

        /// <summary>
        /// Returns true if TestResultHistoryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TestResultHistoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultHistoryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.TestRunId == input.TestRunId ||
                    (this.TestRunId != null &&
                    this.TestRunId.Equals(input.TestRunId))
                ) && 
                (
                    this.TestRunName == input.TestRunName ||
                    (this.TestRunName != null &&
                    this.TestRunName.Equals(input.TestRunName))
                ) && 
                (
                    this.CreatedByUserName == input.CreatedByUserName ||
                    (this.CreatedByUserName != null &&
                    this.CreatedByUserName.Equals(input.CreatedByUserName))
                ) && 
                (
                    this.TestPlanId == input.TestPlanId ||
                    (this.TestPlanId != null &&
                    this.TestPlanId.Equals(input.TestPlanId))
                ) && 
                (
                    this.TestPlanGlobalId == input.TestPlanGlobalId ||
                    (this.TestPlanGlobalId != null &&
                    this.TestPlanGlobalId.Equals(input.TestPlanGlobalId))
                ) && 
                (
                    this.TestPlanName == input.TestPlanName ||
                    (this.TestPlanName != null &&
                    this.TestPlanName.Equals(input.TestPlanName))
                ) && 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.IsAutomated == input.IsAutomated ||
                    this.IsAutomated.Equals(input.IsAutomated)
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.CompletedOn == input.CompletedOn ||
                    (this.CompletedOn != null &&
                    this.CompletedOn.Equals(input.CompletedOn))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    (this.CreatedById != null &&
                    this.CreatedById.Equals(input.CreatedById))
                ) && 
                (
                    this.ModifiedById == input.ModifiedById ||
                    (this.ModifiedById != null &&
                    this.ModifiedById.Equals(input.ModifiedById))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.WorkItemVersionId == input.WorkItemVersionId ||
                    (this.WorkItemVersionId != null &&
                    this.WorkItemVersionId.Equals(input.WorkItemVersionId))
                ) && 
                (
                    this.WorkItemVersionNumber == input.WorkItemVersionNumber ||
                    (this.WorkItemVersionNumber != null &&
                    this.WorkItemVersionNumber.Equals(input.WorkItemVersionNumber))
                ) && 
                (
                    this.LaunchSource == input.LaunchSource ||
                    (this.LaunchSource != null &&
                    this.LaunchSource.Equals(input.LaunchSource))
                ) && 
                (
                    this.FailureClassIds == input.FailureClassIds ||
                    this.FailureClassIds != null &&
                    input.FailureClassIds != null &&
                    this.FailureClassIds.SequenceEqual(input.FailureClassIds)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.TestRunId != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunId.GetHashCode();
                }
                if (this.TestRunName != null)
                {
                    hashCode = (hashCode * 59) + this.TestRunName.GetHashCode();
                }
                if (this.CreatedByUserName != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUserName.GetHashCode();
                }
                if (this.TestPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanId.GetHashCode();
                }
                if (this.TestPlanGlobalId != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanGlobalId.GetHashCode();
                }
                if (this.TestPlanName != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanName.GetHashCode();
                }
                if (this.ConfigurationName != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAutomated.GetHashCode();
                if (this.Outcome != null)
                {
                    hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.StartedOn != null)
                {
                    hashCode = (hashCode * 59) + this.StartedOn.GetHashCode();
                }
                if (this.CompletedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedOn.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.CreatedById != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                }
                if (this.ModifiedById != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedById.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.WorkItemVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemVersionId.GetHashCode();
                }
                if (this.WorkItemVersionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.WorkItemVersionNumber.GetHashCode();
                }
                if (this.LaunchSource != null)
                {
                    hashCode = (hashCode * 59) + this.LaunchSource.GetHashCode();
                }
                if (this.FailureClassIds != null)
                {
                    hashCode = (hashCode * 59) + this.FailureClassIds.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
