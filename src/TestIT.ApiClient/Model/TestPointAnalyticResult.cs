/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestPointAnalyticResult
    /// </summary>
    [DataContract(Name = "TestPointAnalyticResult")]
    public partial class TestPointAnalyticResult : IEquatable<TestPointAnalyticResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestPointAnalyticResult" /> class.
        /// </summary>
        /// <param name="countGroupByStatus">countGroupByStatus.</param>
        /// <param name="sumGroupByTester">sumGroupByTester.</param>
        /// <param name="countGroupByTester">countGroupByTester.</param>
        /// <param name="countGroupByTestSuite">countGroupByTestSuite.</param>
        /// <param name="countGroupByTesterAndStatus">countGroupByTesterAndStatus.</param>
        public TestPointAnalyticResult(List<TestPlanGroupByStatus> countGroupByStatus = default(List<TestPlanGroupByStatus>), List<TestPlanGroupByTester> sumGroupByTester = default(List<TestPlanGroupByTester>), List<TestPlanGroupByTester> countGroupByTester = default(List<TestPlanGroupByTester>), List<TestPlanGroupByTestSuite> countGroupByTestSuite = default(List<TestPlanGroupByTestSuite>), List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus = default(List<TestPlanGroupByTesterAndStatus>))
        {
            this.CountGroupByStatus = countGroupByStatus;
            this.SumGroupByTester = sumGroupByTester;
            this.CountGroupByTester = countGroupByTester;
            this.CountGroupByTestSuite = countGroupByTestSuite;
            this.CountGroupByTesterAndStatus = countGroupByTesterAndStatus;
        }

        /// <summary>
        /// Gets or Sets CountGroupByStatus
        /// </summary>
        [DataMember(Name = "countGroupByStatus", EmitDefaultValue = true)]
        public List<TestPlanGroupByStatus> CountGroupByStatus { get; set; }

        /// <summary>
        /// Gets or Sets SumGroupByTester
        /// </summary>
        [DataMember(Name = "sumGroupByTester", EmitDefaultValue = true)]
        public List<TestPlanGroupByTester> SumGroupByTester { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByTester
        /// </summary>
        [DataMember(Name = "countGroupByTester", EmitDefaultValue = true)]
        public List<TestPlanGroupByTester> CountGroupByTester { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByTestSuite
        /// </summary>
        [DataMember(Name = "countGroupByTestSuite", EmitDefaultValue = true)]
        public List<TestPlanGroupByTestSuite> CountGroupByTestSuite { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByTesterAndStatus
        /// </summary>
        [DataMember(Name = "countGroupByTesterAndStatus", EmitDefaultValue = true)]
        public List<TestPlanGroupByTesterAndStatus> CountGroupByTesterAndStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestPointAnalyticResult {\n");
            sb.Append("  CountGroupByStatus: ").Append(CountGroupByStatus).Append("\n");
            sb.Append("  SumGroupByTester: ").Append(SumGroupByTester).Append("\n");
            sb.Append("  CountGroupByTester: ").Append(CountGroupByTester).Append("\n");
            sb.Append("  CountGroupByTestSuite: ").Append(CountGroupByTestSuite).Append("\n");
            sb.Append("  CountGroupByTesterAndStatus: ").Append(CountGroupByTesterAndStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestPointAnalyticResult);
        }

        /// <summary>
        /// Returns true if TestPointAnalyticResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TestPointAnalyticResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestPointAnalyticResult input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.CountGroupByStatus == input.CountGroupByStatus ||
                    this.CountGroupByStatus != null &&
                    input.CountGroupByStatus != null &&
                    this.CountGroupByStatus.SequenceEqual(input.CountGroupByStatus)
                ) &&
                (
                    this.SumGroupByTester == input.SumGroupByTester ||
                    this.SumGroupByTester != null &&
                    input.SumGroupByTester != null &&
                    this.SumGroupByTester.SequenceEqual(input.SumGroupByTester)
                ) &&
                (
                    this.CountGroupByTester == input.CountGroupByTester ||
                    this.CountGroupByTester != null &&
                    input.CountGroupByTester != null &&
                    this.CountGroupByTester.SequenceEqual(input.CountGroupByTester)
                ) &&
                (
                    this.CountGroupByTestSuite == input.CountGroupByTestSuite ||
                    this.CountGroupByTestSuite != null &&
                    input.CountGroupByTestSuite != null &&
                    this.CountGroupByTestSuite.SequenceEqual(input.CountGroupByTestSuite)
                ) &&
                (
                    this.CountGroupByTesterAndStatus == input.CountGroupByTesterAndStatus ||
                    this.CountGroupByTesterAndStatus != null &&
                    input.CountGroupByTesterAndStatus != null &&
                    this.CountGroupByTesterAndStatus.SequenceEqual(input.CountGroupByTesterAndStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountGroupByStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByStatus.GetHashCode();
                }
                if (this.SumGroupByTester != null)
                {
                    hashCode = (hashCode * 59) + this.SumGroupByTester.GetHashCode();
                }
                if (this.CountGroupByTester != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByTester.GetHashCode();
                }
                if (this.CountGroupByTestSuite != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByTestSuite.GetHashCode();
                }
                if (this.CountGroupByTesterAndStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByTesterAndStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
