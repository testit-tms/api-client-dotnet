/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// PublicTestPointModel
    /// </summary>
    [DataContract(Name = "PublicTestPointModel")]
    public partial class PublicTestPointModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicTestPointModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicTestPointModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicTestPointModel" /> class.
        /// </summary>
        /// <param name="configurationId">configurationId (required).</param>
        /// <param name="configurationGlobalId">configurationGlobalId (required).</param>
        /// <param name="autoTestIds">autoTestIds.</param>
        /// <param name="iterationId">iterationId (required).</param>
        /// <param name="parameterModels">parameterModels.</param>
        /// <param name="id">id (required).</param>
        public PublicTestPointModel(Guid configurationId = default(Guid), long configurationGlobalId = default(long), List<Guid> autoTestIds = default(List<Guid>), Guid iterationId = default(Guid), List<ParameterShortModel> parameterModels = default(List<ParameterShortModel>), Guid id = default(Guid))
        {
            this.ConfigurationId = configurationId;
            this.ConfigurationGlobalId = configurationGlobalId;
            this.IterationId = iterationId;
            this.Id = id;
            this.AutoTestIds = autoTestIds;
            this.ParameterModels = parameterModels;
        }

        /// <summary>
        /// Gets or Sets ConfigurationId
        /// </summary>
        [DataMember(Name = "configurationId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConfigurationId { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationGlobalId
        /// </summary>
        [DataMember(Name = "configurationGlobalId", IsRequired = true, EmitDefaultValue = true)]
        public long ConfigurationGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets AutoTestIds
        /// </summary>
        [DataMember(Name = "autoTestIds", EmitDefaultValue = true)]
        public List<Guid> AutoTestIds { get; set; }

        /// <summary>
        /// Gets or Sets IterationId
        /// </summary>
        [DataMember(Name = "iterationId", IsRequired = true, EmitDefaultValue = true)]
        public Guid IterationId { get; set; }

        /// <summary>
        /// Gets or Sets ParameterModels
        /// </summary>
        [DataMember(Name = "parameterModels", EmitDefaultValue = true)]
        public List<ParameterShortModel> ParameterModels { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicTestPointModel {\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  ConfigurationGlobalId: ").Append(ConfigurationGlobalId).Append("\n");
            sb.Append("  AutoTestIds: ").Append(AutoTestIds).Append("\n");
            sb.Append("  IterationId: ").Append(IterationId).Append("\n");
            sb.Append("  ParameterModels: ").Append(ParameterModels).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
