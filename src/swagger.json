{
    "openapi": "3.0.1",
    "info": {
        "title": "API",
        "version": "v2.0"
    },
    "paths": {
        "/api/v2/attachments": {
            "post": {
                "tags": [
                    "Attachments"
                ],
                "summary": "Create attachment",
                "description": "<br>Use case\r\n<br>User send file\r\n<br>User runs method execution\r\n<br>System upload file\r\n<br>System create attachment\r\n<br>System return attachment model (listed in response parameters)",
                "operationId": "AddAttachment",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid user permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Invalid file content\r\n<br>Invalid http headers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/autoTests": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Get all AutoTests (if parameters are specified, then it's filtered by them.)",
                "description": "<br>Use case\r\n<br>[Optional] User sets search parameters (listed in request parameters) and runs method execution\r\n<br>System returns all autotests, matching search criteria",
                "operationId": "GetAllAutoTests",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project internal identifier",
                        "schema": {
                            "type": "string",
                            "description": "Project internal identifier",
                            "format": "uuid",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "Autotest external identifier",
                        "schema": {
                            "type": "string",
                            "description": "Autotest external identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "globalId",
                        "in": "query",
                        "description": "Autotest global identifier",
                        "schema": {
                            "type": "integer",
                            "description": "Autotest global identifier",
                            "format": "int64",
                            "nullable": true,
                            "example": 10000
                        }
                    },
                    {
                        "name": "Namespace",
                        "in": "query",
                        "description": "Name of abstract storage where autotest is located",
                        "schema": {
                            "type": "string",
                            "description": "Name of abstract storage where autotest is located",
                            "nullable": true,
                            "example": "Tests.Core"
                        }
                    },
                    {
                        "name": "isNamespaceNull",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include autotests with null\r\nvalue Namespace attribute",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include autotests with null\r\nvalue Namespace attribute",
                            "default": false,
                            "example": false
                        }
                    },
                    {
                        "name": "classname",
                        "in": "query",
                        "description": "Name of the class where autotest is located",
                        "schema": {
                            "type": "string",
                            "description": "Name of the class where autotest is located",
                            "nullable": true,
                            "example": "WorkItemServiceTest.cs"
                        }
                    },
                    {
                        "name": "isClassnameNull",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include autotests with null\r\nvalue Classname attribute",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include autotests with null\r\nvalue Classname attribute",
                            "default": false,
                            "example": false
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted autotests",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted autotests",
                            "default": false,
                            "example": false
                        }
                    },
                    {
                        "name": "labels",
                        "in": "query",
                        "description": "List of autotests labels",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of autotests labels",
                            "nullable": true
                        }
                    },
                    {
                        "name": "stabilityMinimal",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "stabilityMaximal",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "isFlaky",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You have no permission for Project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AutoTestModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id = projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Create AutoTest",
                "description": "<br>Use case\r\n<br>User sets autotest parameters (listed in the example) and runs method execution\r\n<br>System creates autotest\r\n<br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest\r\n<br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest\r\n<br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest\r\n<br>[Optional] If label enumeration is set, system creates labels and relates them to autotest\r\n<br>[Optional] If link enumeration is set, system creates links and relates them to autotest\r\n<br>System returns autotest model (example listed in response parameters)",
                "operationId": "CreateAutoTest",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Name can't be empty or white space\r\n<br>ExternalId can't be empty or white space\r\n<br>Namespace can't be empty or white space\r\n<br>Classname can't be empty or white space\r\n<br>Depth of nested steps more than AutoTestStepDepth (defaultAutoTestStepDepth = 15)\r\n<br>Step can't be null\r\n<br>Invalid Uri\r\n<br>Depth of steps more than 15",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestModel"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "AutoTest with ExternalId and ProjectId already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find Project with projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "<br>Labels have duplicates\r\n<br>Label must not start with ::\r\n<br>Labels with the same base have different values"
                    }
                }
            },
            "put": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Update AutoTest",
                "description": "<br>Use case\r\n<br>User sets autotest updated parameters values (listed in the example) and runs method execution\r\n<br>System finds the autotest by the identifier\r\n<br>System updates autotest parameters \r\n<br>\r\n                    [Optional] If steps enumeration is set, system creates step items, relates them to autotest\r\n                    and deletes relations with current steps( if exist)\r\n                \r\n<br>\r\n                    [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest\r\n                    and deletes relations with current Setup items (if exist)\r\n                \r\n<br>\r\n                    [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest\r\n                    and deletes relations with current teardown items (if exist)\r\n                \r\n<br>\r\n                    [Optional] If label enumeration is set, system creates labels and relates them to autotest\r\n                    and deletes relations with current Labels (if exist)\r\n                \r\n<br>\r\n                    [Optional] If link enumeration is set, system creates links and relates them to autotest\r\n                    and deletes relations with current Links (if exist)\r\n                \r\n<br>System updates autotest and returns no content response",
                "operationId": "UpdateAutoTest",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>Name can't be empty or white space\r\n<br>Namespace can't be empty or white space\r\n<br>Classname can't be empty or white space\r\n<br>Depth of steps more than {AutoTestStepDepth} (default nesting depth level constraint is 15)\r\n<br>Invalid Uri\r\n<br>ProjectId must be set\r\n<br>AutoTestExternalId must be set\r\n<br>Depth of steps more than 15",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find an AutoTest with Id\r\n<br>Can't find Project with projectId\r\n<br>Can't find links.id\r\n<br>Labels with listed globalId not found in the project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "AutoTest with ExternalId and ProjectId already exists"
                    },
                    "422": {
                        "description": "<br>ProjectId cannot be changed\r\n<br>Labels have duplicates\r\n<br>Label must not start with ::\r\n<br>Labels with the same base have different values"
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Get AutoTest by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal or global identifier and runs method execution\r\n<br>\r\n                    System returns autotest, which internal or global identifier equals the identifier value set in the previous\r\n                    action\r\n                ",
                "operationId": "GetAutoTestById",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "Autotest internal identifier (guid format) or\r\nglobal identifier (integer format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Autotest internal identifier (guid format) or\r\nglobal identifier (integer format)",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not valid autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Delete AutoTest by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution\r\n<br>System finds the autotest by the identifier\r\n<br>System deletes autotest and returns no content response",
                "operationId": "DeleteAutoTest",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "Autotest internal (guid format) or global\r\n(integer format) identifier \"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Autotest internal (guid format) or global\r\n(integer format) identifier \"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delete permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}/workItems": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Get all WorkItems Ids linked to AutoTest by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution\r\n<br>System finds the autotest by the identifier\r\n<br>System finds all actual and not deleted WorkItems related to the found autotest\r\n<br>System returns the enumeration of WorkItems",
                "operationId": "GetWorkItemsLinkedToAutoTest",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "Autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isWorkItemDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted worItems",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted worItems",
                            "default": false,
                            "example": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemIdModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Link AutoTest to WorkItem by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>User sets workitem internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System finds the autotest by the autotest identifier\r\n<br>System finds the workitem by the workitem identifier\r\n<br>System relates the workitem with the autotest and returns no content response",
                "operationId": "LinkAutoTestToWorkItem",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "Autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemIdModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemIdModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemIdModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemIdModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>Can't link AutoTest to SharedSteps\r\n<br>Can't link AutoTest to WorkItem from different Project\r\n<br>workItemId must be uuid or global Id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find an AutoTest with autoTestId\r\n<br>Can't find a WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Delete AutoTest link from WorkItem by Id or GlobalId\r\n(if workItemId is not specified, then remove all links WorkItems to AutoTest)",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System finds the autotest by the autotest identifier\r\n<br>\r\n                    [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it\r\n                    from autotest.\r\n                \r\n<br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.\r\n<br>System returns no content response",
                "operationId": "DeleteAutoTestLinkFromWorkItem",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "workItemId",
                        "in": "query",
                        "description": "workItem internal (guid format) or global\r\n(integer format) identifier",
                        "schema": {
                            "type": "string",
                            "description": "workItem internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "workItemId must be uuid or global Id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find an AutoTest with autoTestId\r\n<br>Can't find a WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}/testResultHistory": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "History of TestResults for AutoTest by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>User sets getTestResultHistoryReportQuery (listed in the example)\r\n<br>User runs method execution\r\n<br>System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId\r\n<br>System returns the enumeration of test results",
                "operationId": "GetWorkItemResults",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "From",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "To",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "ConfigurationIds",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "TestPlanIds",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "UserIds",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "Outcomes",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "IsAutomated",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "TestRunIds",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestResultHistoryReportModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Read permission for auto test required"
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}/testRuns": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Stopped and completed TestRuns which contain AutoTest by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System search for all test runs related to the autotest\r\n<br>System returns the enumeration of test runs",
                "operationId": "GetTestRuns",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestRunShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Read permission for auto test required"
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}/averageDuration": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Get AutoTest average duration by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System calculates pass average duration and fail average duration of autotest from all related test results\r\n<br>System returns pass average duration and fail average duration for autotest",
                "operationId": "GetAutoTestAverageDuration",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestAverageDurationModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not valid autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/autoTests/{autoTestId}/chronology": {
            "get": {
                "tags": [
                    "AutoTests"
                ],
                "summary": "Get AutoTest chronology by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets autotest internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System search all test results related to autotest (with default limit equal 100)\r\n<br>\r\n                    System orders the test results by CompletedOn property descending and then orders by CreatedDate property\r\n                    descending\r\n                \r\n<br>System returns test result chronology for autotest",
                "operationId": "GetAutoTestChronology",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "in": "path",
                        "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "autotest internal (guid format) or global\r\n(integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestResultChronologyModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not valid autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for auto test required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find AutoTest with autoTestId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/configurations/{configurationId}": {
            "get": {
                "tags": [
                    "Configurations"
                ],
                "summary": "Get Configuration by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets configuration internal (guid format) or global (integer format) identifier\r\n<br>User runs method execution\r\n<br>System search configuration using the identifier\r\n<br>System returns configuration",
                "operationId": "GetConfigurationById",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "Configuration internal (guid format) or global (integer format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Configuration internal (guid format) or global (integer format) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Can't find configuration with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for configuration required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/configurations": {
            "post": {
                "tags": [
                    "Configurations"
                ],
                "summary": "Create Configuration",
                "description": "<br>Use case\r\n<br>User sets configuration model (listed in the request example)\r\n<br>User runs method execution\r\n<br>System creates configuration\r\n<br>System returns created configuration (listed in the response example)",
                "operationId": "CreateConfiguration",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "403": {
                        "description": "Update permission for configuration required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Configuration with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Capabilities is not valid\r\n<br>Capabilities keys must be unique\r\n<br>Capabilities keys can't be empty or white space\r\n<br>Capabilities values can't be empty or white space",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configurations"
                ],
                "summary": "Update Configuration",
                "description": "<br>Use case\r\n<br>User sets configuration updated properties(listed in the request example)\r\n<br>User runs method execution\r\n<br>System updated configuration using updated properties\r\n<br>System returns no content response",
                "operationId": "UpdateConfiguration",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Id is not a valid\r\n<br>Capabilities is not valid\r\n<br>Capabilities keys must be unique\r\n<br>Capabilities keys can't be empty or white space\r\n<br>Capabilities values can't be empty or white space",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Configuration with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Can't change projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Configuration with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/parameters": {
            "get": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Get all parameters (if isDeleted is true, return deleted parameters)",
                "description": "<br>Use case\r\n<br>[Optional] User sets isDeleted field value\r\n<br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters\r\n<br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted\r\n<br>If User did not set isDeleted field value, System search all parameters\r\n<br>System returns array of all found parameters(listed in response model)",
                "operationId": "GetAllParameters",
                "parameters": [
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted parameters",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted parameters",
                            "nullable": true,
                            "example": false
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid user permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ParameterModel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Create parameter",
                "description": "<br>Use case\r\n<br>User sets parameter model (listed in the request example)\r\n<br>User runs method execution\r\n<br>System creates parameter\r\n<br>System returns parameter model",
                "operationId": "CreateParameter",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Parameter is not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Update parameter",
                "description": "<br>Use case\r\n<br>User sets parameter updated properties(listed in the request example)\r\n<br>User runs method execution\r\n<br>System updated parameter using updated properties\r\n<br>System returns no content response",
                "operationId": "UpdateParameter",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Id is not a valid\r\n<br>Parameter is not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Parameter with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/parameters/{parameterId}": {
            "get": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Get parameter by id",
                "description": "<br>Use case\r\n<br>User sets parameter internal (guid format) identifier\r\n<br>User runs method execution\r\n<br>System search parameter using the identifier\r\n<br>System returns parameter",
                "operationId": "GetParameterById",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "Parameter internal (guid format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Parameter internal (guid format) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find parameter with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Delete parameter by id",
                "description": "<br>Use case\r\n<br>User sets parameter internal (guid format) identifier\r\n<br>System search and delete parameter\r\n<br>System returns deleted parameter",
                "operationId": "DeleteParameter",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "Parameter internal(guid format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Parameter internal(guid format) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "<br>Id is not a valid\r\n<br>Parameter is not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Parameters added in iterations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/parameters/deleteByName": {
            "post": {
                "tags": [
                    "Parameters"
                ],
                "summary": "Delete parameters by name",
                "description": "<br>Use case\r\n<br>User sets parameter name (string format)\r\n<br>System search and delete parameter\r\n<br>System returns no content response",
                "operationId": "DeleteByName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Parameter name(string format)",
                        "schema": {
                            "type": "string",
                            "description": "Parameter name(string format)",
                            "nullable": true,
                            "example": "example"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Parameters added in iterations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>Name is not a valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get all Projects (if isDeleted is true, return deleted Projects)",
                "description": "<br>Use case\r\n<br>[Optional] User sets isDeleted field value\r\n<br>[Optional] If User sets isDeleted field value as true, System search all deleted projects\r\n<br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted\r\n<br>If User did not set isDeleted field value, System search all projects\r\n<br>System returns array of all found projects(listed in response model)",
                "operationId": "GetAllProjects",
                "parameters": [
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted projects",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted projects",
                            "nullable": true,
                            "example": false
                        }
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid user permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectModel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create Project",
                "description": "<br>Use case\r\n<br>User sets project parameters (listed in request example) and runs method execution\r\n<br>System creates project\r\n<br>System returns project model (example listed in response parameters)",
                "operationId": "CreateProject",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "409": {
                        "description": "<br>Project with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Project creator or admin system role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectModel"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update Project",
                "description": "<br>Use case\r\n<br>User sets project parameters (listed in request example) and runs method execution\r\n<br>System updates project\r\n<br>System returns updated project model (example listed in response parameters)",
                "operationId": "UpdateProject",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Id is not a valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "409": {
                        "description": "<br>Project with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier and runs method execution\r\n<br>System search project\r\n<br>System returns project (example listed in response parameters)",
                "operationId": "GetProjectById",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Id is not a valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for project required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier and runs method execution\r\n<br>System search and delete project\r\n<br>System returns no content response",
                "operationId": "DeleteProject",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>EntityId is not found for globalId\r\n<br>Can't find Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delete permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/restore": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Restore Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier and runs method execution\r\n<br>System search and restores deleted project\r\n<br>System returns no content response",
                "operationId": "RestoreProject",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/sections": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Sections for Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier and runs method execution\r\n<br>System search project\r\n<br>System search all sections related to the project\r\n<br>System returns array of sections (listed in response)",
                "operationId": "GetSectionsByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SectionModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/autoTestsNamespaces": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get AutoTests Namespaces for Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier and runs method execution\r\n<br>System search project\r\n<br>System search all autotest related to the project\r\n<br>System returns array of autotest with namespaces and classnames (listed in response)",
                "operationId": "GetAutoTestsNamespaces",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AutoTestNamespaceModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/workItems": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>[Optional] User sets isDeleted field value\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project\r\n<br>\r\n                    [Optional] If User sets isDeleted field value as false, System search all workitems related to project which\r\n                    are not deleted\r\n                \r\n<br>If User did not set isDeleted field value, System search all  workitems related to project\r\n<br>System returns array of found workitems (listed in response model)",
                "operationId": "GetWorkItemsByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted workitems",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted workitems",
                            "default": false,
                            "nullable": true,
                            "example": false
                        }
                    },
                    {
                        "name": "tagNames",
                        "in": "query",
                        "description": "Array of workitem tag names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Array of workitem tag names",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeIterations",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>orderByStatement must have one '.' and no ',' symbols\r\n<br>orderByStatement has invalid length\r\n<br>orderByStatement must have uuid as attribute key\r\n<br>Search field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/configurations": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Configurations for Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>System search all configurations related to project\r\n<br>System returns array of found configurations (listed in response model)",
                "operationId": "GetConfigurationsByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigurationModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for configurations required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/attributes": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Projects Attributes by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>[Optional] User sets isDeleted field value\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>\r\n                    [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to\r\n                    project\r\n                \r\n<br>\r\n                    [Optional] If User sets isDeleted field value as false, System search all attributes related to project which\r\n                    are not deleted\r\n                \r\n<br>[Optional] If User did not set isDeleted field value, System search all attributes related to project\r\n<br>System returns array of found attributes (listed in response model)",
                "operationId": "GetAttributesByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted attributes",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted attributes",
                            "default": false,
                            "nullable": true,
                            "example": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomAttributeModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Id is not a valid Guid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create Projects Attribute",
                "description": "<br>Use case\r\n<br>User sets attribute parameters (listed in request example) and runs method execution\r\n<br>System search project\r\n<br>System creates attribute and relates it to the project\r\n<br>System returns project attribute properties (example listed in response parameters)",
                "operationId": "CreateProjectsAttribute",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributePostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributePostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributePostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributePostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "<br>Can't find a Project with id\r\n<br>SchemeTemplateAttribute not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "<br>CustomAttribute.Name or CustomAttribute.Id not unique in attributesSchemes\r\n<br>CustomAttributeOptionModel.Id or CustomAttributeOptionModel.Value not unique in attributesScheme.Options",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Cannot add new attribute from template which is already in use",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Attribute was empty!\r\n<br>Priority is not a valid\r\n<br>Attribute with type options must have options\r\n<br>Attribute with type cannot have options\r\n<br>New CustomAttribute can't contain not empty Id\r\n<br>New CustomAttribute can't contain option with not empty Id\r\n<br>There is no CustomAttribute with Id\r\n<br>There is no Option with Id\r\n<br>New AttributeScheme can't contain options with not empty Id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomAttributeModel"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update Projects Attribute",
                "description": "<br>Use case\r\n<br>User sets project parameters (listed in request example) and runs method execution\r\n<br>System updates project\r\n<br>System updates attribute related to the project\r\n<br>System returns no content response",
                "operationId": "UpdateProjectsAttribute",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributeModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributeModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributeModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAttributeModel"
                            }
                        }
                    }
                },
                "responses": {
                    "409": {
                        "description": "<br>CustomAttribute.Name or CustomAttribute.Id not unique in attributesSchemes\r\n<br>CustomAttributeOptionModel.Id or CustomAttributeOptionModel.Value not unique in attributesScheme.Options",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a Project with id\r\n<br>SchemeTemplateAttribute not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Attribute was null!\r\n<br>Priority is not a valid\r\n<br>Attribute with type options must have options\r\n<br>Attribute with type cannot have options\r\n<br>Attribute with Options can have only one IsDefault property = true\r\n<br>CustomAttributeModel.Type cannot be changed!\r\n<br>New CustomAttribute can't contain not empty Id\r\n<br>New CustomAttribute can't contain option with not empty Id\r\n<br>There is no CustomAttribute with Id\r\n<br>There is no Option with Id\r\n<br>New AttributeScheme can't contain options with not empty Id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Cannot add new attribute from template which is already in use",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/attributes/{attributeId}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Projects Attribute by Id",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>User sets project attribute identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>System search project attribute \r\n<br>System returns project attribute (listed in response model)",
                "operationId": "GetAttributeByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "attributeId",
                        "in": "path",
                        "description": "Project attribute internal(guid format)\r\nidentifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project attribute internal(guid format)\r\nidentifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Id is not a valid Guid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomAttributeModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a Project with id\r\n<br>Can't find a CustomAttribute with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Projects Attribute by Id",
                "description": "<br>Use case\r\n<br>User sets project identifier and runs method execution\r\n<br>User sets attribute identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>System search and delete attribute\r\n<br>System returns no content response",
                "operationId": "DeleteProjectsAttribute",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "attributeId",
                        "in": "path",
                        "description": "Project attribute internal(guid format)\r\nidentifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project attribute internal(guid format)\r\nidentifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>projectId is not a valid\r\n<br>attributeId is not a valid\r\n<br>Custom attribute to delete is empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/testPlans": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>[Optional] User sets isDeleted field value\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>\r\n                    [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to\r\n                    project\r\n                \r\n<br>\r\n                    [Optional] If User sets isDeleted field value as false, System search all test plans related to project which\r\n                    are not deleted\r\n                \r\n<br>[Optional] If User did not set isDeleted field value, System search all v related to project\r\n<br>System returns array of found test plans (listed in response model)",
                "operationId": "GetTestPlansByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Boolean flag which defines if search must include deleted test plans",
                        "schema": {
                            "type": "boolean",
                            "description": "Boolean flag which defines if search must include deleted test plans",
                            "nullable": true,
                            "example": false
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestPlanModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/testRuns": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get TestRuns for Project by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>System search all test runs related to project\r\n<br>System returns array of found test runs (listed in response model)",
                "operationId": "GetTestRunsByProjectId",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "NotStarted",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "InProgress",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Stopped",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Completed",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "CreatedDateFrom",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "CreatedDateTo",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "TestPlanId",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestRunV2GetModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/export": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Export Project with tests, sections and configurations in json file",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>\r\n                    System returns project data as json file, containing project data, related attributes, sections and\r\n                    workitems\r\n                ",
                "operationId": "Export",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportQueryModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportQueryModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportQueryModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportQueryModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Root Section not found for projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Update permission for project settings required"
                    },
                    "404": {
                        "description": "Can't find a Project with id"
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/export-by-testPlans": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file",
                "description": "<br>Use case\r\n<br>User sets project internal or global identifier\r\n<br>User runs method execution\r\n<br>System search project\r\n<br>\r\n                    System returns project data as json file, containing project data, related attributes, sections, workitems,\r\n                    test plans, test suites, test points and configurations\r\n                ",
                "operationId": "ExportWithTestPlansAndConfigurations",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project internal(guid format) or global(int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportWithTestPlansPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportWithTestPlansPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportWithTestPlansPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectExportWithTestPlansPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Root Section not found for projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Update permission for project settings required"
                    },
                    "404": {
                        "description": "Can't find a Project with id"
                    }
                }
            }
        },
        "/api/v2/projects/import": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Import Project from json file\r\nProject can be imported only once (this method or ImportToExistingProject)\r\nNext import will sync content in previously imported project.",
                "description": "<br>Use case\r\n<br>User attaches project as json file taken from export or export-by-testPlans method\r\n<br>User runs method execution\r\n<br>System creates project\r\n<br>System returns no content response",
                "operationId": "Import",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "413": {
                        "description": "Multipart body length limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Entity with same id already imported in other project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Project creator or admin system role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/projects/{projectId}/import": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Import to existing Project from json file.\r\nSections can be imported in only one target project!",
                "description": "<br>Use case\r\n<br>User attaches project as json file taken from export or export-by-testPlans method\r\n<br>User runs method execution\r\n<br>System updates project\r\n<br>System returns no content response",
                "operationId": "ImportToExistingProject",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "413": {
                        "description": "Multipart body length limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for project settings required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Entity with same id already imported in other project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/sections/{sectionId}": {
            "get": {
                "tags": [
                    "Sections"
                ],
                "summary": "Get Section by id",
                "description": "<br>Use case\r\n<br>User sets section internal (guid format) identifier\r\n<br>User runs method execution\r\n<br>System search section by the section identifier\r\n<br>\r\n                    [Optional] If isDeleted flag equals false, deleted workitems are not being searched.\r\n                    If true, deleted workitems are also being searched, null for all workitems.\r\n                \r\n<br>System returns section",
                "operationId": "GetSectionById",
                "parameters": [
                    {
                        "name": "sectionId",
                        "in": "path",
                        "description": "Section internal (guid format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Section internal (guid format) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Flag that defines if deleted section must be include in the response",
                        "schema": {
                            "type": "boolean",
                            "description": "Flag that defines if deleted section must be include in the response",
                            "default": false,
                            "nullable": true,
                            "example": false
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Can't find Section with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SectionWithStepsModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sections"
                ],
                "summary": "Delete Section by id",
                "description": "<br>Use case\r\n<br>User sets section identifier\r\n<br>User runs method execution\r\n<br>System search section by the identifier\r\n<br>System search and delete nested sections of the found section\r\n<br>System search and delete workitems related to the found nested sections\r\n<br>System deletes initial section and related workitem\r\n<br>System returns no content response",
                "operationId": "DeleteSection",
                "parameters": [
                    {
                        "name": "sectionId",
                        "in": "path",
                        "description": "Section internal (guid format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Section internal (guid format) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delere permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find Section with id"
                    },
                    "422": {
                        "description": "Root section can't be deleted"
                    }
                }
            }
        },
        "/api/v2/sections": {
            "post": {
                "tags": [
                    "Sections"
                ],
                "summary": "Create Section",
                "description": "<br>Use case\r\n<br>User sets section properties (listed in request example)\r\n<br>User runs method execution\r\n<br>System creates section property values\r\n<br>System returns section (listed in response example)",
                "operationId": "CreateSection",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "<br>Section with the name already exists on that level\r\n<br>Section with parentId=null already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SectionWithStepsModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find parent section",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Section with parentId=null can't be created\r\n<br>Field is required"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sections"
                ],
                "summary": "Update Section",
                "description": "<br>Use case\r\n<br>User sets section properties (listed in request example)\r\n<br>User runs method execution\r\n<br>System search section by the identifier\r\n<br>System updates section using the property values\r\n<br>System returns no content response",
                "operationId": "UpdateSection",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find section\r\n<br>Can't find parent section\r\n<br>Can't find project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Section with the name already exists on that level",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "<br>Root section can't be edited\r\n<br>Can't change parentId\r\n<br>Can't change projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>id is not a valid!\r\n<br>Can not create root section!\r\n<br>Field is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/sections/rename": {
            "post": {
                "tags": [
                    "Sections"
                ],
                "summary": "Rename Section",
                "description": "<br>Use case\r\n<br>User sets section identifier and new name (listed in request example)\r\n<br>User runs method execution\r\n<br>System search section by the identifier\r\n<br>System updates section name using the new name\r\n<br>System returns no content response",
                "operationId": "Rename",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionRenameModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionRenameModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionRenameModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionRenameModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Section with id: SectionRenameModel.Id not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Section with the name already exists on that level",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Root section can't be renamed"
                    }
                }
            }
        },
        "/api/v2/sections/move": {
            "post": {
                "tags": [
                    "Sections"
                ],
                "summary": "Move Section. Can be moved inside another section. It is possible to indicate a project",
                "description": "<br>Use case\r\n<br>\r\n                    User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed\r\n                    in request example)\r\n                \r\n<br>User runs method execution\r\n<br>System search section by the identifier\r\n<br>System unlink section from the old parent and links to the new one\r\n<br>System updates section rank using the next section identifier\r\n<br>System returns no content response",
                "operationId": "Move",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionMoveModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionMoveModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionMoveModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SectionMoveModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Section creates loop",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "409": {
                        "description": "Section was modified!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find parent section\r\n<br>Section not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Root section can't be moved"
                    }
                }
            }
        },
        "/api/v2/sections/{sectionId}/workItems": {
            "get": {
                "tags": [
                    "Sections"
                ],
                "summary": "Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)",
                "description": "<br>Use case\r\n<br>User sets section identifier\r\n<br>User runs method execution\r\n<br>System search section by the identifier\r\n<br>System search workitems related to the section\r\n<br>\r\n                    [Optional] If isDeleted flag equals false, deleted workitems are not being searched.\r\n                    If true, deleted workitems are also being searched, null for all workitems.\r\n                \r\n<br>System returns workitem collection",
                "operationId": "GetWorkItemsBySectionId",
                "parameters": [
                    {
                        "name": "sectionId",
                        "in": "path",
                        "description": "Section internal (guid format) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Section internal (guid format) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Flag that defines if deleted workitems must be include in the response",
                        "schema": {
                            "type": "boolean",
                            "description": "Flag that defines if deleted workitems must be include in the response",
                            "default": false,
                            "nullable": true,
                            "example": false
                        }
                    },
                    {
                        "name": "tagNames",
                        "in": "query",
                        "description": "Array of workitem tag names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Array of workitem tag names",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeIterations",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Section not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>orderByStatement must have one '.' and no ',' symbols\r\n<br>orderByStatement has invalid length\r\n<br>orderByStatement must have uuid as attribute key\r\n<br>Search field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}": {
            "get": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Get TestPlan by Id",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System search  test plan by the identifier\r\n<br>System returns test plan",
                "operationId": "GetTestPlanById",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a Project with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestPlanModel"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Delete TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System delete test plan\r\n<br>System returns no content response",
                "operationId": "DeleteTestPlan",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delete permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Create TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan properties (listed in request example)\r\n<br>User runs method execution\r\n<br>System creates test plan\r\n<br>System returns test plan (listed in response example)",
                "operationId": "CreateTestPlan",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TestPlan with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestPlanModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Tags must be no more than 10!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Update TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan properties(listed in request example)\r\n<br>User runs method execution\r\n<br>System updates test plan\r\n<br>System returns no content response",
                "operationId": "UpdateTestPlan",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestPlanPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Can't change ProjectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Tags must be no more than 10!\r\n<br>StartDate can't be more than EndDate!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TestPlan with the same name already exists!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/restore": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Restore TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System restores test plan\r\n<br>System returns no content response",
                "operationId": "RestoreTestPlan",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/clone": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Clone TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System clones test plan\r\n<br>System returns test plan (listed in response example)",
                "operationId": "Clone",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestPlanModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Update permission for test plan required"
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!"
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/start": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Start TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System starts the test plan and updates test plan status\r\n<br>System returns no content response",
                "operationId": "Start",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/pause": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Pause TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System pauses the test plan and updates test plan status\r\n<br>System returns no content response",
                "operationId": "Pause",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Change status from New to Paused forbidden\r\n<br>Change status from Paused to Paused forbidden\r\n<br>Change status from Completed to Paused forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/complete": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Complete TestPlan",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System completes the test plan and updates test plan status\r\n<br>System returns no content response",
                "operationId": "Complete",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "<br>Change status from New to Completed forbidden\r\n<br>Change status from Completed to Completed forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestPlan with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/testSuites": {
            "get": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Get TestSuites Tree By Id",
                "description": "<br>Use case\r\n<br>User sets test plan identifier\r\n<br>User runs method execution\r\n<br>System finds test suites related to the test plan\r\n<br>System returns test suites as a tree model (listed in response example)",
                "operationId": "GetTestSuitesById",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestSuiteV2TreeModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testPlans/{testPlanId}/workItems/withSections": {
            "post": {
                "tags": [
                    "TestPlans"
                ],
                "summary": "Add WorkItems to TestPlan with Sections as TestSuites",
                "description": "<br>Use case\r\n<br>User sets TestPlan identifier\r\n<br>User sets WorkItem identifiers (listed in request example)\r\n<br>User runs method execution\r\n<br>System added WorkItems and Sections to TestPlan\r\n<br>System returns no content response",
                "operationId": "AddWorkItemsWithSections",
                "parameters": [
                    {
                        "name": "testPlanId",
                        "in": "path",
                        "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "422": {
                        "description": "Can't put a SharedStep in the TestSuite",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>TestPlan is locked\r\n<br>Some of configurations do not exist in the project, or they are not active",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for TestPlan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestPlan with id\r\n<br>Some of workItems do not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testResults": {
            "post": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Set result for AutoTest (Obsolete).\r\nThe new endpoint is [POST]/api/v2/testRuns/{testRunId}/testResults",
                "operationId": "SetAutoTestResults",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestResultPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestResultPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestResultPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutoTestResultPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "<br>Can't find a TestRun with TestRunId\r\n<br>Can't find a TestPlan with TestPlanGlobalId\r\n<br>Can't find a Configuration with ConfigurationGlobalId in the Project\r\n<br>Can't find an AutoTest with AutoTestExternalId\r\n<br>Can't find any TestPoint with autoTestExternalId and configurationId\r\n<br>Not found TestPoint, check input fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Outcome is not defined\r\n<br>Status is not defined\r\n<br>TestRun is stopped\r\n<br>Lack one of required fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/api/v2/testResults/{testResultId}/attachments": {
            "get": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Get all attachments of TestResult",
                "description": "<br>Use case\r\n<br>User sets testResultId\r\n<br>User runs method execution\r\n<br>System search all attachments of the test result\r\n<br>System returns attachments enumeration",
                "operationId": "GetAttachments",
                "parameters": [
                    {
                        "name": "testResultId",
                        "in": "path",
                        "description": "Test result internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test result internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "TestResult not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Upload and link attachment to TestResult",
                "description": "<br>Use case\r\n<br>User sets testResultId\r\n<br>User attaches a file\r\n<br>System creates attachment and links it to the test result\r\n<br>System returns attachment identifier",
                "operationId": "CreateAttachment",
                "parameters": [
                    {
                        "name": "testResultId",
                        "in": "path",
                        "description": "Test result internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test result internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Multipart body length limit exceeded (default constraint is one gigabyte)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testResults/{testResultId}/attachments/{attachmentId}": {
            "get": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Get attachment of TestResult",
                "description": "<br>Use case\r\n<br>User sets attachmentId and testResultId\r\n<br>[Optional] User sets resize configuration\r\n<br>User runs method execution\r\n<br>System search attachments by the attachmentId and the testResultId\r\n<br>\r\n                    [Optional] If resize configuration is set, System resizes the attachment according to the resize\r\n                    configuration\r\n                \r\n<br>[Optional] Otherwise, System does not resize the attachment\r\n<br>System returns attachment as a file",
                "operationId": "DownloadAttachment",
                "parameters": [
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "Attachment internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Attachment internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "testResultId",
                        "in": "path",
                        "description": "Test result internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test result internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "Width",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "Height",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "ResizeOption",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ImageResizeOption"
                        }
                    },
                    {
                        "name": "BackgroundColor",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>File not found\r\n<br>Attachment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Remove attachment and unlink from TestResult",
                "description": "<br>Use case\r\n<br>User sets testResultId and attachmentId\r\n<br>User attaches a file\r\n<br>User runs method execution\r\n<br>System deletes attachment and unlinks it from the test result\r\n<br>System returns attachment identifier",
                "operationId": "DeleteAttachment",
                "parameters": [
                    {
                        "name": "testResultId",
                        "in": "path",
                        "description": "Test result internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test result internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "Attachment internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Attachment internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/testResults/{testResultId}/attachments/{attachmentId}/info": {
            "get": {
                "tags": [
                    "TestResults"
                ],
                "summary": "Get Metadata of TestResult's attachment",
                "description": "<br>Use case\r\n<br>User sets attachmentId and testResultId\r\n<br>User runs method execution\r\n<br>System search attachment by the attachmentId and the testResultId\r\n<br>System returns attachment data",
                "operationId": "GetAttachment",
                "parameters": [
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "Attachment internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Attachment internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "testResultId",
                        "in": "path",
                        "description": "Test result internal identifier (guid format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test result internal identifier (guid format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttachmentModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Create empty TestRun",
                "description": "<br>Use case\r\n<br>User sets test run model (listed in the request example)\r\n<br>User runs method execution\r\n<br>System creates test run\r\n<br>System returns test run model",
                "operationId": "CreateEmpty",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PostShortModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PostShortModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PostShortModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PostShortModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Field is required\r\n<br>TestRun must be automated\r\n<br>ProjectId is not a valid!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestRunV2GetModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "TestRunTesterRequirement permission required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a TestRun with id = testRunId"
                    }
                }
            },
            "put": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Update empty TestRun",
                "description": "<br>Use case\r\n<br>User sets test run properties (listed in the request example)\r\n<br>User runs method execution\r\n<br>System updates test run\r\n<br>System returns returns no content response",
                "operationId": "UpdateEmpty",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunV2PutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Field is required\r\n<br>Name is not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/byWorkItems": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Create TestRun with TestPoints selected using ConfigurationIds and WorkItem Ids",
                "description": "<br>Use case\r\n<br>User sets test run properties (listed in the request example)\r\n<br>User sets relative configuration and workitem ids\r\n<br>User runs method execution\r\n<br>System creates test run\r\n<br>System finds workitems and configurations using ids listed by user\r\n<br>System creates test result by test points which use workitems and configurations\r\n<br>System returns test run model",
                "operationId": "CreateAndFillByWorkItems",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByWorkItemsPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByWorkItemsPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByWorkItemsPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByWorkItemsPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestRunV2GetModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Some of TestPoints with WorkItemIds and ConfigurationIds not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>TestRun cannot be created with deleted TestPoint(s)\r\n<br>TestRun cannot be created in deleted TestSuite\r\n<br>TestRun cannot be created with non-automated TestPoint\r\n<br>TestRun must be automated\r\n<br>Some of WorkItems do not exist\r\n<br>ProjectId is not a valid!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/byConfigurations": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Create TestRun with TestPointSelectors based on ConfigurationId and WorkItem Ids",
                "description": "<br>Use case\r\n<br>User sets test run properties (listed in the request example)\r\n<br>User sets relative configuration and workitem ids\r\n<br>User runs method execution\r\n<br>System creates test run\r\n<br>System finds workitems and configurations using ids listed by user\r\n<br>System creates test result by test points which use workitems and configurations\r\n<br>System returns test run model",
                "operationId": "CreateAndFillByConfigurations",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByConfigurationsPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByConfigurationsPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByConfigurationsPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByConfigurationsPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "Some of TestPoints by TestPointSelectors not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>TestRun cannot be created with deleted TestPoint(s)\r\n<br>TestRun cannot be created in deleted TestSuite\r\n<br>TestRun cannot be created with non-automated TestPoint\r\n<br>TestRun must be automated\r\n<br>Some of WorkItems do not exist\r\n<br>ProjectId is not a valid!\r\n<br>TestPointSelectors required\r\n<br>some of the WorkItemIds in the testPointSelector is not valid\r\n<br>some of the ConfigurationIds in the testPointSelector is not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestRunV2GetModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/byAutoTests": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Create TestRun without TestPoints using ConfigurationIds and AutoTestIds",
                "description": "<br>Use case\r\n<br>User sets test run properties (listed in the request example)\r\n<br>User sets relative configuration and workitem ids\r\n<br>User runs method execution\r\n<br>System creates test run\r\n<br>System finds autotests and configurations using ids listed by user\r\n<br>System creates test result by test points which use autotests and configurations\r\n<br>System returns test run model",
                "operationId": "CreateAndFillByAutoTests",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByAutoTestsPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByAutoTestsPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByAutoTestsPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestRunFillByAutoTestsPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Configuration does not exist in Project\r\n<br>AutoTest does not exist in Project\r\n<br>TestRun must be automated\r\n<br>ProjectId is not a valid!\r\n<br>AutoTestExternalIds required\r\n<br>ConfigurationIds required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestRunV2GetModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Some of AutoTests do not exist"
                    }
                }
            }
        },
        "/api/v2/testRuns/{testRunId}": {
            "get": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Get TestRun by Id",
                "description": "<br>Use case\r\n<br>User sets test run identifier\r\n<br>User runs method execution\r\n<br>System finds test run\r\n<br>System returns test run",
                "operationId": "GetTestRunById",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "Test Run internal identifier (GUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test Run internal identifier (GUID format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "<br>Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestRunV2GetModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/{testRunId}/start": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Start TestRun",
                "description": "<br>Use case\r\n<br>User sets test run identifier\r\n<br>User runs method execution\r\n<br>System starts test run\r\n<br>System returns no content response",
                "operationId": "StartTestRun",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "Test Run internal identifier (GUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test Run internal identifier (GUID format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>the StateName is already InProgress\r\n<br>the StateName is already Stopped\r\n<br>the StateName is already Completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/{testRunId}/stop": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Stop TestRun",
                "description": "<br>Use case\r\n<br>User sets test run identifier\r\n<br>User runs method execution\r\n<br>System stops test run\r\n<br>System returns no content response",
                "operationId": "StopTestRun",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "Test Run internal identifier (GUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test Run internal identifier (GUID format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>the StateName is already Stopped\r\n<br>the StateName is already Completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/{testRunId}/complete": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Complete TestRun",
                "description": "<br>Use case\r\n<br>User sets test run identifier\r\n<br>User runs method execution\r\n<br>System completes test run\r\n<br>System returns no content response",
                "operationId": "CompleteTestRun",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "Test Run internal identifier (GUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test Run internal identifier (GUID format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "<br>Field is required\r\n<br>the StateName is already Stopped\r\n<br>the StateName is already Completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestRun with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testRuns/{testRunId}/testResults": {
            "post": {
                "tags": [
                    "TestRuns"
                ],
                "summary": "Set AutoTest Results For TestRun",
                "description": "<br>Use case\r\n<br>User sets test run identifier\r\n<br>User sets test result model (listed in request parameters) \r\n<br>User runs method execution\r\n<br>System sets test results of autotest listed in request in test run\r\n<br>System returns array of test results identifiers",
                "operationId": "SetAutoTestResultsForTestRun",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "Test Run internal identifier (GUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test Run internal identifier (GUID format)",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestResultsForTestRunModel"
                                },
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestResultsForTestRunModel"
                                },
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestResultsForTestRunModel"
                                },
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestResultsForTestRunModel"
                                },
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "<br>Can't find a TestRun with id!\r\n<br>Not found TestPoint check input fields\r\n<br>Can't find an AutoTest with AutoTestExternalId\r\n<br>Can't find any TestPoint with autoTestExternalId and configurationId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test result required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>AutoTestResultsForTestRunModel is not valid\r\n<br>TestPoints required\r\n<br>TestPoints required cor Configuration and AutoTestExternalId\r\n<br>Duration should be a positive number!\r\n<br>Duration of step should be a positive number!\r\n<br>outcome is not defined\r\n<br>TestRun is stopped!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites/{testSuiteId}": {
            "get": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Get TestSuite by Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System returns test suite",
                "operationId": "GetTestSuiteById",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestSuiteV2GetModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Delete TestSuite",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System deletes test suite\r\n<br>System returns no content response",
                "operationId": "DeleteTestSuite",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delete permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites": {
            "post": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Create TestSuite",
                "description": "<br>Use case\r\n<br>User sets test suite model (listed in request parameters)\r\n<br>User runs method execution\r\n<br>System creates test suite\r\n<br>System returns test suite",
                "operationId": "CreateTestSuite",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Suite with Id creates loop!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestPlan with id\r\n<br>Can't find a TestSuite with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestSuiteV2GetModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Update TestSuite",
                "description": "<br>Use case\r\n<br>User sets test suite model (listed in request parameters)\r\n<br>User runs method execution\r\n<br>System updates test suite\r\n<br>System returns test suite",
                "operationId": "UpdateTestSuite",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestSuiteV2PutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "<br>Field is required\r\n<br>Suite with Id creates loop!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TestSuiteV2GetModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestPlan with id\r\n<br>Can't find a TestSuite with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites/{testSuiteId}/testPoints": {
            "get": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Get TestPoints By Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System returns test points array",
                "operationId": "GetTestPointsById",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "<br>Can't find a TestSuite with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestPointByTestSuiteModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites/{testSuiteId}/testResults": {
            "get": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Get TestResults By Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System search test results related to the test points\r\n<br>System returns test results array",
                "operationId": "GetTestResultsById",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestResultV2ShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites/{testSuiteId}/workItems": {
            "get": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Get WorkItems By Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>[Optional] User sets isDeleted property as true\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System search workitems related to the test points\r\n<br>\r\n                    [Optional] User sets isDeleted property is set as true, System includes deleted workitems\r\n                    Otherwise, system applies filter which excludes deleted workitems from all found workitems\r\n                \r\n<br>System returns workitems array",
                "operationId": "GetWorkItemsById",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "isDeleted",
                        "in": "query",
                        "description": "Flag that defines if deleted workitems must be include in the response",
                        "schema": {
                            "type": "boolean",
                            "description": "Flag that defines if deleted workitems must be include in the response",
                            "default": false,
                            "nullable": true,
                            "example": false
                        }
                    },
                    {
                        "name": "tagNames",
                        "in": "query",
                        "description": "Array of workitem tag names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Array of workitem tag names",
                            "nullable": true
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Amount of items to be skipped (offset)"
                    },
                    {
                        "name": "Take",
                        "in": "query",
                        "description": "Amount of items to be taken (limit)"
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)"
                    },
                    {
                        "name": "SearchField",
                        "in": "query",
                        "description": "Property name for searching"
                    },
                    {
                        "name": "SearchValue",
                        "in": "query",
                        "description": "Value for searching"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "Pagination-Skip": {
                                "description": "Skipped amount of items"
                            },
                            "Pagination-Take": {
                                "description": "Taken items"
                            },
                            "Pagination-Pages": {
                                "description": "Expected number of pages"
                            },
                            "Pagination-Total-Items": {
                                "description": "Total count of items"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Set WorkItems By TestSuite Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User sets collection of workitems identifiers\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System search workitems\r\n<br>System restores(if exist) or creates test points with listed workitems\r\n<br>System returns no content response",
                "operationId": "SetWorkItemsByTestSuiteId",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Collection of workitem identifiers\"",
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of workitem identifiers\"",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of workitem identifiers\"",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of workitem identifiers\"",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of workitem identifiers\"",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "<br>can't put a SharedStep in the TestSuite\r\n<br>ProjectId must be the same for TestSuites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemShortModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id\r\n<br>Some of WorkItems does not exist or deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/testSuites/{testSuiteId}/configurations": {
            "get": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Get Configurations By Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System search configurations related to the test points\r\n<br>System returns configurations array",
                "operationId": "GetConfigurationsByTestSuiteId",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>Can't find a TestSuite with id!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigurationModel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TestSuites"
                ],
                "summary": "Set Configurations By TestSuite Id",
                "description": "<br>Use case\r\n<br>User sets test suite identifier\r\n<br>User sets collection of configuration identifiers\r\n<br>User runs method execution\r\n<br>System search test suite by identifier\r\n<br>System search test points related to the test suite\r\n<br>System search configuration\r\n<br>System restores(if exist) or creates test points with listed configuration\r\n<br>System returns no content response",
                "operationId": "SetConfigurationsByTestSuiteId",
                "parameters": [
                    {
                        "name": "testSuiteId",
                        "in": "path",
                        "description": "Test suite internal (guid format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Test suite internal (guid format) identifier\"",
                            "format": "uuid",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Collection of configuration identifiers\"",
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of configuration identifiers\"",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of configuration identifiers\"",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of configuration identifiers\"",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "Collection of configuration identifiers\"",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "<br>Can't find a TestSuite with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Some of Configurations do not exist in the project, or they are not active",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigurationModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test plan required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/workItems/{workItemId}": {
            "get": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Get Test Case, Checklist or Shared Step by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>[Optional] User sets workitem version identifier\r\n<br>[Optional] User sets workitem version number\r\n<br>User runs method execution\r\n<br>System search workitem by identifier\r\n<br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.\r\n<br>[Optional] if user sets workitem version number, system search workitem version by number\r\n<br>Otherwise, system search last workitem version\r\n<br>System returns workitem ",
                "operationId": "GetWorkItemById",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "versionId",
                        "in": "query",
                        "description": "WorkItem version (guid format) identifier\"",
                        "schema": {
                            "type": "string",
                            "description": "WorkItem version (guid format) identifier\"",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        }
                    },
                    {
                        "name": "versionNumber",
                        "in": "query",
                        "description": "WorkItem version number (0 is the last version)\"",
                        "schema": {
                            "type": "integer",
                            "description": "WorkItem version number (0 is the last version)\"",
                            "format": "int32",
                            "example": 0
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find workItem with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkItemModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Delete Test Case, Checklist or Shared Step by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>User runs method execution\r\n<br>System deletes workitem\r\n<br>System returns no content response",
                "operationId": "DeleteWorkItem",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a WorkItem with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Could not delete Shared Step that has references",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Delete permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/workItems/{workItemId}/iterations": {
            "get": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Get iterations by workitem Id or GlobalId",
                "operationId": "GetIterations",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "versionId",
                        "in": "query",
                        "description": "WorkItem version (guid format) identifier",
                        "schema": {
                            "type": "string",
                            "description": "WorkItem version (guid format) identifier",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        }
                    },
                    {
                        "name": "versionNumber",
                        "in": "query",
                        "description": "WorkItem version number (0 is the last version)\"",
                        "schema": {
                            "type": "integer",
                            "description": "WorkItem version number (0 is the last version)\"",
                            "format": "int32",
                            "example": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IterationModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find workItem with id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Read permission for test library required"
                    }
                }
            }
        },
        "/api/v2/workItems": {
            "post": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Create Test Case, Checklist or Shared Step",
                "description": "<br>Use case\r\n<br>User sets workitem properties (listed in request parameters)\r\n<br>User runs method execution\r\n<br>System creates workitem by identifier\r\n<br>System returns workitem model (listed in response parameters)",
                "operationId": "CreateWorkItem",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPostModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPostModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPostModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPostModel"
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "<br>Can't find section\r\n<br>Can't find project\r\n<br>Can't find attachmentIds\r\n<br>Project not found\r\n<br>Can't attributesScheme\r\n<br>Can't attribute",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkItemModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Priority is not a valid\r\n<br>Tags must be set\r\n<br>Duration should be a positive number\r\n<br>Should be empty for CheckList\r\n<br>Attribute value must be a valid guid for user scheme\r\n<br>There is no option in ProjectAttributesScheme with such Id\r\n<br>Attribute value must be a valid guid for options scheme",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Update Test Case, Checklist or Shared Step",
                "description": "<br>Use case\r\n<br>User sets workitem properties (listed in request parameters)\r\n<br>User runs method execution\r\n<br>System updates workitem by identifier\r\n<br>System returns updated workitem model (listed in response parameters)",
                "operationId": "UpdateWorkItem",
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPutModel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPutModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPutModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemPutModel"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "<br>Field is required\r\n<br>Priority is not a valid\r\n<br>duration should be a positive number\r\n<br>should be empty for CheckList\r\n<br>There is no option in ProjectAttributesScheme with such Id\r\n<br>Attribute value must be a valid guid for options scheme",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "<br>WorkItem not found\r\n<br>Can't find section\r\n<br>Can't attributesScheme\r\n<br>Can't attribute",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/workItems/{workItemId}/autoTests": {
            "get": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Get all AutoTests linked to WorkItem by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>User runs method execution\r\n<br>System search workitem by identifier\r\n<br>System search all autotests, related to found workitem\r\n<br>System returns list of found autotests",
                "operationId": "GetAutoTestsForWorkItem",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AutoTestModel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Delete all links AutoTests from WorkItem by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>User runs method execution\r\n<br>System search workitem by identifier\r\n<br>System search and delete all autotests, related to found workitem\r\n<br>System returns no content response",
                "operationId": "DeleteAllWorkItemsFromAutoTest",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Update permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find a WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/v2/workItems/{workItemId}/chronology": {
            "get": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Get WorkItem chronology by Id or GlobalId",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>User runs method execution\r\n<br>System search workitem by identifier\r\n<br>System search test results of all autotests, related to found workitem\r\n<br>System sort results by CompletedOn ascending, then by CreatedDate ascending\r\n<br>System returns sorted collection of test results",
                "operationId": "GetWorkItemChronology",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Not valid workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TestResultChronologyModel"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/workItems/{workItemId}/versions": {
            "get": {
                "tags": [
                    "WorkItems"
                ],
                "summary": "Get WorkItem versions",
                "description": "<br>Use case\r\n<br>User sets workitem identifier\r\n<br>[Optional] User sets workitem version identifier\r\n<br>User runs method execution\r\n<br>System search workitem by identifier\r\n<br>\r\n                    [Optional] If User set workitem version identifier, System search workitem version by version identifier\r\n                    Otherwise, system search all version of workitem\r\n                \r\n<br>System returns array of workitem version models (listed in response example)",
                "operationId": "GetWorkItemVersions",
                "parameters": [
                    {
                        "name": "workItemId",
                        "in": "path",
                        "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "workItemVersionId",
                        "in": "query",
                        "description": "WorkItem version (guid format)\r\nidentifier\"",
                        "schema": {
                            "type": "string",
                            "description": "WorkItem version (guid format)\r\nidentifier\"",
                            "format": "uuid",
                            "nullable": true,
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    },
                    {
                        "name": "versionNumber",
                        "in": "query",
                        "description": "WorkItem version (integer format)\r\nnumber\"",
                        "schema": {
                            "type": "integer",
                            "description": "WorkItem version (integer format)\r\nnumber\"",
                            "format": "int32",
                            "nullable": true,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Read permission for test library required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find WorkItem with workItemId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkItemVersionModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "LinkType": {
                "enum": [
                    "Related",
                    "BlockedBy",
                    "Defect",
                    "Issue",
                    "Requirement",
                    "Repository"
                ],
                "type": "string"
            },
            "LinkPutModel": {
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Link unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": " Link uniform resource locator",
                        "pattern": "^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z0-9\\u00a1-\\uffff][a-zA-Z0-9\\u00a1-\\uffff_-]{0,62})?[a-zA-Z0-9\\u00a1-\\uffff]\\.?)+(?:[a-zA-Z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$",
                        "type": "string",
                        "example": "https://google.com/"
                    },
                    "description": {
                        "title": "Link description",
                        "type": "string",
                        "nullable": true,
                        "example": "This link leads to google main page (no advertising)"
                    },
                    "type": {
                        "$ref": "#/components/schemas/LinkType"
                    },
                    "hasInfo": {
                        "title": "Flag defines if link relates to integrated jira service",
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "AutoTestStepModel": {
                "required": [
                    "title"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title of a step",
                        "type": "string",
                        "example": "Main part"
                    },
                    "description": {
                        "title": "Description of a step",
                        "type": "string",
                        "nullable": true,
                        "example": "This is a very important part of a test"
                    },
                    "steps": {
                        "title": "Property is set as deprecated for avoid recursive example generation in swagger UI",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true,
                        "deprecated": true
                    }
                },
                "additionalProperties": false
            },
            "LabelShortModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "globalId": {
                        "title": "Global identifier",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 100
                    },
                    "name": {
                        "title": "Label name",
                        "type": "string",
                        "example": "Black label"
                    }
                },
                "additionalProperties": false
            },
            "AutoTestModel": {
                "required": [
                    "externalId",
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "globalId": {
                        "title": "Autotest Global unique identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "isDeleted": {
                        "title": "Flag that defines if autotest is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "mustBeApproved": {
                        "title": "Flag that defines if autotest has workitem with changed steps",
                        "type": "boolean",
                        "nullable": true
                    },
                    "id": {
                        "title": "Autotest internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "createdDate": {
                        "title": "Date and time of autotest creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last autotest modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created autotest",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last autotest modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "externalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "example": "10001"
                    },
                    "links": {
                        "title": "Links, related to the current autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPutModel"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link autotest with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Autotest name",
                        "type": "string",
                        "example": "WorkItem valid creation test"
                    },
                    "namespace": {
                        "title": "Name of a group or package where this autotest's class is located",
                        "type": "string",
                        "nullable": true,
                        "example": "UnitTest.Core"
                    },
                    "classname": {
                        "title": "Name of a class where autotest is located",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItemServiceTest.cs"
                    },
                    "steps": {
                        "title": "Enumeration of autotest steps. Nested steps enumeration inside step object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "setup": {
                        "title": "Enumeration of actions to be executed before autotest start. Nested steps enumeration inside setup object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "teardown": {
                        "title": "Enumeration of actions to be executed after autotest finish. Nested steps enumeration inside teardown object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "title": {
                        "title": "Title of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItem creation test"
                    },
                    "description": {
                        "title": "Description of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "This test is interned to validate correct workItem creation"
                    },
                    "labels": {
                        "title": "Label of autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabelShortModel"
                        },
                        "nullable": true
                    },
                    "isFlaky": {
                        "title": "Flag indicating that the autotest is unstable",
                        "type": "boolean"
                    },
                    "stabilityPercentage": {
                        "title": "Stability percentage of autotest",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "LinkPostModel": {
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": " Link uniform resource locator",
                        "pattern": "^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z0-9\\u00a1-\\uffff][a-zA-Z0-9\\u00a1-\\uffff_-]{0,62})?[a-zA-Z0-9\\u00a1-\\uffff]\\.?)+(?:[a-zA-Z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$",
                        "type": "string",
                        "example": "https://google.com/"
                    },
                    "description": {
                        "title": "Link description",
                        "type": "string",
                        "nullable": true,
                        "example": "This link leads to google main page (no advertising)"
                    },
                    "type": {
                        "$ref": "#/components/schemas/LinkType"
                    },
                    "hasInfo": {
                        "title": "Flag defines if link relates to integrated jira service",
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "LabelPostModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Label name",
                        "type": "string",
                        "example": "Black label"
                    }
                },
                "additionalProperties": false
            },
            "AutoTestPostModel": {
                "required": [
                    "externalId",
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "externalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "example": "10001"
                    },
                    "links": {
                        "title": "Links, related to the current autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPostModel"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link autotest with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Autotest name",
                        "type": "string",
                        "example": "WorkItem valid creation test"
                    },
                    "namespace": {
                        "title": "Name of a group or package where this autotest's class is located",
                        "type": "string",
                        "nullable": true,
                        "example": "UnitTest.Core"
                    },
                    "classname": {
                        "title": "Name of a class where autotest is located",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItemServiceTest.cs"
                    },
                    "steps": {
                        "title": "Enumeration of autotest steps. Nested steps enumeration inside step object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "setup": {
                        "title": "Enumeration of actions to be executed before autotest start. Nested steps enumeration inside setup object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "teardown": {
                        "title": "Enumeration of actions to be executed after autotest finish. Nested steps enumeration inside teardown object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "title": {
                        "title": "Title of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItem creation test"
                    },
                    "description": {
                        "title": "Description of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "This test is interned to validate correct workItem creation"
                    },
                    "labels": {
                        "title": "Label of autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabelPostModel"
                        },
                        "nullable": true
                    },
                    "isFlaky": {
                        "title": "Flag indicating that the autotest is unstable",
                        "type": "boolean"
                    },
                    "stabilityPercentage": {
                        "title": "Stability percentage of autotest",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AutoTestPutModel": {
                "required": [
                    "externalId",
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Autotest unique internal identifier",
                        "type": "string",
                        "description": "Used for search autotest. If value equals Guid mask filled with zeros, search will be executed using ExternalId",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "externalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "example": "10001"
                    },
                    "links": {
                        "title": "Links, related to the current autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPutModel"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link autotest with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Autotest name",
                        "type": "string",
                        "example": "WorkItem valid creation test"
                    },
                    "namespace": {
                        "title": "Name of a group or package where this autotest's class is located",
                        "type": "string",
                        "nullable": true,
                        "example": "UnitTest.Core"
                    },
                    "classname": {
                        "title": "Name of a class where autotest is located",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItemServiceTest.cs"
                    },
                    "steps": {
                        "title": "Enumeration of autotest steps. Nested steps enumeration inside step object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "setup": {
                        "title": "Enumeration of actions to be executed before autotest start. Nested steps enumeration inside setup object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "teardown": {
                        "title": "Enumeration of actions to be executed after autotest finish. Nested steps enumeration inside teardown object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "title": {
                        "title": "Title of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItem creation test"
                    },
                    "description": {
                        "title": "Description of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "This test is interned to validate correct workItem creation"
                    },
                    "labels": {
                        "title": "Label of autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabelPostModel"
                        },
                        "nullable": true
                    },
                    "isFlaky": {
                        "title": "Flag indicating that the autotest is unstable",
                        "type": "boolean"
                    },
                    "stabilityPercentage": {
                        "title": "Stability percentage of autotest",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "WorkItemIdModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "WorkItem unique internal or global identifier",
                        "type": "string",
                        "description": "Used for search WorkItem. Internal identifier has a Guid data format. Global identifier has an integer data format",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "LinkModel": {
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Link unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": " Link uniform resource locator",
                        "pattern": "^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z0-9\\u00a1-\\uffff][a-zA-Z0-9\\u00a1-\\uffff_-]{0,62})?[a-zA-Z0-9\\u00a1-\\uffff]\\.?)+(?:[a-zA-Z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$",
                        "type": "string",
                        "example": "https://google.com/"
                    },
                    "description": {
                        "title": "Link description",
                        "type": "string",
                        "nullable": true,
                        "example": "This link leads to google main page (no advertising)"
                    },
                    "type": {
                        "$ref": "#/components/schemas/LinkType"
                    },
                    "hasInfo": {
                        "title": "Flag defines if link relates to integrated jira service",
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "AttachmentModel": {
                "required": [
                    "fileId",
                    "id",
                    "name",
                    "size",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "fileId": {
                        "title": "Unique identifier of attached file",
                        "type": "string",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "type": {
                        "title": "Attachment mime-type",
                        "type": "string",
                        "example": "image/jpeg"
                    },
                    "size": {
                        "title": "Attachment size (file length in bytes)",
                        "type": "number",
                        "format": "float",
                        "example": 5.555
                    },
                    "createdDate": {
                        "title": "Date and time of attachment creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last attachment modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created attachment",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last attachment modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Attachment name",
                        "type": "string",
                        "example": "My_favourite_image.jpg"
                    },
                    "id": {
                        "title": "Attachment internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "TestResultHistoryReportModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Internal test result identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "createdDate": {
                        "title": "Test result creation date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Test result last modification date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "userId": {
                        "title": "Internal identifier of user who stopped test run related to the test result or user who created the test result",
                        "type": "string",
                        "description": "If test run was stopped, this property equals identifier of user who stopped it.Otherwise, the property equals identifier of user who created the test result",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testRunId": {
                        "title": "Identifier of test run related to the test result",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testRunName": {
                        "title": "Name of test run related to the test result",
                        "type": "string",
                        "nullable": true,
                        "example": "Core tests"
                    },
                    "testPlanId": {
                        "title": "Internal identifier of test plan related to the test result's test run",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanGlobalId": {
                        "title": "Global identifier of test plan related to the test result's test run",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 100000
                    },
                    "testPlanName": {
                        "title": "Name of test plan related to the test result's test run",
                        "type": "string",
                        "nullable": true,
                        "example": "Release 7.13"
                    },
                    "configurationName": {
                        "title": "Configuration name of test point related to the test result or from test result itself",
                        "type": "string",
                        "description": "If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name",
                        "nullable": true,
                        "example": "Default"
                    },
                    "isAutomated": {
                        "title": "Boolean flag defines if test point related to the test result is automated or not",
                        "type": "boolean",
                        "example": true
                    },
                    "outcome": {
                        "title": "Outcome from test result with max modified date or from first created test result.Property can contain one of these values: Passed, Failed, Pending, Blocked, Skipped",
                        "type": "string",
                        "description": "If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equalsto the worst outcome of the last modified test result.Otherwise, the outcome equals to the outcome of first created test result in the test run",
                        "nullable": true,
                        "example": "Failed"
                    },
                    "comment": {
                        "title": "Test result comment",
                        "type": "string",
                        "description": "If any test result related to the test run is linked with autotest, comment will have default valueOtherwise, the comment equals to the comment of first created test result in the test run",
                        "nullable": true,
                        "example": "my first comment"
                    },
                    "links": {
                        "title": "Test result links",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkModel"
                        },
                        "description": "If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.Otherwise, the links equals to the links of first created test result in the test run",
                        "nullable": true
                    },
                    "startedOn": {
                        "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "duration": {
                        "title": "Duration of first created test result in the test run",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 100000
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created first test result in the test run",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last modification of first test result in the test run",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "attachments": {
                        "title": "Attachments related to the test result",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentModel"
                        },
                        "description": "If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result.Otherwise, the attachments equals to the attachments of first created test result in the test run",
                        "nullable": true
                    },
                    "workItemVersionId": {
                        "title": "Unique identifier of workitem version related to the first test result in the test run",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "workItemVersionNumber": {
                        "title": "Number of workitem version related to the first test result in the test run",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "failureClassId": {
                        "title": "Unique identifier of failure class related to the first test result in the test run",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "TestRunStateTypeModel": {
                "enum": [
                    "NotStarted",
                    "InProgress",
                    "Stopped",
                    "Completed"
                ],
                "type": "string"
            },
            "TestRunShortModel": {
                "type": "object",
                "properties": {
                    "stateName": {
                        "$ref": "#/components/schemas/TestRunStateTypeModel"
                    },
                    "projectId": {
                        "title": "Project internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "nullable": true,
                        "example": "Core tests"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "title": "Entity unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Boolean flag defines if entity if entity is archived",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "AutoTestAverageDurationModel": {
                "type": "object",
                "properties": {
                    "passedAverageDuration": {
                        "title": "Pass average duration of autotest from all related test results",
                        "type": "number",
                        "format": "double",
                        "example": 2.5555
                    },
                    "failedAverageDuration": {
                        "title": "Fail average duration of autotest from all related test results",
                        "type": "number",
                        "format": "double",
                        "example": 2.5555
                    }
                },
                "additionalProperties": false
            },
            "TestResultChronologyModel": {
                "type": "object",
                "properties": {
                    "outcome": {
                        "title": "Test result outcome",
                        "type": "string",
                        "nullable": true,
                        "example": "Passed"
                    },
                    "count": {
                        "title": "Count of test results with the same Outcome",
                        "type": "integer",
                        "format": "int32",
                        "example": 2.5555
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationModel": {
                "required": [
                    "capabilities"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "Configuration description",
                        "type": "string",
                        "nullable": true,
                        "example": "Default configuration"
                    },
                    "isActive": {
                        "title": "Boolean flag defines if the configuration is active",
                        "type": "boolean",
                        "example": true
                    },
                    "capabilities": {
                        "title": "Configuration capabilities",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link configuration with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDefault": {
                        "title": "Boolean flag defines if the configuration must be used as default",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Configuration name",
                        "type": "string",
                        "nullable": true,
                        "example": "Default"
                    },
                    "createdDate": {
                        "title": "Date and time of configuration creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last configuration modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created configuration",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last configuration modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "globalId": {
                        "title": "Configuration Global unique identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "id": {
                        "title": "Entity unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Boolean flag defines if entity if entity is archived",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationPostModel": {
                "required": [
                    "capabilities",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "Configuration description",
                        "type": "string",
                        "nullable": true,
                        "example": "Default configuration"
                    },
                    "isActive": {
                        "title": "Boolean flag defines if the configuration is active",
                        "type": "boolean",
                        "example": true
                    },
                    "capabilities": {
                        "title": "Configuration capabilities",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link configuration with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDefault": {
                        "title": "Boolean flag defines if the configuration must be used as default",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Configuration name",
                        "type": "string",
                        "example": "Default"
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationPutModel": {
                "required": [
                    "capabilities",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Configuration internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "description": {
                        "title": "Configuration description",
                        "type": "string",
                        "nullable": true,
                        "example": "Default configuration"
                    },
                    "isActive": {
                        "title": "Boolean flag defines if the configuration is active",
                        "type": "boolean",
                        "example": true
                    },
                    "capabilities": {
                        "title": "Configuration capabilities",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link configuration with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDefault": {
                        "title": "Boolean flag defines if the configuration must be used as default",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Configuration name",
                        "type": "string",
                        "example": "Default"
                    }
                },
                "additionalProperties": false
            },
            "ParameterModel": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdById": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "isDeleted": {
                        "title": "Flag that defines if parameter is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "parameterKeyId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "id": {
                        "title": "Parameter internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ParameterPostModel": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ParameterPutModel": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Parameter internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "CustomAttributeOptionModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Entity internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Flag that defines if entity is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "value": {
                        "title": "Custom attribute value",
                        "type": "string",
                        "nullable": true,
                        "example": "5 hours"
                    },
                    "isDefault": {
                        "title": "Flag that defines if attribute is default",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "CustomAttributeTypesEnum": {
                "enum": [
                    "string",
                    "datetime",
                    "options",
                    "user"
                ],
                "type": "string"
            },
            "CustomAttributeModel": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Custom attribute internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "options": {
                        "title": "Custom attribute option collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomAttributeOptionModel"
                        },
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomAttributeTypesEnum"
                    },
                    "isDeleted": {
                        "title": "Flag that defines if custom attribute is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Custom attribute name",
                        "type": "string",
                        "example": "Original estimate"
                    },
                    "enabled": {
                        "title": "Flag that defines if custom attribute is enabled",
                        "type": "boolean",
                        "example": true
                    },
                    "required": {
                        "title": "Flag that defines if custom attribute is required",
                        "type": "boolean",
                        "example": true
                    },
                    "isGlobal": {
                        "title": "Flag that defines if custom attribute is global",
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "ProjectModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "attributesScheme": {
                        "title": "Collection of project attributes",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomAttributeModel"
                        },
                        "nullable": true
                    },
                    "testCasesCount": {
                        "title": "Quantity of test cases related to project",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "example": 1
                    },
                    "sharedStepsCount": {
                        "title": "Quantity of shared steps related to project",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "example": 2
                    },
                    "checkListsCount": {
                        "title": "Quantity of check lists related to project",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "example": 5
                    },
                    "autoTestsCount": {
                        "title": "Quantity of auto tests related to project",
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "example": 10
                    },
                    "isFavorite": {
                        "title": "Flag that defines if project is marked as favourite",
                        "type": "boolean",
                        "description": "Property is used to filter favourite projects",
                        "example": true
                    },
                    "isDeleted": {
                        "title": "Flag that defines if project is archived",
                        "type": "boolean",
                        "example": true
                    },
                    "createdDate": {
                        "title": "Date and time of project creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last project modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created project",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last project modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "globalId": {
                        "title": "Project global unique identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "id": {
                        "title": "project unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "description": {
                        "title": "Description of a project",
                        "type": "string",
                        "nullable": true,
                        "example": "This project contains core tests"
                    },
                    "name": {
                        "title": "Name of a project",
                        "type": "string",
                        "example": "Core tests"
                    }
                },
                "additionalProperties": false
            },
            "ProjectPostModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "Description of a project",
                        "type": "string",
                        "nullable": true,
                        "example": "This project contains core tests"
                    },
                    "name": {
                        "title": "Name of a project",
                        "type": "string",
                        "example": "Core tests"
                    }
                },
                "additionalProperties": false
            },
            "ProjectPutModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "project unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "description": {
                        "title": "Description of a project",
                        "type": "string",
                        "nullable": true,
                        "example": "This project contains core tests"
                    },
                    "name": {
                        "title": "Name of a project",
                        "type": "string",
                        "example": "Core tests"
                    }
                },
                "additionalProperties": false
            },
            "SectionModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Parent section identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Flag that defines if section is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "id": {
                        "title": "Section unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "createdDate": {
                        "title": "Date and time of section creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last section modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created section",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last section modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Section name",
                        "type": "string",
                        "example": "Root section"
                    }
                },
                "additionalProperties": false
            },
            "AutoTestNamespaceModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Autotest namespace",
                        "type": "string",
                        "nullable": true,
                        "example": "WebApi.Core.Tests"
                    },
                    "classes": {
                        "title": "Autotest class names",
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "WorkItemPriorityModel": {
                "enum": [
                    "Lowest",
                    "Low",
                    "Medium",
                    "High",
                    "Highest"
                ],
                "type": "string"
            },
            "ParameterShortModel": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "parameterKeyId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "IterationModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ParameterShortModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "WorkItemShortModel": {
                "required": [
                    "entityTypeName",
                    "name",
                    "priority",
                    "projectId",
                    "sectionId",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Workitem internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "versionId": {
                        "title": "Workitem version identifier",
                        "type": "string",
                        "description": "used for versioning changes in workitem",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Workitem name",
                        "type": "string",
                        "example": "Performance test"
                    },
                    "entityTypeName": {
                        "title": "Workitem type",
                        "type": "string",
                        "description": "Property can have one of these values: CheckLists, SharedSteps, TestCases",
                        "example": "SharedSteps"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link autotest with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "sectionId": {
                        "title": "Identifier of section where workitem is located",
                        "type": "string",
                        "description": "This property links workitem with section",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isAutomated": {
                        "title": "Boolean flag befines if workitem is automated",
                        "type": "boolean",
                        "example": true
                    },
                    "globalId": {
                        "title": "Workitem global identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "duration": {
                        "title": "Workitem duration",
                        "type": "integer",
                        "format": "int32",
                        "example": 1000
                    },
                    "attributes": {
                        "title": "Workitem attributes",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created workitem",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last workitem modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "createdDate": {
                        "title": "Date and time of workitem creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last workitem modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "state": {
                        "title": "The current state of workitem",
                        "type": "string",
                        "description": "Property can have one of these values: NeedsWork, NotReady, Ready",
                        "example": "Ready"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/WorkItemPriorityModel"
                    },
                    "isDeleted": {
                        "title": "Flag that defines if workitem is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "tagNames": {
                        "title": "Workitem tag names array",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "iterations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IterationModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomAttributeOptionPostModel": {
                "type": "object",
                "properties": {
                    "value": {
                        "title": "Custom attribute value",
                        "type": "string",
                        "nullable": true,
                        "example": "5 hours"
                    },
                    "isDefault": {
                        "title": "Flag that defines if attribute is default",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "CustomAttributePostModel": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "options": {
                        "title": "Custom attribute option collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomAttributeOptionPostModel"
                        },
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomAttributeTypesEnum"
                    },
                    "name": {
                        "title": "Custom attribute name",
                        "type": "string",
                        "example": "Original estimate"
                    },
                    "enabled": {
                        "title": "Flag that defines if custom attribute is enabled",
                        "type": "boolean",
                        "example": true
                    },
                    "required": {
                        "title": "Flag that defines if custom attribute is required",
                        "type": "boolean",
                        "example": true
                    },
                    "isGlobal": {
                        "title": "Flag that defines if custom attribute is global",
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "TestPlanStatusModel": {
                "enum": [
                    "New",
                    "InProgress",
                    "Paused",
                    "Completed"
                ],
                "type": "string"
            },
            "TagShortModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "TestPlanModel": {
                "required": [
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/TestPlanStatusModel"
                    },
                    "startedOn": {
                        "title": "Date and time of test plan start",
                        "type": "string",
                        "description": "Set when test plan is starter (status changed to: In Progress)",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "Date and time of test plan end",
                        "type": "string",
                        "description": "set when test plan status is completed (status changed to: Completed)",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdDate": {
                        "title": "Date and time of test plan creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last test plan modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created test plan ",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last test plan modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "globalId": {
                        "title": "Test plan  unique global identifier",
                        "type": "integer",
                        "description": "Used for search Test plan",
                        "format": "int64",
                        "example": 100000
                    },
                    "isDeleted": {
                        "title": "Boolean flag defines if test plan is archived",
                        "type": "boolean",
                        "example": true
                    },
                    "lockedDate": {
                        "title": "Test plan lock date and time",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "id": {
                        "title": "Test plan unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "lockedById": {
                        "title": "User who locked test plan modification internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "tags": {
                        "title": "Test plan tag names collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        },
                        "nullable": true
                    },
                    "name": {
                        "title": "Test plan name",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "example": "Base test plan"
                    },
                    "startDate": {
                        "title": "Date and time of test plan start",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "endDate": {
                        "title": "Date and time of test plan end",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "description": {
                        "title": "Test plan description",
                        "maxLength": 999,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "This is a base test plan"
                    },
                    "build": {
                        "title": "Build of the application on which test plan is executed",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "v.3.0.0-b94f3055"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "productName": {
                        "title": "Name of the testing product",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "Billing service"
                    },
                    "hasAutomaticDurationTimer": {
                        "title": "Boolean flag defines if test plan has automatic duration timer",
                        "type": "boolean",
                        "nullable": true,
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "AutoTestModelV2GetModel": {
                "type": "object",
                "properties": {
                    "externalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "nullable": true,
                        "example": "10001"
                    },
                    "links": {
                        "title": "Links, related to the current autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkModel"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link autotest with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Autotest name",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItem valid creation test"
                    },
                    "namespace": {
                        "title": "Name of abstract storage where autotest is located",
                        "type": "string",
                        "nullable": true,
                        "example": "UnitTest.Core"
                    },
                    "classname": {
                        "title": "Name of a class where autotest is located",
                        "type": "string",
                        "nullable": true,
                        "example": "WorkItemServiceTest.cs"
                    },
                    "steps": {
                        "title": "Enumeration of autotest steps. Nested steps enumeration inside step object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "setup": {
                        "title": "Enumeration of actions to be executed before autotest start. Nested steps enumeration inside setup object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "teardown": {
                        "title": "Enumeration of actions to be executed after autotest finish. Nested steps enumeration inside teardown object is supported",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepModel"
                        },
                        "nullable": true
                    },
                    "globalId": {
                        "title": "Auto test Global unique identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "createdDate": {
                        "title": "Date and time of autotest creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last autotest modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created autotest",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last autotest modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "labels": {
                        "title": "Label of autotest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabelShortModel"
                        },
                        "nullable": true
                    },
                    "id": {
                        "title": "Entity unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Boolean flag defines if entity if entity is archived",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "TestPointShortModel": {
                "type": "object",
                "properties": {
                    "testSuiteId": {
                        "title": "Test suite to which test point relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "id": {
                        "title": "Test point unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testerId": {
                        "title": "Tester who is responsed for the test unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "workItemId": {
                        "title": "Workitem to which test point relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "configurationId": {
                        "title": "Configuration to which test point relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "status": {
                        "title": "Test point status",
                        "type": "string",
                        "description": "Applies one of these values: Blocked, NoResults, Failed, Passed",
                        "nullable": true,
                        "example": "NoResult"
                    },
                    "lastTestResultId": {
                        "title": "Last test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "iterationId": {
                        "title": "Iteration unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "TestResultV2GetModel": {
                "type": "object",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/ConfigurationModel"
                    },
                    "autoTest": {
                        "$ref": "#/components/schemas/AutoTestModelV2GetModel"
                    },
                    "id": {
                        "title": "Test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "configurationId": {
                        "title": "Configuration related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "workItemVersionId": {
                        "title": "Workitem version related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "autoTestId": {
                        "title": "Auto test related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "message": {
                        "title": "Auto test message",
                        "type": "string",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "traces": {
                        "title": "Test result trace",
                        "type": "string",
                        "nullable": true,
                        "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
                    },
                    "startedOn": {
                        "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "runByUserId": {
                        "title": "Unique identifier of user which run test result",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "stoppedByUserId": {
                        "title": "Unique identifier of user which stopped test result",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPointId": {
                        "title": "Test point related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPoint": {
                        "$ref": "#/components/schemas/TestPointShortModel"
                    },
                    "testRunId": {
                        "title": "Test run to which test result relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "outcome": {
                        "title": "Test result outcome",
                        "type": "string",
                        "description": "Property can contain one of these values: Passed, Failed, Pending, Blocked, Skipped",
                        "nullable": true,
                        "example": "Passed"
                    },
                    "comment": {
                        "title": "Test result comment",
                        "type": "string",
                        "nullable": true,
                        "example": "my first comment"
                    },
                    "links": {
                        "title": "Test result links collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkModel"
                        },
                        "nullable": true
                    },
                    "attachments": {
                        "title": "Test result attachments collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentModel"
                        },
                        "nullable": true
                    },
                    "parameters": {
                        "title": "Test result custom parameters",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "properties": {
                        "title": "Test result custom properties",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestRunV2GetModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "startedOn": {
                        "title": "Date and time of test run start",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "Date and time of test run end",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "stateName": {
                        "$ref": "#/components/schemas/TestRunStateTypeModel"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with test plan",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testResults": {
                        "title": "Enumeration of test results related to test run",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestResultV2GetModel"
                        },
                        "nullable": true
                    },
                    "createdDate": {
                        "title": "Date and time of test run creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last test run  modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created test run ",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last test run  modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "id": {
                        "title": "Test run unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "example": "First run"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ProjectExportQueryModel": {
                "type": "object",
                "properties": {
                    "sectionIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "nullable": true
                    },
                    "workItemIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ProblemDetails": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "detail": {
                        "type": "string",
                        "nullable": true
                    },
                    "instance": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": {}
            },
            "ProjectExportWithTestPlansPostModel": {
                "type": "object",
                "properties": {
                    "testPlansIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "SharedStepModel": {
                "type": "object",
                "properties": {
                    "versionId": {
                        "title": "Shared step version identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "globalId": {
                        "title": "Shared step global identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "name": {
                        "title": "Shared step name",
                        "type": "string",
                        "nullable": true,
                        "example": "First step"
                    },
                    "steps": {
                        "title": "Nested steps collection. Property is set as deprecated for avoid recursive example generation in swagger UI",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        },
                        "nullable": true,
                        "deprecated": true
                    },
                    "isDeleted": {
                        "title": "Flag that defines if shared step is archived",
                        "type": "boolean",
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "StepModel": {
                "type": "object",
                "properties": {
                    "workItem": {
                        "$ref": "#/components/schemas/SharedStepModel"
                    },
                    "id": {
                        "title": "Step unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "action": {
                        "title": "Action applied by user",
                        "type": "string",
                        "nullable": true,
                        "example": "User press the button"
                    },
                    "expected": {
                        "title": "Expected system reaction",
                        "type": "string",
                        "nullable": true,
                        "example": "System makes a beeeep sound"
                    },
                    "testData": {
                        "title": "Test data for step",
                        "type": "string",
                        "nullable": true,
                        "example": "Some variables values"
                    },
                    "comments": {
                        "title": "Comments for step",
                        "type": "string",
                        "nullable": true,
                        "example": "Comment on what to look for"
                    },
                    "workItemId": {
                        "title": "Unique identifier of workitem which relates to the step ",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "SectionWithStepsModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "preconditionSteps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        },
                        "nullable": true
                    },
                    "postconditionSteps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        },
                        "nullable": true
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Parent section identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "isDeleted": {
                        "title": "Flag that defines if section is deleted",
                        "type": "boolean",
                        "example": true
                    },
                    "id": {
                        "title": "Section unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "createdDate": {
                        "title": "Date and time of section creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last section modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created section",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last section modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Section name",
                        "type": "string",
                        "example": "Root section"
                    }
                },
                "additionalProperties": false
            },
            "StepPutModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Step unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "action": {
                        "title": "Action applied by user",
                        "type": "string",
                        "nullable": true,
                        "example": "User press the button"
                    },
                    "expected": {
                        "title": "Expected system reaction",
                        "type": "string",
                        "nullable": true,
                        "example": "System makes a beeeep sound"
                    },
                    "testData": {
                        "title": "Test data for step",
                        "type": "string",
                        "nullable": true,
                        "example": "Some variables values"
                    },
                    "comments": {
                        "title": "Comments for step",
                        "type": "string",
                        "nullable": true,
                        "example": "Comment on what to look for"
                    },
                    "workItemId": {
                        "title": "Unique identifier of workitem which relates to the step ",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "SectionPostModel": {
                "required": [
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Section unique internal identifier",
                        "type": "string",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Parent section identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "preconditionSteps": {
                        "title": "Section precondition steps collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        },
                        "nullable": true
                    },
                    "postconditionSteps": {
                        "title": "Section postcondition steps collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "SectionPutModel": {
                "required": [
                    "id",
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "title": "Section unique internal identifier",
                        "type": "string",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Parent section identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "preconditionSteps": {
                        "title": "Section precondition steps collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        },
                        "nullable": true
                    },
                    "postconditionSteps": {
                        "title": "Section postcondition steps collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "SectionRenameModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Section unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Section name",
                        "type": "string",
                        "example": "New root section"
                    }
                },
                "additionalProperties": false
            },
            "SectionMoveModel": {
                "required": [
                    "id",
                    "oldParentId",
                    "parentId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Section name",
                        "type": "string",
                        "format": "uuid",
                        "example": "Root section"
                    },
                    "oldParentId": {
                        "title": "Current parent section identifier to be updated",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "New parent section identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "nextSectionId": {
                        "title": "Next section identifier",
                        "type": "string",
                        "description": "Used for section rank set",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "TestPlanPostModel": {
                "required": [
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "tags": {
                        "title": "Test plan tag names collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        },
                        "nullable": true
                    },
                    "name": {
                        "title": "Test plan name",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "example": "Base test plan"
                    },
                    "startDate": {
                        "title": "Date and time of test plan start",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "endDate": {
                        "title": "Date and time of test plan end",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "description": {
                        "title": "Test plan description",
                        "maxLength": 999,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "This is a base test plan"
                    },
                    "build": {
                        "title": "Build of the application on which test plan is executed",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "v.3.0.0-b94f3055"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "productName": {
                        "title": "Name of the testing product",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "Billing service"
                    },
                    "hasAutomaticDurationTimer": {
                        "title": "Boolean flag defines if test plan has automatic duration timer",
                        "type": "boolean",
                        "nullable": true,
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "TestPlanPutModel": {
                "required": [
                    "name",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Test plan unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "lockedById": {
                        "title": "User who locked test plan modification internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "tags": {
                        "title": "Test plan tag names collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        },
                        "nullable": true
                    },
                    "name": {
                        "title": "Test plan name",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "example": "Base test plan"
                    },
                    "startDate": {
                        "title": "Date and time of test plan start",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "endDate": {
                        "title": "Date and time of test plan end",
                        "type": "string",
                        "description": "Used for analytics",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "description": {
                        "title": "Test plan description",
                        "maxLength": 999,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "This is a base test plan"
                    },
                    "build": {
                        "title": "Build of the application on which test plan is executed",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "v.3.0.0-b94f3055"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "productName": {
                        "title": "Name of the testing product",
                        "maxLength": 450,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true,
                        "example": "Billing service"
                    },
                    "hasAutomaticDurationTimer": {
                        "title": "Boolean flag defines if test plan has automatic duration timer",
                        "type": "boolean",
                        "nullable": true,
                        "example": true
                    }
                },
                "additionalProperties": false
            },
            "TestSuiteV2TreeModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "children": {
                        "title": "Enumeration of children test suites. Property is set as deprecated for avoid recursive example generation in swagger UI",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestSuiteV2TreeModel"
                        },
                        "description": "nested enumeration of children is allowed",
                        "nullable": true,
                        "deprecated": true
                    },
                    "id": {
                        "title": "Test suite unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Current test suite parent identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test site name",
                        "type": "string",
                        "example": "base test suite"
                    }
                },
                "additionalProperties": false
            },
            "AttachmentPutModel": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Attachment internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "AttachmentPutModelAutoTestStepResultsModel": {
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title of autotest step result",
                        "type": "string",
                        "nullable": true,
                        "example": "Final autotest step"
                    },
                    "description": {
                        "title": "Description of autotest",
                        "type": "string",
                        "nullable": true,
                        "example": "This step must be the las one"
                    },
                    "startedOn": {
                        "title": "Date and time of auto test step started",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "Date and time of auto test step ended",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "duration": {
                        "title": "Duration of auto test step",
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 100000
                    },
                    "outcome": {
                        "title": "Auto test step outcome",
                        "type": "string",
                        "nullable": true,
                        "example": "Passed"
                    },
                    "stepResults": {
                        "title": "Enumeration of auto test step results. Property is set as deprecated for avoid recursive example generation in swagger UI",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "description": "nested enumeration is allowed",
                        "nullable": true,
                        "deprecated": true
                    },
                    "attachments": {
                        "title": "Attachments related to the auto test step result",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModel"
                        },
                        "nullable": true
                    },
                    "parameters": {
                        "title": "Parameters related to the auto test step result",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AutoTestResultPostModel": {
                "required": [
                    "autoTestExternalId",
                    "configurationGlobalId",
                    "outcome",
                    "testPlanGlobalId",
                    "testRunId"
                ],
                "type": "object",
                "properties": {
                    "testRunId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "testPlanGlobalId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "configurationGlobalId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPostModel"
                        },
                        "nullable": true
                    },
                    "failureReasonName": {
                        "type": "string",
                        "nullable": true
                    },
                    "autoTestExternalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "example": "10001"
                    },
                    "outcome": {
                        "title": "Test result outcome",
                        "type": "string",
                        "description": "Property can contain one of these values: Passed, Failed, Pending, Blocked, Skipped",
                        "example": "Passed"
                    },
                    "message": {
                        "title": "Auto test message",
                        "type": "string",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "traces": {
                        "title": "Test result trace",
                        "type": "string",
                        "nullable": true,
                        "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
                    },
                    "startedOn": {
                        "title": "Date and time of test run start",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "Date and time of test run end",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "duration": {
                        "title": "Auto test duration",
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 10987
                    },
                    "attachments": {
                        "title": "Auto test attachment collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModel"
                        },
                        "nullable": true
                    },
                    "parameters": {
                        "title": "Test result custom parameters",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "properties": {
                        "title": "Test result custom properties",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "stepResults": {
                        "title": "Result of autotest steps array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    },
                    "setupResults": {
                        "title": "Result of autotest setup array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    },
                    "teardownResults": {
                        "title": "Result of autotest teardown array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ImageResizeOption": {
                "enum": [
                    "Crop",
                    "AddBackgroundStripes"
                ],
                "type": "string"
            },
            "TestRunV2PostShortModel": {
                "required": [
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is to link test run with a project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "nullable": true,
                        "example": "First run"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestRunV2PutModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Test run unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "example": "First run"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestRunFillByWorkItemsPostModel": {
                "required": [
                    "configurationIds",
                    "projectId",
                    "testPlanId",
                    "workitemIds"
                ],
                "type": "object",
                "properties": {
                    "configurationIds": {
                        "title": "Configuration identifiers array",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "workitemIds": {
                        "title": "Wokrkitem identifiers array",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with test plan",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "nullable": true,
                        "example": "First run"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestPointSelector": {
                "required": [
                    "configurationId",
                    "workitemIds"
                ],
                "type": "object",
                "properties": {
                    "configurationId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "workitemIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                },
                "additionalProperties": false
            },
            "TestRunFillByConfigurationsPostModel": {
                "required": [
                    "projectId",
                    "testPlanId",
                    "testPointSelectors"
                ],
                "type": "object",
                "properties": {
                    "testPointSelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestPointSelector"
                        }
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with test plan",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "nullable": true,
                        "example": "First run"
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestRunFillByAutoTestsPostModel": {
                "required": [
                    "autoTestExternalIds",
                    "configurationIds",
                    "projectId"
                ],
                "type": "object",
                "properties": {
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link test run with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test run name",
                        "type": "string",
                        "nullable": true,
                        "example": "First run"
                    },
                    "configurationIds": {
                        "title": "Configuration identifiers array",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "autoTestExternalIds": {
                        "title": "Auto test external identifiers array",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "title": "Test run description",
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AutoTestResultsForTestRunModel": {
                "required": [
                    "autoTestExternalId",
                    "configurationId",
                    "outcome"
                ],
                "type": "object",
                "properties": {
                    "configurationId": {
                        "title": "Autotest configuration internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "links": {
                        "title": "Collection of autotest links",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPostModel"
                        },
                        "nullable": true
                    },
                    "failureReasonName": {
                        "title": "Name of auto test fail reason",
                        "type": "string",
                        "description": "Property may have one of listed values: InfrastructureDefect, ProductDefect, TestDefect, NoDefect",
                        "nullable": true,
                        "example": "NoDefect"
                    },
                    "autoTestExternalId": {
                        "title": "External autotest identifier (unique in each project)",
                        "type": "string",
                        "description": "This property is used to set autotest identifier from client system",
                        "example": "10001"
                    },
                    "outcome": {
                        "title": "Test result outcome",
                        "type": "string",
                        "description": "Property can contain one of these values: Passed, Failed, Pending, Blocked, Skipped",
                        "example": "Passed"
                    },
                    "message": {
                        "title": "Auto test message",
                        "type": "string",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "traces": {
                        "title": "Test result trace",
                        "type": "string",
                        "nullable": true,
                        "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
                    },
                    "startedOn": {
                        "title": "Date and time of test run start",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "Date and time of test run end",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "duration": {
                        "title": "Auto test duration",
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 10987
                    },
                    "attachments": {
                        "title": "Auto test attachment collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModel"
                        },
                        "nullable": true
                    },
                    "parameters": {
                        "title": "Test result custom parameters",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "properties": {
                        "title": "Test result custom properties",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "stepResults": {
                        "title": "Result of autotest steps array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    },
                    "setupResults": {
                        "title": "Result of autotest setup array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    },
                    "teardownResults": {
                        "title": "Result of autotest teardown array",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestSuiteV2GetModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Test suite unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "parentId": {
                        "title": "Current test suite parent identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test site name",
                        "type": "string",
                        "example": "base test suite"
                    }
                },
                "additionalProperties": false
            },
            "TestSuiteV2PostModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "parentId": {
                        "title": "Current test suite parent identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPlanId": {
                        "title": "Test plan unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "name": {
                        "title": "Test site name",
                        "type": "string",
                        "example": "base test suite"
                    }
                },
                "additionalProperties": false
            },
            "TestSuiteV2PutModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "TestPointByTestSuiteModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Test point unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testerId": {
                        "title": "Tester who is responsed for the test unique internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "workItemId": {
                        "title": "Workitem to which test point relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "configurationId": {
                        "title": "Configuration to which test point relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "status": {
                        "title": "Test point status",
                        "type": "string",
                        "description": "Applies one of these values: Blocked, NoResults, Failed, Passed",
                        "nullable": true,
                        "example": "NoResult"
                    },
                    "lastTestResultId": {
                        "title": "Last test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "iterationId": {
                        "title": "Iteration unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "TestResultV2ShortModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "configurationId": {
                        "title": "Configuration related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "workItemVersionId": {
                        "title": "Workitem version related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "autoTestId": {
                        "title": "Auto test related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "message": {
                        "title": "Auto test message",
                        "type": "string",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "traces": {
                        "title": "Test result trace",
                        "type": "string",
                        "nullable": true,
                        "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
                    },
                    "startedOn": {
                        "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "completedOn": {
                        "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "runByUserId": {
                        "title": "Unique identifier of user which run test result",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "stoppedByUserId": {
                        "title": "Unique identifier of user which stopped test result",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPointId": {
                        "title": "Test point related to test result unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "testPoint": {
                        "$ref": "#/components/schemas/TestPointShortModel"
                    },
                    "testRunId": {
                        "title": "Test run to which test result relates unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "outcome": {
                        "title": "Test result outcome",
                        "type": "string",
                        "description": "Property can contain one of these values: Passed, Failed, Pending, Blocked, Skipped",
                        "nullable": true,
                        "example": "Passed"
                    },
                    "comment": {
                        "title": "Test result comment",
                        "type": "string",
                        "nullable": true,
                        "example": "my first comment"
                    },
                    "links": {
                        "title": "Test result links collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkModel"
                        },
                        "nullable": true
                    },
                    "attachments": {
                        "title": "Test result attachments collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentModel"
                        },
                        "nullable": true
                    },
                    "parameters": {
                        "title": "Test result custom parameters",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "properties": {
                        "title": "Test result custom properties",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "WorkItemEntityTypes": {
                "enum": [
                    "TestCases",
                    "CheckLists",
                    "SharedSteps"
                ],
                "type": "string"
            },
            "WorkItemStates": {
                "enum": [
                    "NeedsWork",
                    "NotReady",
                    "Ready"
                ],
                "type": "string"
            },
            "WorkItemModel": {
                "required": [
                    "attributes",
                    "entityTypeName",
                    "links",
                    "name",
                    "postconditionSteps",
                    "preconditionSteps",
                    "priority",
                    "state",
                    "steps",
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "versionId": {
                        "title": "Workitem version identifier",
                        "type": "string",
                        "description": "used for versioning changes in workitem",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "medianDuration": {
                        "title": "Workitem median duration",
                        "type": "integer",
                        "description": "used for getting a median duration of all autotests related to this workitem",
                        "format": "int64",
                        "example": 10000
                    },
                    "isDeleted": {
                        "title": "Flag that defines if workitem is archived",
                        "type": "boolean",
                        "example": true
                    },
                    "projectId": {
                        "title": "Project where workitem is located unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "entityTypeName": {
                        "$ref": "#/components/schemas/WorkItemEntityTypes"
                    },
                    "isAutomated": {
                        "title": "Flag that defines if workitem is automated",
                        "type": "boolean",
                        "example": true
                    },
                    "autoTests": {
                        "title": "Collection of autotests which relates to workitem",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestModel"
                        },
                        "nullable": true
                    },
                    "attachments": {
                        "title": "Collection of attachments which relates to workitem",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentModel"
                        },
                        "nullable": true
                    },
                    "sectionPreconditionSteps": {
                        "title": "Collection of precondition steps from section where workitem is located",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        },
                        "nullable": true
                    },
                    "sectionPostconditionSteps": {
                        "title": "Collection of postcondition steps from section where workitem is located",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        },
                        "nullable": true
                    },
                    "versionNumber": {
                        "title": "Workitem version number",
                        "type": "integer",
                        "description": "used for define chronology of workitem state in each version",
                        "format": "int32",
                        "example": 10
                    },
                    "iterations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IterationModel"
                        },
                        "nullable": true
                    },
                    "createdDate": {
                        "title": "Date and time of workitem creation",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedDate": {
                        "title": "Date and time of last workitem modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "createdById": {
                        "title": "Unique identifier of user who created workitem",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied last workitem modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "globalId": {
                        "title": "Shared step global identifier",
                        "type": "integer",
                        "format": "int64",
                        "example": 1000
                    },
                    "id": {
                        "title": "Workitem internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "sectionId": {
                        "title": "Internal identifier of section where workitem is located ",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "description": {
                        "title": "Workitem description",
                        "type": "string",
                        "nullable": true,
                        "example": "This is a basic test template"
                    },
                    "state": {
                        "$ref": "#/components/schemas/WorkItemStates"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/WorkItemPriorityModel"
                    },
                    "steps": {
                        "title": "Collection of workitem steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        }
                    },
                    "preconditionSteps": {
                        "title": "Collection of workitem precondtion steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        }
                    },
                    "postconditionSteps": {
                        "title": "Collection of workitem postcondition steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepModel"
                        }
                    },
                    "duration": {
                        "title": "Workitem duration",
                        "maximum": 86400,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "attributes": {
                        "title": "Key value pair of custom workitem attributes",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "title": "Collection of workitem tags",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        }
                    },
                    "links": {
                        "title": "Collection of workitem links",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkModel"
                        }
                    },
                    "name": {
                        "title": "Workitem name",
                        "type": "string",
                        "example": "Basic template"
                    }
                },
                "additionalProperties": false
            },
            "ParameterIterationModel": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Parameter internal unique identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "IterationPutModel": {
                "required": [
                    "parameters"
                ],
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ParameterIterationModel"
                        }
                    },
                    "id": {
                        "title": "Iteration identifier, must be empty for new or changed iteration",
                        "type": "string",
                        "format": "uuid",
                        "example": "00000000-0000-0000-0000-000000000000"
                    }
                },
                "additionalProperties": false
            },
            "WorkItemPostModel": {
                "required": [
                    "attributes",
                    "entityTypeName",
                    "links",
                    "name",
                    "postconditionSteps",
                    "preconditionSteps",
                    "priority",
                    "projectId",
                    "sectionId",
                    "state",
                    "steps",
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "entityTypeName": {
                        "$ref": "#/components/schemas/WorkItemEntityTypes"
                    },
                    "description": {
                        "title": "Workitem description",
                        "type": "string",
                        "nullable": true,
                        "example": "This is a basic test template"
                    },
                    "state": {
                        "$ref": "#/components/schemas/WorkItemStates"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/WorkItemPriorityModel"
                    },
                    "steps": {
                        "title": "Collection of workitem steps ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "preconditionSteps": {
                        "title": "Collection of workitem precondition steps ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "postconditionSteps": {
                        "title": "Collection of workitem postcondition steps ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "duration": {
                        "title": "Workitem duration",
                        "maximum": 86400,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "attributes": {
                        "title": "Key value pair of custom workitem attributes",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "title": "Collection of workitem tags",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        }
                    },
                    "attachments": {
                        "title": "Collection of workitem attachments",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModel"
                        },
                        "nullable": true
                    },
                    "iterations": {
                        "title": "Collection of parameter sets",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IterationPutModel"
                        },
                        "nullable": true
                    },
                    "links": {
                        "title": "Collection of workitem links",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPostModel"
                        }
                    },
                    "name": {
                        "title": "Workitem name",
                        "type": "string",
                        "example": "Basic template"
                    },
                    "projectId": {
                        "title": "Project unique identifier",
                        "type": "string",
                        "description": "This property is used to link workitem with project",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "sectionId": {
                        "title": "Internal identifier of section where workitem is located ",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            },
            "WorkItemPutModel": {
                "required": [
                    "attachments",
                    "attributes",
                    "links",
                    "name",
                    "postconditionSteps",
                    "preconditionSteps",
                    "priority",
                    "state",
                    "steps",
                    "tags"
                ],
                "type": "object",
                "properties": {
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachmentPutModel"
                        }
                    },
                    "iterations": {
                        "title": "Collection of parameter id sets",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IterationPutModel"
                        },
                        "nullable": true
                    },
                    "id": {
                        "title": "Workitem internal identifier",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "sectionId": {
                        "title": "Internal identifier of section where workitem is located ",
                        "type": "string",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "description": {
                        "title": "Workitem description",
                        "type": "string",
                        "nullable": true,
                        "example": "This is a basic test template"
                    },
                    "state": {
                        "$ref": "#/components/schemas/WorkItemStates"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/WorkItemPriorityModel"
                    },
                    "steps": {
                        "title": "Collection of workitem steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "preconditionSteps": {
                        "title": "Collection of workitem precondtion steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "postconditionSteps": {
                        "title": "Collection of workitem postcondition steps",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepPutModel"
                        }
                    },
                    "duration": {
                        "title": "Workitem duration",
                        "maximum": 86400,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "attributes": {
                        "title": "Key value pair of custom workitem attributes",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "title": "Collection of workitem tags",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagShortModel"
                        }
                    },
                    "links": {
                        "title": "Collection of workitem links",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkPutModel"
                        }
                    },
                    "name": {
                        "title": "Workitem name",
                        "type": "string",
                        "example": "Basic template"
                    }
                },
                "additionalProperties": false
            },
            "WorkItemVersionModel": {
                "type": "object",
                "properties": {
                    "versionId": {
                        "title": "Workitem version identifier",
                        "type": "string",
                        "description": "used for versioning changes in workitem",
                        "format": "uuid",
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    },
                    "versionNumber": {
                        "title": "Workitem version number",
                        "type": "integer",
                        "description": "used for define chronology of workitem state in each version",
                        "format": "int32",
                        "example": 10
                    },
                    "modifiedDate": {
                        "title": "Date and time of workitem version modification",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-10-26T16:53:12.2397448+00:00"
                    },
                    "modifiedById": {
                        "title": "Unique identifier of user who applied workitem version modification",
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "example": "401b9229-70e4-4a41-ae6d-880dc7fa4322"
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "Bearer or PrivateToken": {
                "type": "apiKey",
                "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: PrivateToken {secretKey}\"",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "Bearer or PrivateToken": []
        }
    ]
}