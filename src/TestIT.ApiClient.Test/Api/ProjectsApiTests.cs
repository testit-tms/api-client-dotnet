/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using TestIT.ApiClient.Client;
using TestIT.ApiClient.Api;
// uncomment below to import models
//using TestIT.ApiClient.Model;

namespace TestIT.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing ProjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProjectsApiTests : IDisposable
    {
        private ProjectsApi instance;

        public ProjectsApiTests()
        {
            instance = new ProjectsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProjectsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProjectsApi
            //Assert.IsType<ProjectsApi>(instance);
        }

        /// <summary>
        /// Test AddGlobaAttributesToProject
        /// </summary>
        [Fact]
        public void AddGlobaAttributesToProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Guid> requestBody = null;
            //instance.AddGlobaAttributesToProject(id, requestBody);
        }

        /// <summary>
        /// Test ApiV2ProjectsDemoPost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsDemoPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateProjectRequest createProjectRequest = null;
            //var response = instance.ApiV2ProjectsDemoPost(createProjectRequest);
            //Assert.IsType<ProjectModel>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdDelete
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ApiV2ProjectsIdDelete(id);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdFailureClassesGet
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdFailureClassesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? isDeleted = null;
            //var response = instance.ApiV2ProjectsIdFailureClassesGet(id, isDeleted);
            //Assert.IsType<List<FailureClassModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdFavoritePut
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdFavoritePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ApiV2ProjectsIdFavoritePut(id);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdFiltersGet
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdFiltersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ApiV2ProjectsIdFiltersGet(id);
            //Assert.IsType<List<FilterModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdPatch
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<Operation> operation = null;
            //instance.ApiV2ProjectsIdPatch(id, operation);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdPurgePost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdPurgePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ApiV2ProjectsIdPurgePost(id);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdRestorePost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdRestorePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ApiV2ProjectsIdRestorePost(id);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdTestPlansAttributeAttributeIdDelete
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdTestPlansAttributeAttributeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid attributeId = null;
            //instance.ApiV2ProjectsIdTestPlansAttributeAttributeIdDelete(id, attributeId);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdTestPlansAttributePut
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdTestPlansAttributePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateCustomAttributeTestPlanProjectRelationsRequest updateCustomAttributeTestPlanProjectRelationsRequest = null;
            //instance.ApiV2ProjectsIdTestPlansAttributePut(id, updateCustomAttributeTestPlanProjectRelationsRequest);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdTestRunsActiveGet
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdTestRunsActiveGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ApiV2ProjectsIdTestRunsActiveGet(id);
            //Assert.IsType<List<PublicTestRunModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsIdTestRunsFullGet
        /// </summary>
        [Fact]
        public void ApiV2ProjectsIdTestRunsFullGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? includeTestResults = null;
            //bool? mustAggregateTestResults = null;
            //bool? notStarted = null;
            //bool? inProgress = null;
            //bool? stopped = null;
            //bool? completed = null;
            //DateTime? createdDateFrom = null;
            //DateTime? createdDateTo = null;
            //Guid? testPlanId = null;
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //var response = instance.ApiV2ProjectsIdTestRunsFullGet(id, includeTestResults, mustAggregateTestResults, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
            //Assert.IsType<List<TestRunModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsNameNameExistsGet
        /// </summary>
        [Fact]
        public void ApiV2ProjectsNameNameExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ApiV2ProjectsNameNameExistsGet(name);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsPurgeBulkPost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsPurgeBulkPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiV2ProjectsRestoreBulkPostRequest apiV2ProjectsRestoreBulkPostRequest = null;
            //var response = instance.ApiV2ProjectsPurgeBulkPost(apiV2ProjectsRestoreBulkPostRequest);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsRestoreBulkPost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsRestoreBulkPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiV2ProjectsRestoreBulkPostRequest apiV2ProjectsRestoreBulkPostRequest = null;
            //var response = instance.ApiV2ProjectsRestoreBulkPost(apiV2ProjectsRestoreBulkPostRequest);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test ApiV2ProjectsSearchPost
        /// </summary>
        [Fact]
        public void ApiV2ProjectsSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //ApiV2ProjectsSearchPostRequest apiV2ProjectsSearchPostRequest = null;
            //var response = instance.ApiV2ProjectsSearchPost(skip, take, orderBy, searchField, searchValue, apiV2ProjectsSearchPostRequest);
            //Assert.IsType<List<ProjectModel>>(response);
        }

        /// <summary>
        /// Test BackgroundImportProject
        /// </summary>
        [Fact]
        public void BackgroundImportProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FileParameter file = null;
            //var response = instance.BackgroundImportProject(file);
            //Assert.IsType<Guid>(response);
        }

        /// <summary>
        /// Test BackgroundImportZipProject
        /// </summary>
        [Fact]
        public void BackgroundImportZipProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FileParameter file = null;
            //var response = instance.BackgroundImportZipProject(file);
            //Assert.IsType<Guid>(response);
        }

        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Fact]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateProjectRequest createProjectRequest = null;
            //var response = instance.CreateProject(createProjectRequest);
            //Assert.IsType<ProjectModel>(response);
        }

        /// <summary>
        /// Test DeleteProjectAutoTests
        /// </summary>
        [Fact]
        public void DeleteProjectAutoTestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteProjectAutoTests(id);
        }

        /// <summary>
        /// Test ExportWithTestPlansAndConfigurations
        /// </summary>
        [Fact]
        public void ExportWithTestPlansAndConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? includeAttachments = null;
            //ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = null;
            //var response = instance.ExportWithTestPlansAndConfigurations(id, includeAttachments, exportProjectWithTestPlansJsonRequest);
            //Assert.IsType<FileParameter>(response);
        }

        /// <summary>
        /// Test GetAllProjects
        /// </summary>
        [Fact]
        public void GetAllProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isDeleted = null;
            //string projectName = null;
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //var response = instance.GetAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue);
            //Assert.IsType<List<ProjectModel>>(response);
        }

        /// <summary>
        /// Test GetAutoTestsNamespaces
        /// </summary>
        [Fact]
        public void GetAutoTestsNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAutoTestsNamespaces(id);
            //Assert.IsType<List<AutoTestNamespaceModel>>(response);
        }

        /// <summary>
        /// Test GetProjectById
        /// </summary>
        [Fact]
        public void GetProjectByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetProjectById(id);
            //Assert.IsType<ProjectModel>(response);
        }

        /// <summary>
        /// Test GetTestPlansByProjectId
        /// </summary>
        [Fact]
        public void GetTestPlansByProjectIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? isDeleted = null;
            //var response = instance.GetTestPlansByProjectId(id, isDeleted);
            //Assert.IsType<List<TestPlanModel>>(response);
        }

        /// <summary>
        /// Test GetTestRunsByProjectId
        /// </summary>
        [Fact]
        public void GetTestRunsByProjectIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? notStarted = null;
            //bool? inProgress = null;
            //bool? stopped = null;
            //bool? completed = null;
            //DateTime? createdDateFrom = null;
            //DateTime? createdDateTo = null;
            //Guid? testPlanId = null;
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //var response = instance.GetTestRunsByProjectId(id, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
            //Assert.IsType<List<TestRunV2GetModel>>(response);
        }

        /// <summary>
        /// Test Import
        /// </summary>
        [Fact]
        public void ImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeAttachments = null;
            //FileParameter file = null;
            //instance.Import(includeAttachments, file);
        }

        /// <summary>
        /// Test UpdateProject
        /// </summary>
        [Fact]
        public void UpdateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateProjectRequest updateProjectRequest = null;
            //instance.UpdateProject(updateProjectRequest);
        }
    }
}
