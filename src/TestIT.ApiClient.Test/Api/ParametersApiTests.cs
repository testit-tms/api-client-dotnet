/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using TestIT.ApiClient.Client;
using TestIT.ApiClient.Api;
// uncomment below to import models
//using TestIT.ApiClient.Model;

namespace TestIT.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing ParametersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ParametersApiTests : IDisposable
    {
        private ParametersApi instance;

        public ParametersApiTests()
        {
            instance = new ParametersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ParametersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ParametersApi
            //Assert.IsType<ParametersApi>(instance);
        }

        /// <summary>
        /// Test ApiV2ParametersBulkPost
        /// </summary>
        [Fact]
        public void ApiV2ParametersBulkPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<ParameterPostModel> parameterPostModel = null;
            //var response = instance.ApiV2ParametersBulkPost(parameterPostModel);
            //Assert.IsType<List<ParameterModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersBulkPut
        /// </summary>
        [Fact]
        public void ApiV2ParametersBulkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<ParameterPutModel> parameterPutModel = null;
            //instance.ApiV2ParametersBulkPut(parameterPutModel);
        }

        /// <summary>
        /// Test ApiV2ParametersGroupsGet
        /// </summary>
        [Fact]
        public void ApiV2ParametersGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isDeleted = null;
            //List<Guid> parameterKeyIds = null;
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //var response = instance.ApiV2ParametersGroupsGet(isDeleted, parameterKeyIds, skip, take, orderBy, searchField, searchValue);
            //Assert.IsType<List<ParameterGroupModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersKeyNameNameExistsGet
        /// </summary>
        [Fact]
        public void ApiV2ParametersKeyNameNameExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ApiV2ParametersKeyNameNameExistsGet(name);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersKeyValuesGet
        /// </summary>
        [Fact]
        public void ApiV2ParametersKeyValuesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.ApiV2ParametersKeyValuesGet(key);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersKeysGet
        /// </summary>
        [Fact]
        public void ApiV2ParametersKeysGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV2ParametersKeysGet();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersSearchGroupsPost
        /// </summary>
        [Fact]
        public void ApiV2ParametersSearchGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //ApiV2ParametersSearchPostRequest apiV2ParametersSearchPostRequest = null;
            //var response = instance.ApiV2ParametersSearchGroupsPost(skip, take, orderBy, searchField, searchValue, apiV2ParametersSearchPostRequest);
            //Assert.IsType<List<ParameterGroupModel>>(response);
        }

        /// <summary>
        /// Test ApiV2ParametersSearchPost
        /// </summary>
        [Fact]
        public void ApiV2ParametersSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //ApiV2ParametersSearchPostRequest apiV2ParametersSearchPostRequest = null;
            //var response = instance.ApiV2ParametersSearchPost(skip, take, orderBy, searchField, searchValue, apiV2ParametersSearchPostRequest);
            //Assert.IsType<List<ParameterModel>>(response);
        }

        /// <summary>
        /// Test CreateParameter
        /// </summary>
        [Fact]
        public void CreateParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateParameterRequest createParameterRequest = null;
            //var response = instance.CreateParameter(createParameterRequest);
            //Assert.IsType<ParameterModel>(response);
        }

        /// <summary>
        /// Test DeleteByName
        /// </summary>
        [Fact]
        public void DeleteByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteByName(name);
        }

        /// <summary>
        /// Test DeleteByParameterKeyId
        /// </summary>
        [Fact]
        public void DeleteByParameterKeyIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid keyId = null;
            //instance.DeleteByParameterKeyId(keyId);
        }

        /// <summary>
        /// Test DeleteParameter
        /// </summary>
        [Fact]
        public void DeleteParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteParameter(id);
        }

        /// <summary>
        /// Test GetAllParameters
        /// </summary>
        [Fact]
        public void GetAllParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isDeleted = null;
            //int? skip = null;
            //int? take = null;
            //string orderBy = null;
            //string searchField = null;
            //string searchValue = null;
            //var response = instance.GetAllParameters(isDeleted, skip, take, orderBy, searchField, searchValue);
            //Assert.IsType<List<ParameterModel>>(response);
        }

        /// <summary>
        /// Test GetParameterById
        /// </summary>
        [Fact]
        public void GetParameterByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetParameterById(id);
            //Assert.IsType<ParameterModel>(response);
        }

        /// <summary>
        /// Test UpdateParameter
        /// </summary>
        [Fact]
        public void UpdateParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateParameterRequest updateParameterRequest = null;
            //instance.UpdateParameter(updateParameterRequest);
        }
    }
}
