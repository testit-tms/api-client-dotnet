/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using TestIt.ApiClient.Client;
using TestIt.ApiClient.Model;

namespace TestIt.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectExportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>FileParameter</returns>
        [Obsolete]
        FileParameter Export(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));

        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        [Obsolete]
        ApiResponse<FileParameter> ExportWithHttpInfo(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));
        /// <summary>
        /// Export project as JSON file in background job
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid ExportProjectJson(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));

        /// <summary>
        /// Export project as JSON file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ExportProjectJsonWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));
        /// <summary>
        /// Export project as JSON file with test plans in background job
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid ExportProjectWithTestPlansJson(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest));

        /// <summary>
        /// Export project as JSON file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ExportProjectWithTestPlansJsonWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest));
        /// <summary>
        /// Export project as Zip file with test plans in background job
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid ExportProjectWithTestPlansZip(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest));

        /// <summary>
        /// Export project as Zip file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ExportProjectWithTestPlansZipWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest));
        /// <summary>
        /// Export project as Zip file in background job
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid ExportProjectZip(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));

        /// <summary>
        /// Export project as Zip file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ExportProjectZipWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectExportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        [Obsolete]
        System.Threading.Tasks.Task<FileParameter> ExportAsync(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as JSON file
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> ExportWithHttpInfoAsync(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project as JSON file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ExportProjectJsonAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as JSON file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ExportProjectJsonWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project as JSON file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ExportProjectWithTestPlansJsonAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as JSON file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ExportProjectWithTestPlansJsonWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project as Zip file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ExportProjectWithTestPlansZipAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as Zip file with test plans in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ExportProjectWithTestPlansZipWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export project as Zip file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ExportProjectZipAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export project as Zip file in background job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ExportProjectZipWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectExportApi : IProjectExportApiSync, IProjectExportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectExportApi : IDisposable, IProjectExportApi
    {
        private TestIt.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProjectExportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProjectExportApi(string basePath)
        {
            this.Configuration = TestIt.ApiClient.Client.Configuration.MergeConfigurations(
                TestIt.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIt.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProjectExportApi(TestIt.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TestIt.ApiClient.Client.Configuration.MergeConfigurations(
                TestIt.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectExportApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectExportApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.ApiClient.Client.Configuration.MergeConfigurations(
                TestIt.ApiClient.Client.GlobalConfiguration.Instance,
                new TestIt.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new TestIt.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = TestIt.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProjectExportApi(HttpClient client, TestIt.ApiClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = TestIt.ApiClient.Client.Configuration.MergeConfigurations(
                TestIt.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new TestIt.ApiClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = TestIt.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectExportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProjectExportApi(TestIt.ApiClient.Client.ISynchronousClient client, TestIt.ApiClient.Client.IAsynchronousClient asyncClient, TestIt.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TestIt.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public TestIt.ApiClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TestIt.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TestIt.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TestIt.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TestIt.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>FileParameter</returns>
        [Obsolete]
        public FileParameter Export(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            TestIt.ApiClient.Client.ApiResponse<FileParameter> localVarResponse = ExportWithHttpInfo(projectId, includeAttachments, exportProjectJsonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        [Obsolete]
        public TestIt.ApiClient.Client.ApiResponse<FileParameter> ExportWithHttpInfo(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->Export");

            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileParameter>("/api/v2/projects/{projectId}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FileParameter> ExportAsync(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.ApiClient.Client.ApiResponse<FileParameter> localVarResponse = await ExportWithHttpInfoAsync(projectId, includeAttachments, exportProjectJsonRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Specifies the ID of the project you want to export.</param>
        /// <param name="includeAttachments">Enables attachment export. (optional, default to false)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TestIt.ApiClient.Client.ApiResponse<FileParameter>> ExportWithHttpInfoAsync(string projectId, bool? includeAttachments = default(bool?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->Export");


            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (includeAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(TestIt.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeAttachments", includeAttachments));
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileParameter>("/api/v2/projects/{projectId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid ExportProjectJson(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = ExportProjectJsonWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public TestIt.ApiClient.Client.ApiResponse<Guid> ExportProjectJsonWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectJson");

            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v2/projects/{projectId}/export/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ExportProjectJsonAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = await ExportProjectJsonWithHttpInfoAsync(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<TestIt.ApiClient.Client.ApiResponse<Guid>> ExportProjectJsonWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectJson");


            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v2/projects/{projectId}/export/json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid ExportProjectWithTestPlansJson(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = ExportProjectWithTestPlansJsonWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public TestIt.ApiClient.Client.ApiResponse<Guid> ExportProjectWithTestPlansJsonWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectWithTestPlansJson");

            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectWithTestPlansJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v2/projects/{projectId}/export/testPlans/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectWithTestPlansJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as JSON file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ExportProjectWithTestPlansJsonAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = await ExportProjectWithTestPlansJsonWithHttpInfoAsync(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as JSON file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<TestIt.ApiClient.Client.ApiResponse<Guid>> ExportProjectWithTestPlansJsonWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectWithTestPlansJson");


            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectWithTestPlansJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v2/projects/{projectId}/export/testPlans/json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectWithTestPlansJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as Zip file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid ExportProjectWithTestPlansZip(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = ExportProjectWithTestPlansZipWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as Zip file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public TestIt.ApiClient.Client.ApiResponse<Guid> ExportProjectWithTestPlansZipWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectWithTestPlansZip");

            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectWithTestPlansJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v2/projects/{projectId}/export/testPlans/zip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectWithTestPlansZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as Zip file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ExportProjectWithTestPlansZipAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = await ExportProjectWithTestPlansZipWithHttpInfoAsync(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as Zip file with test plans in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectWithTestPlansJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<TestIt.ApiClient.Client.ApiResponse<Guid>> ExportProjectWithTestPlansZipWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest = default(ExportProjectWithTestPlansJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectWithTestPlansZip");


            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectWithTestPlansJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v2/projects/{projectId}/export/testPlans/zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectWithTestPlansZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as Zip file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid ExportProjectZip(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = ExportProjectZipWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as Zip file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public TestIt.ApiClient.Client.ApiResponse<Guid> ExportProjectZipWithHttpInfo(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectZip");

            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v2/projects/{projectId}/export/zip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export project as Zip file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ExportProjectZipAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TestIt.ApiClient.Client.ApiResponse<Guid> localVarResponse = await ExportProjectZipWithHttpInfoAsync(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export project as Zip file in background job 
        /// </summary>
        /// <exception cref="TestIt.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project internal (UUID) or global (integer) identifier</param>
        /// <param name="timeZoneOffsetInMinutes"> (optional)</param>
        /// <param name="exportProjectJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<TestIt.ApiClient.Client.ApiResponse<Guid>> ExportProjectZipWithHttpInfoAsync(string projectId, long? timeZoneOffsetInMinutes = default(long?), ExportProjectJsonRequest exportProjectJsonRequest = default(ExportProjectJsonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new TestIt.ApiClient.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectExportApi->ExportProjectZip");


            TestIt.ApiClient.Client.RequestOptions localVarRequestOptions = new TestIt.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = TestIt.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TestIt.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", TestIt.ApiClient.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeZoneOffsetInMinutes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("time-Zone-Offset-In-Minutes", TestIt.ApiClient.Client.ClientUtils.ParameterToString(timeZoneOffsetInMinutes)); // header parameter
            }
            localVarRequestOptions.Data = exportProjectJsonRequest;

            // authentication (Bearer or PrivateToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v2/projects/{projectId}/export/zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProjectZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
