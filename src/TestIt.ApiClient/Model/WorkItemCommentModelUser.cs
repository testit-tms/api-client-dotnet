/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIt.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIt.ApiClient.Client.OpenAPIDateConverter;

namespace TestIt.ApiClient.Model
{
    /// <summary>
    /// WorkItemCommentModelUser
    /// </summary>
    [DataContract(Name = "WorkItemCommentModel_user")]
    public partial class WorkItemCommentModelUser : IEquatable<WorkItemCommentModelUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemCommentModelUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkItemCommentModelUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemCommentModelUser" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="middleName">middleName (required).</param>
        /// <param name="userName">userName (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="userType">userType (required).</param>
        /// <param name="avatarUrl">avatarUrl (required).</param>
        /// <param name="avatarMetadata">avatarMetadata (required).</param>
        /// <param name="isDeleted">isDeleted (required).</param>
        /// <param name="isDisabled">isDisabled (required).</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="isActiveStatusByEntity">isActiveStatusByEntity (required).</param>
        /// <param name="userRank">userRank (required).</param>
        public WorkItemCommentModelUser(Guid id = default(Guid), string firstName = default(string), string lastName = default(string), string middleName = default(string), string userName = default(string), string displayName = default(string), string userType = default(string), string avatarUrl = default(string), string avatarMetadata = default(string), bool isDeleted = default(bool), bool isDisabled = default(bool), Guid? providerId = default(Guid?), bool isActiveStatusByEntity = default(bool), UserWithRankModelUserRank userRank = default(UserWithRankModelUserRank))
        {
            this.Id = id;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "middleName" is required (not null)
            if (middleName == null)
            {
                throw new ArgumentNullException("middleName is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.MiddleName = middleName;
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new ArgumentNullException("userName is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.UserName = userName;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "userType" is required (not null)
            if (userType == null)
            {
                throw new ArgumentNullException("userType is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.UserType = userType;
            // to ensure "avatarUrl" is required (not null)
            if (avatarUrl == null)
            {
                throw new ArgumentNullException("avatarUrl is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.AvatarUrl = avatarUrl;
            // to ensure "avatarMetadata" is required (not null)
            if (avatarMetadata == null)
            {
                throw new ArgumentNullException("avatarMetadata is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.AvatarMetadata = avatarMetadata;
            this.IsDeleted = isDeleted;
            this.IsDisabled = isDisabled;
            this.IsActiveStatusByEntity = isActiveStatusByEntity;
            // to ensure "userRank" is required (not null)
            if (userRank == null)
            {
                throw new ArgumentNullException("userRank is a required property for WorkItemCommentModelUser and cannot be null");
            }
            this.UserRank = userRank;
            this.ProviderId = providerId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name = "middleName", IsRequired = true, EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", IsRequired = true, EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name = "userType", IsRequired = true, EmitDefaultValue = true)]
        public string UserType { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name = "avatarUrl", IsRequired = true, EmitDefaultValue = true)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets AvatarMetadata
        /// </summary>
        [DataMember(Name = "avatarMetadata", IsRequired = true, EmitDefaultValue = true)]
        public string AvatarMetadata { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name = "isDisabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public Guid? ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets IsActiveStatusByEntity
        /// </summary>
        [DataMember(Name = "isActiveStatusByEntity", IsRequired = true, EmitDefaultValue = true)]
        public bool IsActiveStatusByEntity { get; set; }

        /// <summary>
        /// Gets or Sets UserRank
        /// </summary>
        [DataMember(Name = "userRank", IsRequired = true, EmitDefaultValue = true)]
        public UserWithRankModelUserRank UserRank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkItemCommentModelUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  AvatarMetadata: ").Append(AvatarMetadata).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  IsActiveStatusByEntity: ").Append(IsActiveStatusByEntity).Append("\n");
            sb.Append("  UserRank: ").Append(UserRank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkItemCommentModelUser);
        }

        /// <summary>
        /// Returns true if WorkItemCommentModelUser instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkItemCommentModelUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkItemCommentModelUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.AvatarUrl == input.AvatarUrl ||
                    (this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(input.AvatarUrl))
                ) && 
                (
                    this.AvatarMetadata == input.AvatarMetadata ||
                    (this.AvatarMetadata != null &&
                    this.AvatarMetadata.Equals(input.AvatarMetadata))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    this.IsDisabled.Equals(input.IsDisabled)
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.IsActiveStatusByEntity == input.IsActiveStatusByEntity ||
                    this.IsActiveStatusByEntity.Equals(input.IsActiveStatusByEntity)
                ) && 
                (
                    this.UserRank == input.UserRank ||
                    (this.UserRank != null &&
                    this.UserRank.Equals(input.UserRank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.MiddleName != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleName.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.UserType != null)
                {
                    hashCode = (hashCode * 59) + this.UserType.GetHashCode();
                }
                if (this.AvatarUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AvatarUrl.GetHashCode();
                }
                if (this.AvatarMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.AvatarMetadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDisabled.GetHashCode();
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActiveStatusByEntity.GetHashCode();
                if (this.UserRank != null)
                {
                    hashCode = (hashCode * 59) + this.UserRank.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
