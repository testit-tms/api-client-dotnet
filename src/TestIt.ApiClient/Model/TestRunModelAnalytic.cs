/*
 * API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = TestIT.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = TestIT.ApiClient.Client.OpenAPIDateConverter;

namespace TestIT.ApiClient.Model
{
    /// <summary>
    /// TestRunModelAnalytic
    /// </summary>
    [DataContract(Name = "TestRunModel_analytic")]
    public partial class TestRunModelAnalytic : IEquatable<TestRunModelAnalytic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunModelAnalytic" /> class.
        /// </summary>
        /// <param name="countGroupByStatus">countGroupByStatus.</param>
        /// <param name="countGroupByFailureClass">countGroupByFailureClass.</param>
        public TestRunModelAnalytic(List<TestRunGroupByStatusModel> countGroupByStatus = default(List<TestRunGroupByStatusModel>), List<TestRunGroupByFailureClassModel> countGroupByFailureClass = default(List<TestRunGroupByFailureClassModel>))
        {
            this.CountGroupByStatus = countGroupByStatus;
            this.CountGroupByFailureClass = countGroupByFailureClass;
        }

        /// <summary>
        /// Gets or Sets CountGroupByStatus
        /// </summary>
        [DataMember(Name = "countGroupByStatus", EmitDefaultValue = true)]
        public List<TestRunGroupByStatusModel> CountGroupByStatus { get; set; }

        /// <summary>
        /// Gets or Sets CountGroupByFailureClass
        /// </summary>
        [DataMember(Name = "countGroupByFailureClass", EmitDefaultValue = true)]
        public List<TestRunGroupByFailureClassModel> CountGroupByFailureClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestRunModelAnalytic {\n");
            sb.Append("  CountGroupByStatus: ").Append(CountGroupByStatus).Append("\n");
            sb.Append("  CountGroupByFailureClass: ").Append(CountGroupByFailureClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestRunModelAnalytic);
        }

        /// <summary>
        /// Returns true if TestRunModelAnalytic instances are equal
        /// </summary>
        /// <param name="input">Instance of TestRunModelAnalytic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestRunModelAnalytic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountGroupByStatus == input.CountGroupByStatus ||
                    this.CountGroupByStatus != null &&
                    input.CountGroupByStatus != null &&
                    this.CountGroupByStatus.SequenceEqual(input.CountGroupByStatus)
                ) && 
                (
                    this.CountGroupByFailureClass == input.CountGroupByFailureClass ||
                    this.CountGroupByFailureClass != null &&
                    input.CountGroupByFailureClass != null &&
                    this.CountGroupByFailureClass.SequenceEqual(input.CountGroupByFailureClass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountGroupByStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByStatus.GetHashCode();
                }
                if (this.CountGroupByFailureClass != null)
                {
                    hashCode = (hashCode * 59) + this.CountGroupByFailureClass.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
